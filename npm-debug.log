0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'update', '-g' ]
2 info using npm@1.4.21
3 info using node@v0.10.30
4 verbose request where is /coffee
5 verbose request registry http://registry.npm.taobao.org/
6 verbose request id 9cc1c5fdd35f4b1f
7 verbose url raw /coffee
8 verbose url resolving [ 'http://registry.npm.taobao.org/', './coffee' ]
9 verbose url resolved http://registry.npm.taobao.org/coffee
10 verbose request where is http://registry.npm.taobao.org/coffee
11 info trying registry request attempt 1 at 15:20:43
12 verbose etag "1397496086000"
13 http GET http://registry.npm.taobao.org/coffee
14 verbose request where is /forever
15 verbose request registry http://registry.npm.taobao.org/
16 verbose url raw /forever
17 verbose url resolving [ 'http://registry.npm.taobao.org/', './forever' ]
18 verbose url resolved http://registry.npm.taobao.org/forever
19 verbose request where is http://registry.npm.taobao.org/forever
20 info trying registry request attempt 1 at 15:20:43
21 verbose etag "1398360518000"
22 http GET http://registry.npm.taobao.org/forever
23 verbose request where is /generator-meanstack
24 verbose request registry http://registry.npm.taobao.org/
25 verbose url raw /generator-meanstack
26 verbose url resolving [ 'http://registry.npm.taobao.org/', './generator-meanstack' ]
27 verbose url resolved http://registry.npm.taobao.org/generator-meanstack
28 verbose request where is http://registry.npm.taobao.org/generator-meanstack
29 info trying registry request attempt 1 at 15:20:43
30 verbose etag "1397536306000"
31 http GET http://registry.npm.taobao.org/generator-meanstack
32 verbose request where is /grunt-init
33 verbose request registry http://registry.npm.taobao.org/
34 verbose url raw /grunt-init
35 verbose url resolving [ 'http://registry.npm.taobao.org/', './grunt-init' ]
36 verbose url resolved http://registry.npm.taobao.org/grunt-init
37 verbose request where is http://registry.npm.taobao.org/grunt-init
38 info trying registry request attempt 1 at 15:20:43
39 verbose etag "1399832251000"
40 http GET http://registry.npm.taobao.org/grunt-init
41 verbose request where is /grunt-cli
42 verbose request registry http://registry.npm.taobao.org/
43 verbose url raw /grunt-cli
44 verbose url resolving [ 'http://registry.npm.taobao.org/', './grunt-cli' ]
45 verbose url resolved http://registry.npm.taobao.org/grunt-cli
46 verbose request where is http://registry.npm.taobao.org/grunt-cli
47 info trying registry request attempt 1 at 15:20:43
48 verbose etag "1397502593000"
49 http GET http://registry.npm.taobao.org/grunt-cli
50 verbose request where is /node-theseus
51 verbose request registry http://registry.npm.taobao.org/
52 verbose url raw /node-theseus
53 verbose url resolving [ 'http://registry.npm.taobao.org/', './node-theseus' ]
54 verbose url resolved http://registry.npm.taobao.org/node-theseus
55 verbose request where is http://registry.npm.taobao.org/node-theseus
56 info trying registry request attempt 1 at 15:20:43
57 verbose etag "1397718085000"
58 http GET http://registry.npm.taobao.org/node-theseus
59 verbose request where is /coffee-script
60 verbose request registry http://registry.npm.taobao.org/
61 verbose url raw /coffee-script
62 verbose url resolving [ 'http://registry.npm.taobao.org/', './coffee-script' ]
63 verbose url resolved http://registry.npm.taobao.org/coffee-script
64 verbose request where is http://registry.npm.taobao.org/coffee-script
65 info trying registry request attempt 1 at 15:20:43
66 verbose etag "1397449077000"
67 http GET http://registry.npm.taobao.org/coffee-script
68 verbose request where is /grunt
69 verbose request registry http://registry.npm.taobao.org/
70 verbose url raw /grunt
71 verbose url resolving [ 'http://registry.npm.taobao.org/', './grunt' ]
72 verbose url resolved http://registry.npm.taobao.org/grunt
73 verbose request where is http://registry.npm.taobao.org/grunt
74 info trying registry request attempt 1 at 15:20:43
75 verbose etag "1399916852000"
76 http GET http://registry.npm.taobao.org/grunt
77 verbose request where is /nodeunit
78 verbose request registry http://registry.npm.taobao.org/
79 verbose url raw /nodeunit
80 verbose url resolving [ 'http://registry.npm.taobao.org/', './nodeunit' ]
81 verbose url resolved http://registry.npm.taobao.org/nodeunit
82 verbose request where is http://registry.npm.taobao.org/nodeunit
83 info trying registry request attempt 1 at 15:20:43
84 verbose etag "1399903066000"
85 http GET http://registry.npm.taobao.org/nodeunit
86 verbose request where is /tty.js
87 verbose request registry http://registry.npm.taobao.org/
88 verbose url raw /tty.js
89 verbose url resolving [ 'http://registry.npm.taobao.org/', './tty.js' ]
90 verbose url resolved http://registry.npm.taobao.org/tty.js
91 verbose request where is http://registry.npm.taobao.org/tty.js
92 info trying registry request attempt 1 at 15:20:43
93 verbose etag "1397737570000"
94 http GET http://registry.npm.taobao.org/tty.js
95 verbose request where is /cnpm
96 verbose request registry http://registry.npm.taobao.org/
97 verbose url raw /cnpm
98 verbose url resolving [ 'http://registry.npm.taobao.org/', './cnpm' ]
99 verbose url resolved http://registry.npm.taobao.org/cnpm
100 verbose request where is http://registry.npm.taobao.org/cnpm
101 info trying registry request attempt 1 at 15:20:43
102 verbose etag "1401935771000"
103 http GET http://registry.npm.taobao.org/cnpm
104 verbose request where is /nodemon
105 verbose request registry http://registry.npm.taobao.org/
106 verbose url raw /nodemon
107 verbose url resolving [ 'http://registry.npm.taobao.org/', './nodemon' ]
108 verbose url resolved http://registry.npm.taobao.org/nodemon
109 verbose request where is http://registry.npm.taobao.org/nodemon
110 info trying registry request attempt 1 at 15:20:43
111 verbose etag "1401883765000"
112 http GET http://registry.npm.taobao.org/nodemon
113 verbose request where is /gulp
114 verbose request registry http://registry.npm.taobao.org/
115 verbose url raw /gulp
116 verbose url resolving [ 'http://registry.npm.taobao.org/', './gulp' ]
117 verbose url resolved http://registry.npm.taobao.org/gulp
118 verbose request where is http://registry.npm.taobao.org/gulp
119 info trying registry request attempt 1 at 15:20:43
120 verbose etag "1403643857000"
121 http GET http://registry.npm.taobao.org/gulp
122 verbose request where is /bower
123 verbose request registry http://registry.npm.taobao.org/
124 verbose url raw /bower
125 verbose url resolving [ 'http://registry.npm.taobao.org/', './bower' ]
126 verbose url resolved http://registry.npm.taobao.org/bower
127 verbose request where is http://registry.npm.taobao.org/bower
128 info trying registry request attempt 1 at 15:20:43
129 verbose etag "1403140785000"
130 http GET http://registry.npm.taobao.org/bower
131 verbose request where is /less
132 verbose request registry http://registry.npm.taobao.org/
133 verbose url raw /less
134 verbose url resolving [ 'http://registry.npm.taobao.org/', './less' ]
135 verbose url resolved http://registry.npm.taobao.org/less
136 verbose request where is http://registry.npm.taobao.org/less
137 info trying registry request attempt 1 at 15:20:43
138 verbose etag "1403450593000"
139 http GET http://registry.npm.taobao.org/less
140 verbose request where is /node-inspector
141 verbose request registry http://registry.npm.taobao.org/
142 verbose url raw /node-inspector
143 verbose url resolving [ 'http://registry.npm.taobao.org/', './node-inspector' ]
144 verbose url resolved http://registry.npm.taobao.org/node-inspector
145 verbose request where is http://registry.npm.taobao.org/node-inspector
146 info trying registry request attempt 1 at 15:20:44
147 verbose etag "1401952165000"
148 http GET http://registry.npm.taobao.org/node-inspector
149 verbose request where is /sails
150 verbose request registry http://registry.npm.taobao.org/
151 verbose url raw /sails
152 verbose url resolving [ 'http://registry.npm.taobao.org/', './sails' ]
153 verbose url resolved http://registry.npm.taobao.org/sails
154 verbose request where is http://registry.npm.taobao.org/sails
155 info trying registry request attempt 1 at 15:20:44
156 verbose etag "1403177081000"
157 http GET http://registry.npm.taobao.org/sails
158 verbose request where is /npm
159 verbose request registry http://registry.npm.taobao.org/
160 verbose url raw /npm
161 verbose url resolving [ 'http://registry.npm.taobao.org/', './npm' ]
162 verbose url resolved http://registry.npm.taobao.org/npm
163 verbose request where is http://registry.npm.taobao.org/npm
164 info trying registry request attempt 1 at 15:20:44
165 verbose etag "1403030562000"
166 http GET http://registry.npm.taobao.org/npm
167 verbose request where is /express-generator
168 verbose request registry http://registry.npm.taobao.org/
169 verbose url raw /express-generator
170 verbose url resolving [ 'http://registry.npm.taobao.org/', './express-generator' ]
171 verbose url resolved http://registry.npm.taobao.org/express-generator
172 verbose request where is http://registry.npm.taobao.org/express-generator
173 info trying registry request attempt 1 at 15:20:44
174 verbose etag "1400027950000"
175 http GET http://registry.npm.taobao.org/express-generator
176 verbose request where is /yo
177 verbose request registry http://registry.npm.taobao.org/
178 verbose url raw /yo
179 verbose url resolving [ 'http://registry.npm.taobao.org/', './yo' ]
180 verbose url resolved http://registry.npm.taobao.org/yo
181 verbose request where is http://registry.npm.taobao.org/yo
182 info trying registry request attempt 1 at 15:20:44
183 verbose etag "1403157188000"
184 http GET http://registry.npm.taobao.org/yo
185 http 304 http://registry.npm.taobao.org/forever
186 silly registry.get cb [ 304,
186 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
186 silly registry.get     connection: 'keep-alive',
186 silly registry.get     'x-powered-by': 'koa',
186 silly registry.get     etag: '"1398360518000"',
186 silly registry.get     'x-readtime': '3' } ]
187 verbose etag http://registry.npm.taobao.org/forever from cache
188 http 304 http://registry.npm.taobao.org/grunt-init
189 silly registry.get cb [ 304,
189 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
189 silly registry.get     connection: 'keep-alive',
189 silly registry.get     'x-powered-by': 'koa',
189 silly registry.get     etag: '"1399832251000"',
189 silly registry.get     'x-readtime': '6' } ]
190 verbose etag http://registry.npm.taobao.org/grunt-init from cache
191 http 304 http://registry.npm.taobao.org/generator-meanstack
192 silly registry.get cb [ 304,
192 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
192 silly registry.get     connection: 'keep-alive',
192 silly registry.get     'x-powered-by': 'koa',
192 silly registry.get     etag: '"1397536306000"',
192 silly registry.get     'x-readtime': '4' } ]
193 verbose etag http://registry.npm.taobao.org/generator-meanstack from cache
194 http 304 http://registry.npm.taobao.org/grunt-cli
195 silly registry.get cb [ 304,
195 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
195 silly registry.get     connection: 'keep-alive',
195 silly registry.get     'x-powered-by': 'koa',
195 silly registry.get     etag: '"1397502593000"',
195 silly registry.get     'x-readtime': '3' } ]
196 verbose etag http://registry.npm.taobao.org/grunt-cli from cache
197 http 304 http://registry.npm.taobao.org/coffee
198 silly registry.get cb [ 304,
198 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
198 silly registry.get     connection: 'keep-alive',
198 silly registry.get     'x-powered-by': 'koa',
198 silly registry.get     etag: '"1397496086000"',
198 silly registry.get     'x-readtime': '7' } ]
199 verbose etag http://registry.npm.taobao.org/coffee from cache
200 http 304 http://registry.npm.taobao.org/coffee-script
201 silly registry.get cb [ 304,
201 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
201 silly registry.get     connection: 'keep-alive',
201 silly registry.get     'x-powered-by': 'koa',
201 silly registry.get     etag: '"1397449077000"',
201 silly registry.get     'x-readtime': '3' } ]
202 verbose etag http://registry.npm.taobao.org/coffee-script from cache
203 verbose request where is /grunt
204 verbose request registry http://registry.npm.taobao.org/
205 verbose url raw /grunt
206 verbose url resolving [ 'http://registry.npm.taobao.org/', './grunt' ]
207 verbose url resolved http://registry.npm.taobao.org/grunt
208 verbose request where is http://registry.npm.taobao.org/grunt
209 info trying registry request attempt 1 at 15:20:44
210 verbose etag "1399916852000"
211 http GET http://registry.npm.taobao.org/grunt
212 verbose request where is /semver
213 verbose request registry http://registry.npm.taobao.org/
214 verbose url raw /semver
215 verbose url resolving [ 'http://registry.npm.taobao.org/', './semver' ]
216 verbose url resolved http://registry.npm.taobao.org/semver
217 verbose request where is http://registry.npm.taobao.org/semver
218 info trying registry request attempt 1 at 15:20:44
219 verbose etag "1403131989000"
220 http GET http://registry.npm.taobao.org/semver
221 verbose request where is /colors
222 verbose request registry http://registry.npm.taobao.org/
223 verbose url raw /colors
224 verbose url resolving [ 'http://registry.npm.taobao.org/', './colors' ]
225 verbose url resolved http://registry.npm.taobao.org/colors
226 verbose request where is http://registry.npm.taobao.org/colors
227 info trying registry request attempt 1 at 15:20:44
228 verbose etag "1397447037000"
229 http GET http://registry.npm.taobao.org/colors
230 verbose request where is /prompt
231 verbose request registry http://registry.npm.taobao.org/
232 verbose url raw /prompt
233 verbose url resolving [ 'http://registry.npm.taobao.org/', './prompt' ]
234 verbose url resolved http://registry.npm.taobao.org/prompt
235 verbose request where is http://registry.npm.taobao.org/prompt
236 info trying registry request attempt 1 at 15:20:44
237 verbose etag "1401055137000"
238 http GET http://registry.npm.taobao.org/prompt
239 verbose request where is /hooker
240 verbose request registry http://registry.npm.taobao.org/
241 verbose url raw /hooker
242 verbose url resolving [ 'http://registry.npm.taobao.org/', './hooker' ]
243 verbose url resolved http://registry.npm.taobao.org/hooker
244 verbose request where is http://registry.npm.taobao.org/hooker
245 info trying registry request attempt 1 at 15:20:44
246 verbose etag "1397508833000"
247 http GET http://registry.npm.taobao.org/hooker
248 verbose request where is /lodash
249 verbose request registry http://registry.npm.taobao.org/
250 verbose url raw /lodash
251 verbose url resolving [ 'http://registry.npm.taobao.org/', './lodash' ]
252 verbose url resolved http://registry.npm.taobao.org/lodash
253 verbose request where is http://registry.npm.taobao.org/lodash
254 info trying registry request attempt 1 at 15:20:44
255 verbose etag "1397567791000"
256 http GET http://registry.npm.taobao.org/lodash
257 verbose request where is /async
258 verbose request registry http://registry.npm.taobao.org/
259 verbose url raw /async
260 verbose url resolving [ 'http://registry.npm.taobao.org/', './async' ]
261 verbose url resolved http://registry.npm.taobao.org/async
262 verbose request where is http://registry.npm.taobao.org/async
263 info trying registry request attempt 1 at 15:20:44
264 verbose etag "1400236732000"
265 http GET http://registry.npm.taobao.org/async
266 verbose request where is /yeoman-generator
267 verbose request registry http://registry.npm.taobao.org/
268 verbose url raw /yeoman-generator
269 verbose url resolving [ 'http://registry.npm.taobao.org/', './yeoman-generator' ]
270 verbose url resolved http://registry.npm.taobao.org/yeoman-generator
271 verbose request where is http://registry.npm.taobao.org/yeoman-generator
272 info trying registry request attempt 1 at 15:20:44
273 verbose etag "1400395131000"
274 http GET http://registry.npm.taobao.org/yeoman-generator
275 verbose request where is /colors
276 verbose request registry http://registry.npm.taobao.org/
277 verbose url raw /colors
278 verbose url resolving [ 'http://registry.npm.taobao.org/', './colors' ]
279 verbose url resolved http://registry.npm.taobao.org/colors
280 verbose request where is http://registry.npm.taobao.org/colors
281 info trying registry request attempt 1 at 15:20:44
282 verbose etag "1397447037000"
283 http GET http://registry.npm.taobao.org/colors
284 http 304 http://registry.npm.taobao.org/grunt
285 silly registry.get cb [ 304,
285 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
285 silly registry.get     connection: 'keep-alive',
285 silly registry.get     'x-powered-by': 'koa',
285 silly registry.get     etag: '"1399916852000"',
285 silly registry.get     'x-readtime': '7' } ]
286 verbose etag http://registry.npm.taobao.org/grunt from cache
287 verbose request where is /forever-monitor
288 verbose request registry http://registry.npm.taobao.org/
289 verbose url raw /forever-monitor
290 verbose url resolving [ 'http://registry.npm.taobao.org/', './forever-monitor' ]
291 verbose url resolved http://registry.npm.taobao.org/forever-monitor
292 verbose request where is http://registry.npm.taobao.org/forever-monitor
293 info trying registry request attempt 1 at 15:20:44
294 verbose etag "1397521346000"
295 http GET http://registry.npm.taobao.org/forever-monitor
296 verbose request where is /cliff
297 verbose request registry http://registry.npm.taobao.org/
298 verbose url raw /cliff
299 verbose url resolving [ 'http://registry.npm.taobao.org/', './cliff' ]
300 verbose url resolved http://registry.npm.taobao.org/cliff
301 verbose request where is http://registry.npm.taobao.org/cliff
302 info trying registry request attempt 1 at 15:20:44
303 verbose etag "1397494897000"
304 http GET http://registry.npm.taobao.org/cliff
305 verbose request where is /flatiron
306 verbose request registry http://registry.npm.taobao.org/
307 verbose url raw /flatiron
308 verbose url resolving [ 'http://registry.npm.taobao.org/', './flatiron' ]
309 verbose url resolved http://registry.npm.taobao.org/flatiron
310 verbose request where is http://registry.npm.taobao.org/flatiron
311 info trying registry request attempt 1 at 15:20:44
312 verbose etag "1397520241000"
313 http GET http://registry.npm.taobao.org/flatiron
314 verbose request where is /nconf
315 verbose request registry http://registry.npm.taobao.org/
316 verbose url raw /nconf
317 verbose url resolving [ 'http://registry.npm.taobao.org/', './nconf' ]
318 verbose url resolved http://registry.npm.taobao.org/nconf
319 verbose request where is http://registry.npm.taobao.org/nconf
320 info trying registry request attempt 1 at 15:20:44
321 verbose etag "1397516252000"
322 http GET http://registry.npm.taobao.org/nconf
323 verbose request where is /pkginfo
324 verbose request registry http://registry.npm.taobao.org/
325 verbose url raw /pkginfo
326 verbose url resolving [ 'http://registry.npm.taobao.org/', './pkginfo' ]
327 verbose url resolved http://registry.npm.taobao.org/pkginfo
328 verbose request where is http://registry.npm.taobao.org/pkginfo
329 info trying registry request attempt 1 at 15:20:44
330 verbose etag "1397502702000"
331 http GET http://registry.npm.taobao.org/pkginfo
332 verbose request where is /nssocket
333 verbose request registry http://registry.npm.taobao.org/
334 verbose url raw /nssocket
335 verbose url resolving [ 'http://registry.npm.taobao.org/', './nssocket' ]
336 verbose url resolved http://registry.npm.taobao.org/nssocket
337 verbose request where is http://registry.npm.taobao.org/nssocket
338 info trying registry request attempt 1 at 15:20:44
339 verbose etag "1397525226000"
340 http GET http://registry.npm.taobao.org/nssocket
341 verbose request where is /timespan
342 verbose request registry http://registry.npm.taobao.org/
343 verbose url raw /timespan
344 verbose url resolving [ 'http://registry.npm.taobao.org/', './timespan' ]
345 verbose url resolved http://registry.npm.taobao.org/timespan
346 verbose request where is http://registry.npm.taobao.org/timespan
347 info trying registry request attempt 1 at 15:20:44
348 verbose etag "1397508602000"
349 http GET http://registry.npm.taobao.org/timespan
350 verbose request where is /optimist
351 verbose request registry http://registry.npm.taobao.org/
352 verbose url raw /optimist
353 verbose url resolving [ 'http://registry.npm.taobao.org/', './optimist' ]
354 verbose url resolved http://registry.npm.taobao.org/optimist
355 verbose request where is http://registry.npm.taobao.org/optimist
356 info trying registry request attempt 1 at 15:20:44
357 verbose etag "1397452996000"
358 http GET http://registry.npm.taobao.org/optimist
359 verbose request where is /watch
360 verbose request registry http://registry.npm.taobao.org/
361 verbose url raw /watch
362 verbose url resolving [ 'http://registry.npm.taobao.org/', './watch' ]
363 verbose url resolved http://registry.npm.taobao.org/watch
364 verbose request where is http://registry.npm.taobao.org/watch
365 info trying registry request attempt 1 at 15:20:44
366 verbose etag "1397525154000"
367 http GET http://registry.npm.taobao.org/watch
368 verbose request where is /utile
369 verbose request registry http://registry.npm.taobao.org/
370 verbose url raw /utile
371 verbose url resolving [ 'http://registry.npm.taobao.org/', './utile' ]
372 verbose url resolved http://registry.npm.taobao.org/utile
373 verbose request where is http://registry.npm.taobao.org/utile
374 info trying registry request attempt 1 at 15:20:44
375 verbose etag "1397502725000"
376 http GET http://registry.npm.taobao.org/utile
377 verbose request where is /winston
378 verbose request registry http://registry.npm.taobao.org/
379 verbose url raw /winston
380 verbose url resolving [ 'http://registry.npm.taobao.org/', './winston' ]
381 verbose url resolved http://registry.npm.taobao.org/winston
382 verbose request where is http://registry.npm.taobao.org/winston
383 info trying registry request attempt 1 at 15:20:44
384 verbose etag "1397502697000"
385 http GET http://registry.npm.taobao.org/winston
386 verbose request where is /nopt
387 verbose request registry http://registry.npm.taobao.org/
388 verbose url raw /nopt
389 verbose url resolving [ 'http://registry.npm.taobao.org/', './nopt' ]
390 verbose url resolved http://registry.npm.taobao.org/nopt
391 verbose request where is http://registry.npm.taobao.org/nopt
392 info trying registry request attempt 1 at 15:20:44
393 verbose etag "1402087767000"
394 http GET http://registry.npm.taobao.org/nopt
395 verbose request where is /findup-sync
396 verbose request registry http://registry.npm.taobao.org/
397 verbose url raw /findup-sync
398 verbose url resolving [ 'http://registry.npm.taobao.org/', './findup-sync' ]
399 verbose url resolved http://registry.npm.taobao.org/findup-sync
400 verbose request where is http://registry.npm.taobao.org/findup-sync
401 info trying registry request attempt 1 at 15:20:44
402 verbose etag "1397505921000"
403 http GET http://registry.npm.taobao.org/findup-sync
404 http 200 http://registry.npm.taobao.org/node-theseus
405 silly registry.get cb [ 200,
405 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
405 silly registry.get     'content-type': 'application/json; charset=utf-8',
405 silly registry.get     'content-length': '19239',
405 silly registry.get     connection: 'keep-alive',
405 silly registry.get     'x-powered-by': 'koa',
405 silly registry.get     etag: '"1404166465000"',
405 silly registry.get     'x-readtime': '32' } ]
406 http 304 http://registry.npm.taobao.org/nodeunit
407 silly registry.get cb [ 304,
407 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
407 silly registry.get     connection: 'keep-alive',
407 silly registry.get     'x-powered-by': 'koa',
407 silly registry.get     etag: '"1399903066000"',
407 silly registry.get     'x-readtime': '28' } ]
408 verbose etag http://registry.npm.taobao.org/nodeunit from cache
409 verbose request where is /resolve
410 verbose request registry http://registry.npm.taobao.org/
411 verbose url raw /resolve
412 verbose url resolving [ 'http://registry.npm.taobao.org/', './resolve' ]
413 verbose url resolved http://registry.npm.taobao.org/resolve
414 verbose request where is http://registry.npm.taobao.org/resolve
415 info trying registry request attempt 1 at 15:20:44
416 verbose etag "1402357294000"
417 http GET http://registry.npm.taobao.org/resolve
418 verbose request where is /express
419 verbose request registry http://registry.npm.taobao.org/
420 verbose url raw /express
421 verbose url resolving [ 'http://registry.npm.taobao.org/', './express' ]
422 verbose url resolved http://registry.npm.taobao.org/express
423 verbose request where is http://registry.npm.taobao.org/express
424 info trying registry request attempt 1 at 15:20:44
425 verbose etag "1403596258000"
426 http GET http://registry.npm.taobao.org/express
427 verbose request where is /chai
428 verbose request registry http://registry.npm.taobao.org/
429 verbose url raw /chai
430 verbose url resolving [ 'http://registry.npm.taobao.org/', './chai' ]
431 verbose url resolved http://registry.npm.taobao.org/chai
432 verbose request where is http://registry.npm.taobao.org/chai
433 info trying registry request attempt 1 at 15:20:44
434 verbose etag "1397446620000"
435 http GET http://registry.npm.taobao.org/chai
436 verbose request where is /mocha
437 verbose request registry http://registry.npm.taobao.org/
438 verbose url raw /mocha
439 verbose url resolving [ 'http://registry.npm.taobao.org/', './mocha' ]
440 verbose url resolved http://registry.npm.taobao.org/mocha
441 verbose request where is http://registry.npm.taobao.org/mocha
442 info trying registry request attempt 1 at 15:20:44
443 verbose etag "1401859601000"
444 http GET http://registry.npm.taobao.org/mocha
445 verbose request where is /modular-amd
446 verbose request registry http://registry.npm.taobao.org/
447 verbose url raw /modular-amd
448 verbose url resolving [ 'http://registry.npm.taobao.org/', './modular-amd' ]
449 verbose url resolved http://registry.npm.taobao.org/modular-amd
450 verbose request where is http://registry.npm.taobao.org/modular-amd
451 info trying registry request attempt 1 at 15:20:44
452 verbose etag "1397704942000"
453 http GET http://registry.npm.taobao.org/modular-amd
454 verbose request where is /node-getopt
455 verbose request registry http://registry.npm.taobao.org/
456 verbose url raw /node-getopt
457 verbose url resolving [ 'http://registry.npm.taobao.org/', './node-getopt' ]
458 verbose url resolved http://registry.npm.taobao.org/node-getopt
459 verbose request where is http://registry.npm.taobao.org/node-getopt
460 info trying registry request attempt 1 at 15:20:44
461 verbose etag "1397716749000"
462 http GET http://registry.npm.taobao.org/node-getopt
463 verbose request where is /sinon-chai
464 verbose request registry http://registry.npm.taobao.org/
465 verbose url raw /sinon-chai
466 verbose url resolving [ 'http://registry.npm.taobao.org/', './sinon-chai' ]
467 verbose url resolved http://registry.npm.taobao.org/sinon-chai
468 verbose request where is http://registry.npm.taobao.org/sinon-chai
469 info trying registry request attempt 1 at 15:20:44
470 verbose etag "1397504905000"
471 http GET http://registry.npm.taobao.org/sinon-chai
472 verbose request where is /mkdirp
473 verbose request registry http://registry.npm.taobao.org/
474 verbose url raw /mkdirp
475 verbose url resolving [ 'http://registry.npm.taobao.org/', './mkdirp' ]
476 verbose url resolved http://registry.npm.taobao.org/mkdirp
477 verbose request where is http://registry.npm.taobao.org/mkdirp
478 info trying registry request attempt 1 at 15:20:44
479 verbose etag "1399343851000"
480 http GET http://registry.npm.taobao.org/mkdirp
481 verbose registry.get http://registry.npm.taobao.org/coffee-script not expired, no request
482 verbose request where is /colors
483 verbose request registry http://registry.npm.taobao.org/
484 verbose url raw /colors
485 verbose url resolving [ 'http://registry.npm.taobao.org/', './colors' ]
486 verbose url resolved http://registry.npm.taobao.org/colors
487 verbose request where is http://registry.npm.taobao.org/colors
488 info trying registry request attempt 1 at 15:20:44
489 verbose etag "1397447037000"
490 http GET http://registry.npm.taobao.org/colors
491 verbose request where is /async
492 verbose request registry http://registry.npm.taobao.org/
493 verbose url raw /async
494 verbose url resolving [ 'http://registry.npm.taobao.org/', './async' ]
495 verbose url resolved http://registry.npm.taobao.org/async
496 verbose request where is http://registry.npm.taobao.org/async
497 info trying registry request attempt 1 at 15:20:44
498 verbose etag "1400236732000"
499 http GET http://registry.npm.taobao.org/async
500 verbose request where is /findup-sync
501 verbose request registry http://registry.npm.taobao.org/
502 verbose url raw /findup-sync
503 verbose url resolving [ 'http://registry.npm.taobao.org/', './findup-sync' ]
504 verbose url resolved http://registry.npm.taobao.org/findup-sync
505 verbose request where is http://registry.npm.taobao.org/findup-sync
506 info trying registry request attempt 1 at 15:20:44
507 verbose etag "1397505921000"
508 http GET http://registry.npm.taobao.org/findup-sync
509 verbose request where is /hooker
510 verbose request registry http://registry.npm.taobao.org/
511 verbose url raw /hooker
512 verbose url resolving [ 'http://registry.npm.taobao.org/', './hooker' ]
513 verbose url resolved http://registry.npm.taobao.org/hooker
514 verbose request where is http://registry.npm.taobao.org/hooker
515 info trying registry request attempt 1 at 15:20:44
516 verbose etag "1397508833000"
517 http GET http://registry.npm.taobao.org/hooker
518 verbose request where is /dateformat
519 verbose request registry http://registry.npm.taobao.org/
520 verbose url raw /dateformat
521 verbose url resolving [ 'http://registry.npm.taobao.org/', './dateformat' ]
522 verbose url resolved http://registry.npm.taobao.org/dateformat
523 verbose request where is http://registry.npm.taobao.org/dateformat
524 info trying registry request attempt 1 at 15:20:44
525 verbose etag "1400586524000"
526 http GET http://registry.npm.taobao.org/dateformat
527 verbose request where is /nopt
528 verbose request registry http://registry.npm.taobao.org/
529 verbose url raw /nopt
530 verbose url resolving [ 'http://registry.npm.taobao.org/', './nopt' ]
531 verbose url resolved http://registry.npm.taobao.org/nopt
532 verbose request where is http://registry.npm.taobao.org/nopt
533 info trying registry request attempt 1 at 15:20:44
534 verbose etag "1402087767000"
535 http GET http://registry.npm.taobao.org/nopt
536 verbose request where is /eventemitter2
537 verbose request registry http://registry.npm.taobao.org/
538 verbose url raw /eventemitter2
539 verbose url resolving [ 'http://registry.npm.taobao.org/', './eventemitter2' ]
540 verbose url resolved http://registry.npm.taobao.org/eventemitter2
541 verbose request where is http://registry.npm.taobao.org/eventemitter2
542 info trying registry request attempt 1 at 15:20:44
543 verbose etag "1403631265000"
544 http GET http://registry.npm.taobao.org/eventemitter2
545 verbose request where is /lodash
546 verbose request registry http://registry.npm.taobao.org/
547 verbose url raw /lodash
548 verbose url resolving [ 'http://registry.npm.taobao.org/', './lodash' ]
549 verbose url resolved http://registry.npm.taobao.org/lodash
550 verbose request where is http://registry.npm.taobao.org/lodash
551 info trying registry request attempt 1 at 15:20:44
552 verbose etag "1397567791000"
553 http GET http://registry.npm.taobao.org/lodash
554 verbose request where is /glob
555 verbose request registry http://registry.npm.taobao.org/
556 verbose url raw /glob
557 verbose url resolving [ 'http://registry.npm.taobao.org/', './glob' ]
558 verbose url resolved http://registry.npm.taobao.org/glob
559 verbose request where is http://registry.npm.taobao.org/glob
560 info trying registry request attempt 1 at 15:20:44
561 verbose etag "1401758454000"
562 http GET http://registry.npm.taobao.org/glob
563 verbose request where is /iconv-lite
564 verbose request registry http://registry.npm.taobao.org/
565 verbose url raw /iconv-lite
566 verbose url resolving [ 'http://registry.npm.taobao.org/', './iconv-lite' ]
567 verbose url resolved http://registry.npm.taobao.org/iconv-lite
568 verbose request where is http://registry.npm.taobao.org/iconv-lite
569 info trying registry request attempt 1 at 15:20:44
570 verbose etag "1402808566000"
571 http GET http://registry.npm.taobao.org/iconv-lite
572 verbose request where is /minimatch
573 verbose request registry http://registry.npm.taobao.org/
574 verbose url raw /minimatch
575 verbose url resolving [ 'http://registry.npm.taobao.org/', './minimatch' ]
576 verbose url resolved http://registry.npm.taobao.org/minimatch
577 verbose request where is http://registry.npm.taobao.org/minimatch
578 info trying registry request attempt 1 at 15:20:44
579 verbose etag "1399943251000"
580 http GET http://registry.npm.taobao.org/minimatch
581 verbose request where is /which
582 verbose request registry http://registry.npm.taobao.org/
583 verbose url raw /which
584 verbose url resolving [ 'http://registry.npm.taobao.org/', './which' ]
585 verbose url resolved http://registry.npm.taobao.org/which
586 verbose request where is http://registry.npm.taobao.org/which
587 info trying registry request attempt 1 at 15:20:44
588 verbose etag "1397448125000"
589 http GET http://registry.npm.taobao.org/which
590 verbose request where is /rimraf
591 verbose request registry http://registry.npm.taobao.org/
592 verbose url raw /rimraf
593 verbose url resolving [ 'http://registry.npm.taobao.org/', './rimraf' ]
594 verbose url resolved http://registry.npm.taobao.org/rimraf
595 verbose request where is http://registry.npm.taobao.org/rimraf
596 info trying registry request attempt 1 at 15:20:44
597 verbose etag "1399393050000"
598 http GET http://registry.npm.taobao.org/rimraf
599 verbose request where is /underscore.string
600 verbose request registry http://registry.npm.taobao.org/
601 verbose url raw /underscore.string
602 verbose url resolving [ 'http://registry.npm.taobao.org/', './underscore.string' ]
603 verbose url resolved http://registry.npm.taobao.org/underscore.string
604 verbose request where is http://registry.npm.taobao.org/underscore.string
605 info trying registry request attempt 1 at 15:20:44
606 verbose etag "1402328150000"
607 http GET http://registry.npm.taobao.org/underscore.string
608 verbose request where is /getobject
609 verbose request registry http://registry.npm.taobao.org/
610 verbose url raw /getobject
611 verbose url resolving [ 'http://registry.npm.taobao.org/', './getobject' ]
612 verbose url resolved http://registry.npm.taobao.org/getobject
613 verbose request where is http://registry.npm.taobao.org/getobject
614 info trying registry request attempt 1 at 15:20:44
615 verbose etag "1397542881000"
616 http GET http://registry.npm.taobao.org/getobject
617 verbose request where is /exit
618 verbose request registry http://registry.npm.taobao.org/
619 verbose url raw /exit
620 verbose url resolving [ 'http://registry.npm.taobao.org/', './exit' ]
621 verbose url resolved http://registry.npm.taobao.org/exit
622 verbose request where is http://registry.npm.taobao.org/exit
623 info trying registry request attempt 1 at 15:20:44
624 verbose etag "1397516858000"
625 http GET http://registry.npm.taobao.org/exit
626 verbose request where is /grunt-legacy-log
627 verbose request registry http://registry.npm.taobao.org/
628 verbose url raw /grunt-legacy-log
629 verbose url resolving [ 'http://registry.npm.taobao.org/', './grunt-legacy-log' ]
630 verbose url resolved http://registry.npm.taobao.org/grunt-legacy-log
631 verbose request where is http://registry.npm.taobao.org/grunt-legacy-log
632 info trying registry request attempt 1 at 15:20:44
633 verbose etag "1399923451000"
634 http GET http://registry.npm.taobao.org/grunt-legacy-log
635 verbose request where is /grunt-legacy-util
636 verbose request registry http://registry.npm.taobao.org/
637 verbose url raw /grunt-legacy-util
638 verbose url resolving [ 'http://registry.npm.taobao.org/', './grunt-legacy-util' ]
639 verbose url resolved http://registry.npm.taobao.org/grunt-legacy-util
640 verbose request where is http://registry.npm.taobao.org/grunt-legacy-util
641 info trying registry request attempt 1 at 15:20:44
642 verbose etag "1399652250000"
643 http GET http://registry.npm.taobao.org/grunt-legacy-util
644 verbose request where is /js-yaml
645 verbose request registry http://registry.npm.taobao.org/
646 verbose url raw /js-yaml
647 verbose url resolving [ 'http://registry.npm.taobao.org/', './js-yaml' ]
648 verbose url resolved http://registry.npm.taobao.org/js-yaml
649 verbose request where is http://registry.npm.taobao.org/js-yaml
650 info trying registry request attempt 1 at 15:20:44
651 verbose etag "1397448288000"
652 http GET http://registry.npm.taobao.org/js-yaml
653 verbose request where is /tap
654 verbose request registry http://registry.npm.taobao.org/
655 verbose url raw /tap
656 verbose url resolving [ 'http://registry.npm.taobao.org/', './tap' ]
657 verbose url resolved http://registry.npm.taobao.org/tap
658 verbose request where is http://registry.npm.taobao.org/tap
659 info trying registry request attempt 1 at 15:20:44
660 verbose etag "1402279163000"
661 http GET http://registry.npm.taobao.org/tap
662 http 304 http://registry.npm.taobao.org/tty.js
663 silly registry.get cb [ 304,
663 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
663 silly registry.get     connection: 'keep-alive',
663 silly registry.get     'x-powered-by': 'koa',
663 silly registry.get     etag: '"1397737570000"',
663 silly registry.get     'x-readtime': '131' } ]
664 verbose etag http://registry.npm.taobao.org/tty.js from cache
665 verbose request where is /express
666 verbose request registry http://registry.npm.taobao.org/
667 verbose url raw /express
668 verbose url resolving [ 'http://registry.npm.taobao.org/', './express' ]
669 verbose url resolved http://registry.npm.taobao.org/express
670 verbose request where is http://registry.npm.taobao.org/express
671 info trying registry request attempt 1 at 15:20:44
672 verbose etag "1403596258000"
673 http GET http://registry.npm.taobao.org/express
674 http 200 http://registry.npm.taobao.org/cnpm
675 silly registry.get cb [ 200,
675 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
675 silly registry.get     'content-type': 'application/json; charset=utf-8',
675 silly registry.get     'content-length': '82490',
675 silly registry.get     connection: 'keep-alive',
675 silly registry.get     'x-powered-by': 'koa',
675 silly registry.get     etag: '"1406525798000"',
675 silly registry.get     'x-readtime': '21' } ]
676 verbose request where is /socket.io
677 verbose request registry http://registry.npm.taobao.org/
678 verbose url raw /socket.io
679 verbose url resolving [ 'http://registry.npm.taobao.org/', './socket.io' ]
680 verbose url resolved http://registry.npm.taobao.org/socket.io
681 verbose request where is http://registry.npm.taobao.org/socket.io
682 info trying registry request attempt 1 at 15:20:44
683 verbose etag "1403215391000"
684 http GET http://registry.npm.taobao.org/socket.io
685 verbose request where is /pty.js
686 verbose request registry http://registry.npm.taobao.org/
687 verbose url raw /pty.js
688 verbose url resolving [ 'http://registry.npm.taobao.org/', './pty.js' ]
689 verbose url resolved http://registry.npm.taobao.org/pty.js
690 verbose request where is http://registry.npm.taobao.org/pty.js
691 info trying registry request attempt 1 at 15:20:44
692 verbose etag "1397725625000"
693 http GET http://registry.npm.taobao.org/pty.js
694 verbose request where is /term.js
695 verbose request registry http://registry.npm.taobao.org/
696 verbose url raw /term.js
697 verbose url resolving [ 'http://registry.npm.taobao.org/', './term.js' ]
698 verbose url resolved http://registry.npm.taobao.org/term.js
699 verbose request where is http://registry.npm.taobao.org/term.js
700 info trying registry request attempt 1 at 15:20:44
701 verbose etag "1397734547000"
702 http GET http://registry.npm.taobao.org/term.js
703 http 304 http://registry.npm.taobao.org/node-inspector
704 silly registry.get cb [ 304,
704 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
704 silly registry.get     connection: 'keep-alive',
704 silly registry.get     'x-powered-by': 'koa',
704 silly registry.get     etag: '"1401952165000"',
704 silly registry.get     'x-readtime': '2' } ]
705 verbose etag http://registry.npm.taobao.org/node-inspector from cache
706 http 200 http://registry.npm.taobao.org/gulp
707 silly registry.get cb [ 200,
707 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
707 silly registry.get     'content-type': 'application/json; charset=utf-8',
707 silly registry.get     'content-length': '93540',
707 silly registry.get     connection: 'keep-alive',
707 silly registry.get     'x-powered-by': 'koa',
707 silly registry.get     etag: '"1406956559000"',
707 silly registry.get     'x-readtime': '29' } ]
708 verbose request where is /express
709 verbose request registry http://registry.npm.taobao.org/
710 verbose url raw /express
711 verbose url resolving [ 'http://registry.npm.taobao.org/', './express' ]
712 verbose url resolved http://registry.npm.taobao.org/express
713 verbose request where is http://registry.npm.taobao.org/express
714 info trying registry request attempt 1 at 15:20:44
715 verbose etag "1403596258000"
716 http GET http://registry.npm.taobao.org/express
717 verbose request where is /glob
718 verbose request registry http://registry.npm.taobao.org/
719 verbose url raw /glob
720 verbose url resolving [ 'http://registry.npm.taobao.org/', './glob' ]
721 verbose url resolved http://registry.npm.taobao.org/glob
722 verbose request where is http://registry.npm.taobao.org/glob
723 info trying registry request attempt 1 at 15:20:44
724 verbose etag "1401758454000"
725 http GET http://registry.npm.taobao.org/glob
726 verbose request where is /async
727 verbose request registry http://registry.npm.taobao.org/
728 verbose url raw /async
729 verbose url resolving [ 'http://registry.npm.taobao.org/', './async' ]
730 verbose url resolved http://registry.npm.taobao.org/async
731 verbose request where is http://registry.npm.taobao.org/async
732 info trying registry request attempt 1 at 15:20:44
733 verbose etag "1400236732000"
734 http GET http://registry.npm.taobao.org/async
735 verbose request where is /strong-data-uri
736 verbose request registry http://registry.npm.taobao.org/
737 verbose url raw /strong-data-uri
738 verbose url resolving [ 'http://registry.npm.taobao.org/', './strong-data-uri' ]
739 verbose url resolved http://registry.npm.taobao.org/strong-data-uri
740 verbose request where is http://registry.npm.taobao.org/strong-data-uri
741 info trying registry request attempt 1 at 15:20:44
742 verbose etag "1397573344000"
743 http GET http://registry.npm.taobao.org/strong-data-uri
744 verbose request where is /rc
745 verbose request registry http://registry.npm.taobao.org/
746 verbose url raw /rc
747 verbose url resolving [ 'http://registry.npm.taobao.org/', './rc' ]
748 verbose url resolved http://registry.npm.taobao.org/rc
749 verbose request where is http://registry.npm.taobao.org/rc
750 info trying registry request attempt 1 at 15:20:44
751 verbose etag "1400940532000"
752 http GET http://registry.npm.taobao.org/rc
753 verbose request where is /which
754 verbose request registry http://registry.npm.taobao.org/
755 verbose url raw /which
756 verbose url resolving [ 'http://registry.npm.taobao.org/', './which' ]
757 verbose url resolved http://registry.npm.taobao.org/which
758 verbose request where is http://registry.npm.taobao.org/which
759 info trying registry request attempt 1 at 15:20:44
760 verbose etag "1397448125000"
761 http GET http://registry.npm.taobao.org/which
762 verbose request where is /debug
763 verbose request registry http://registry.npm.taobao.org/
764 verbose url raw /debug
765 verbose url resolving [ 'http://registry.npm.taobao.org/', './debug' ]
766 verbose url resolved http://registry.npm.taobao.org/debug
767 verbose request where is http://registry.npm.taobao.org/debug
768 info trying registry request attempt 1 at 15:20:44
769 verbose etag "1402448484000"
770 http GET http://registry.npm.taobao.org/debug
771 verbose request where is /opener
772 verbose request registry http://registry.npm.taobao.org/
773 verbose url raw /opener
774 verbose url resolving [ 'http://registry.npm.taobao.org/', './opener' ]
775 verbose url resolved http://registry.npm.taobao.org/opener
776 verbose request where is http://registry.npm.taobao.org/opener
777 info trying registry request attempt 1 at 15:20:44
778 verbose etag "1397452758000"
779 http GET http://registry.npm.taobao.org/opener
780 verbose request where is /ws
781 verbose request registry http://registry.npm.taobao.org/
782 verbose url raw /ws
783 verbose url resolving [ 'http://registry.npm.taobao.org/', './ws' ]
784 verbose url resolved http://registry.npm.taobao.org/ws
785 verbose request where is http://registry.npm.taobao.org/ws
786 info trying registry request attempt 1 at 15:20:44
787 verbose etag "1397507409000"
788 http GET http://registry.npm.taobao.org/ws
789 verbose request where is /yargs
790 verbose request registry http://registry.npm.taobao.org/
791 verbose url raw /yargs
792 verbose url resolving [ 'http://registry.npm.taobao.org/', './yargs' ]
793 verbose url resolved http://registry.npm.taobao.org/yargs
794 verbose request where is http://registry.npm.taobao.org/yargs
795 info trying registry request attempt 1 at 15:20:44
796 verbose etag "1403538790000"
797 http GET http://registry.npm.taobao.org/yargs
798 http 200 http://registry.npm.taobao.org/bower
799 silly registry.get cb [ 200,
799 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
799 silly registry.get     'content-type': 'application/json; charset=utf-8',
799 silly registry.get     'content-length': '113356',
799 silly registry.get     connection: 'keep-alive',
799 silly registry.get     'x-powered-by': 'koa',
799 silly registry.get     etag: '"1405112748000"',
799 silly registry.get     'x-readtime': '91' } ]
800 http 200 http://registry.npm.taobao.org/less
801 silly registry.get cb [ 200,
801 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
801 silly registry.get     'content-type': 'application/json; charset=utf-8',
801 silly registry.get     'content-length': '69993',
801 silly registry.get     connection: 'keep-alive',
801 silly registry.get     'x-powered-by': 'koa',
801 silly registry.get     etag: '"1406492203000"',
801 silly registry.get     'x-readtime': '48' } ]
802 http 304 http://registry.npm.taobao.org/express-generator
803 silly registry.get cb [ 304,
803 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
803 silly registry.get     connection: 'keep-alive',
803 silly registry.get     'x-powered-by': 'koa',
803 silly registry.get     etag: '"1400027950000"',
803 silly registry.get     'x-readtime': '8' } ]
804 verbose etag http://registry.npm.taobao.org/express-generator from cache
805 verbose request where is /mkdirp
806 verbose request registry http://registry.npm.taobao.org/
807 verbose url raw /mkdirp
808 verbose url resolving [ 'http://registry.npm.taobao.org/', './mkdirp' ]
809 verbose url resolved http://registry.npm.taobao.org/mkdirp
810 verbose request where is http://registry.npm.taobao.org/mkdirp
811 info trying registry request attempt 1 at 15:20:44
812 verbose etag "1399343851000"
813 http GET http://registry.npm.taobao.org/mkdirp
814 verbose request where is /commander
815 verbose request registry http://registry.npm.taobao.org/
816 verbose url raw /commander
817 verbose url resolving [ 'http://registry.npm.taobao.org/', './commander' ]
818 verbose url resolved http://registry.npm.taobao.org/commander
819 verbose request where is http://registry.npm.taobao.org/commander
820 info trying registry request attempt 1 at 15:20:44
821 verbose etag "1397446222000"
822 http GET http://registry.npm.taobao.org/commander
823 http 304 http://registry.npm.taobao.org/grunt
824 silly registry.get cb [ 304,
824 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
824 silly registry.get     connection: 'keep-alive',
824 silly registry.get     'x-powered-by': 'koa',
824 silly registry.get     etag: '"1399916852000"',
824 silly registry.get     'x-readtime': '10' } ]
825 verbose etag http://registry.npm.taobao.org/grunt from cache
826 http 200 http://registry.npm.taobao.org/yo
827 silly registry.get cb [ 200,
827 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
827 silly registry.get     'content-type': 'application/json; charset=utf-8',
827 silly registry.get     'content-length': '45445',
827 silly registry.get     connection: 'keep-alive',
827 silly registry.get     'x-powered-by': 'koa',
827 silly registry.get     etag: '"1406442918000"',
827 silly registry.get     'x-readtime': '15' } ]
828 verbose registry.get http://registry.npm.taobao.org/coffee-script not expired, no request
829 verbose request where is /async
830 verbose request registry http://registry.npm.taobao.org/
831 verbose url raw /async
832 verbose url resolving [ 'http://registry.npm.taobao.org/', './async' ]
833 verbose url resolved http://registry.npm.taobao.org/async
834 verbose request where is http://registry.npm.taobao.org/async
835 info trying registry request attempt 1 at 15:20:44
836 verbose etag "1400236732000"
837 http GET http://registry.npm.taobao.org/async
838 verbose request where is /colors
839 verbose request registry http://registry.npm.taobao.org/
840 verbose url raw /colors
841 verbose url resolving [ 'http://registry.npm.taobao.org/', './colors' ]
842 verbose url resolved http://registry.npm.taobao.org/colors
843 verbose request where is http://registry.npm.taobao.org/colors
844 info trying registry request attempt 1 at 15:20:44
845 verbose etag "1397447037000"
846 http GET http://registry.npm.taobao.org/colors
847 verbose request where is /dateformat
848 verbose request registry http://registry.npm.taobao.org/
849 verbose url raw /dateformat
850 verbose url resolving [ 'http://registry.npm.taobao.org/', './dateformat' ]
851 verbose url resolved http://registry.npm.taobao.org/dateformat
852 verbose request where is http://registry.npm.taobao.org/dateformat
853 info trying registry request attempt 1 at 15:20:44
854 verbose etag "1400586524000"
855 http GET http://registry.npm.taobao.org/dateformat
856 verbose request where is /eventemitter2
857 verbose request registry http://registry.npm.taobao.org/
858 verbose url raw /eventemitter2
859 verbose url resolving [ 'http://registry.npm.taobao.org/', './eventemitter2' ]
860 verbose url resolved http://registry.npm.taobao.org/eventemitter2
861 verbose request where is http://registry.npm.taobao.org/eventemitter2
862 info trying registry request attempt 1 at 15:20:44
863 verbose etag "1403631265000"
864 http GET http://registry.npm.taobao.org/eventemitter2
865 verbose request where is /findup-sync
866 verbose request registry http://registry.npm.taobao.org/
867 verbose url raw /findup-sync
868 verbose url resolving [ 'http://registry.npm.taobao.org/', './findup-sync' ]
869 verbose url resolved http://registry.npm.taobao.org/findup-sync
870 verbose request where is http://registry.npm.taobao.org/findup-sync
871 info trying registry request attempt 1 at 15:20:44
872 verbose etag "1397505921000"
873 http GET http://registry.npm.taobao.org/findup-sync
874 verbose request where is /glob
875 verbose request registry http://registry.npm.taobao.org/
876 verbose url raw /glob
877 verbose url resolving [ 'http://registry.npm.taobao.org/', './glob' ]
878 verbose url resolved http://registry.npm.taobao.org/glob
879 verbose request where is http://registry.npm.taobao.org/glob
880 info trying registry request attempt 1 at 15:20:44
881 verbose etag "1401758454000"
882 http GET http://registry.npm.taobao.org/glob
883 verbose request where is /hooker
884 verbose request registry http://registry.npm.taobao.org/
885 verbose url raw /hooker
886 verbose url resolving [ 'http://registry.npm.taobao.org/', './hooker' ]
887 verbose url resolved http://registry.npm.taobao.org/hooker
888 verbose request where is http://registry.npm.taobao.org/hooker
889 info trying registry request attempt 1 at 15:20:44
890 verbose etag "1397508833000"
891 http GET http://registry.npm.taobao.org/hooker
892 verbose request where is /iconv-lite
893 verbose request registry http://registry.npm.taobao.org/
894 verbose url raw /iconv-lite
895 verbose url resolving [ 'http://registry.npm.taobao.org/', './iconv-lite' ]
896 verbose url resolved http://registry.npm.taobao.org/iconv-lite
897 verbose request where is http://registry.npm.taobao.org/iconv-lite
898 info trying registry request attempt 1 at 15:20:44
899 verbose etag "1402808566000"
900 http GET http://registry.npm.taobao.org/iconv-lite
901 verbose request where is /minimatch
902 verbose request registry http://registry.npm.taobao.org/
903 verbose url raw /minimatch
904 verbose url resolving [ 'http://registry.npm.taobao.org/', './minimatch' ]
905 verbose url resolved http://registry.npm.taobao.org/minimatch
906 verbose request where is http://registry.npm.taobao.org/minimatch
907 info trying registry request attempt 1 at 15:20:44
908 verbose etag "1399943251000"
909 http GET http://registry.npm.taobao.org/minimatch
910 verbose request where is /nopt
911 verbose request registry http://registry.npm.taobao.org/
912 verbose url raw /nopt
913 verbose url resolving [ 'http://registry.npm.taobao.org/', './nopt' ]
914 verbose url resolved http://registry.npm.taobao.org/nopt
915 verbose request where is http://registry.npm.taobao.org/nopt
916 info trying registry request attempt 1 at 15:20:44
917 verbose etag "1402087767000"
918 http GET http://registry.npm.taobao.org/nopt
919 verbose request where is /rimraf
920 verbose request registry http://registry.npm.taobao.org/
921 verbose url raw /rimraf
922 verbose url resolving [ 'http://registry.npm.taobao.org/', './rimraf' ]
923 verbose url resolved http://registry.npm.taobao.org/rimraf
924 verbose request where is http://registry.npm.taobao.org/rimraf
925 info trying registry request attempt 1 at 15:20:44
926 verbose etag "1399393050000"
927 http GET http://registry.npm.taobao.org/rimraf
928 verbose request where is /underscore.string
929 verbose request registry http://registry.npm.taobao.org/
930 verbose url raw /underscore.string
931 verbose url resolving [ 'http://registry.npm.taobao.org/', './underscore.string' ]
932 verbose url resolved http://registry.npm.taobao.org/underscore.string
933 verbose request where is http://registry.npm.taobao.org/underscore.string
934 info trying registry request attempt 1 at 15:20:44
935 verbose etag "1402328150000"
936 http GET http://registry.npm.taobao.org/underscore.string
937 verbose request where is /which
938 verbose request registry http://registry.npm.taobao.org/
939 verbose url raw /which
940 verbose url resolving [ 'http://registry.npm.taobao.org/', './which' ]
941 verbose url resolved http://registry.npm.taobao.org/which
942 verbose request where is http://registry.npm.taobao.org/which
943 info trying registry request attempt 1 at 15:20:44
944 verbose etag "1397448125000"
945 http GET http://registry.npm.taobao.org/which
946 verbose request where is /lodash
947 verbose request registry http://registry.npm.taobao.org/
948 verbose url raw /lodash
949 verbose url resolving [ 'http://registry.npm.taobao.org/', './lodash' ]
950 verbose url resolved http://registry.npm.taobao.org/lodash
951 verbose request where is http://registry.npm.taobao.org/lodash
952 info trying registry request attempt 1 at 15:20:44
953 verbose etag "1397567791000"
954 http GET http://registry.npm.taobao.org/lodash
955 verbose request where is /js-yaml
956 verbose request registry http://registry.npm.taobao.org/
957 verbose url raw /js-yaml
958 verbose url resolving [ 'http://registry.npm.taobao.org/', './js-yaml' ]
959 verbose url resolved http://registry.npm.taobao.org/js-yaml
960 verbose request where is http://registry.npm.taobao.org/js-yaml
961 info trying registry request attempt 1 at 15:20:44
962 verbose etag "1397448288000"
963 http GET http://registry.npm.taobao.org/js-yaml
964 verbose request where is /exit
965 verbose request registry http://registry.npm.taobao.org/
966 verbose url raw /exit
967 verbose url resolving [ 'http://registry.npm.taobao.org/', './exit' ]
968 verbose url resolved http://registry.npm.taobao.org/exit
969 verbose request where is http://registry.npm.taobao.org/exit
970 info trying registry request attempt 1 at 15:20:44
971 verbose etag "1397516858000"
972 http GET http://registry.npm.taobao.org/exit
973 verbose request where is /getobject
974 verbose request registry http://registry.npm.taobao.org/
975 verbose url raw /getobject
976 verbose url resolving [ 'http://registry.npm.taobao.org/', './getobject' ]
977 verbose url resolved http://registry.npm.taobao.org/getobject
978 verbose request where is http://registry.npm.taobao.org/getobject
979 info trying registry request attempt 1 at 15:20:44
980 verbose etag "1397542881000"
981 http GET http://registry.npm.taobao.org/getobject
982 verbose request where is /grunt-legacy-util
983 verbose request registry http://registry.npm.taobao.org/
984 verbose url raw /grunt-legacy-util
985 verbose url resolving [ 'http://registry.npm.taobao.org/', './grunt-legacy-util' ]
986 verbose url resolved http://registry.npm.taobao.org/grunt-legacy-util
987 verbose request where is http://registry.npm.taobao.org/grunt-legacy-util
988 info trying registry request attempt 1 at 15:20:44
989 verbose etag "1399652250000"
990 http GET http://registry.npm.taobao.org/grunt-legacy-util
991 verbose request where is /grunt-legacy-log
992 verbose request registry http://registry.npm.taobao.org/
993 verbose url raw /grunt-legacy-log
994 verbose url resolving [ 'http://registry.npm.taobao.org/', './grunt-legacy-log' ]
995 verbose url resolved http://registry.npm.taobao.org/grunt-legacy-log
996 verbose request where is http://registry.npm.taobao.org/grunt-legacy-log
997 info trying registry request attempt 1 at 15:20:44
998 verbose etag "1399923451000"
999 http GET http://registry.npm.taobao.org/grunt-legacy-log
1000 http 304 http://registry.npm.taobao.org/colors
1001 silly registry.get cb [ 304,
1001 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1001 silly registry.get     connection: 'keep-alive',
1001 silly registry.get     'x-powered-by': 'koa',
1001 silly registry.get     etag: '"1397447037000"',
1001 silly registry.get     'x-readtime': '12' } ]
1002 verbose etag http://registry.npm.taobao.org/colors from cache
1003 http 304 http://registry.npm.taobao.org/prompt
1004 silly registry.get cb [ 304,
1004 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1004 silly registry.get     connection: 'keep-alive',
1004 silly registry.get     'x-powered-by': 'koa',
1004 silly registry.get     etag: '"1401055137000"',
1004 silly registry.get     'x-readtime': '2' } ]
1005 verbose etag http://registry.npm.taobao.org/prompt from cache
1006 http 200 http://registry.npm.taobao.org/semver
1007 silly registry.get cb [ 200,
1007 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1007 silly registry.get     'content-type': 'application/json; charset=utf-8',
1007 silly registry.get     'content-length': '45968',
1007 silly registry.get     connection: 'keep-alive',
1007 silly registry.get     'x-powered-by': 'koa',
1007 silly registry.get     etag: '"1406223321000"',
1007 silly registry.get     'x-readtime': '65' } ]
1008 http 200 http://registry.npm.taobao.org/hooker
1009 silly registry.get cb [ 200,
1009 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1009 silly registry.get     'content-type': 'application/json; charset=utf-8',
1009 silly registry.get     'content-length': '7967',
1009 silly registry.get     connection: 'keep-alive',
1009 silly registry.get     'x-powered-by': 'koa',
1009 silly registry.get     etag: '"1397508834000"',
1009 silly registry.get     'x-readtime': '14' } ]
1010 http 304 http://registry.npm.taobao.org/lodash
1011 silly registry.get cb [ 304,
1011 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1011 silly registry.get     connection: 'keep-alive',
1011 silly registry.get     'x-powered-by': 'koa',
1011 silly registry.get     etag: '"1397567791000"',
1011 silly registry.get     'x-readtime': '2' } ]
1012 verbose etag http://registry.npm.taobao.org/lodash from cache
1013 http 304 http://registry.npm.taobao.org/async
1014 silly registry.get cb [ 304,
1014 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1014 silly registry.get     connection: 'keep-alive',
1014 silly registry.get     'x-powered-by': 'koa',
1014 silly registry.get     etag: '"1400236732000"',
1014 silly registry.get     'x-readtime': '3' } ]
1015 verbose etag http://registry.npm.taobao.org/async from cache
1016 http 200 http://registry.npm.taobao.org/yeoman-generator
1017 silly registry.get cb [ 200,
1017 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1017 silly registry.get     'content-type': 'application/json; charset=utf-8',
1017 silly registry.get     'content-length': '74549',
1017 silly registry.get     connection: 'keep-alive',
1017 silly registry.get     'x-powered-by': 'koa',
1017 silly registry.get     etag: '"1407186197000"',
1017 silly registry.get     'x-readtime': '30' } ]
1018 http 304 http://registry.npm.taobao.org/colors
1019 silly registry.get cb [ 304,
1019 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1019 silly registry.get     connection: 'keep-alive',
1019 silly registry.get     'x-powered-by': 'koa',
1019 silly registry.get     etag: '"1397447037000"',
1019 silly registry.get     'x-readtime': '7' } ]
1020 verbose etag http://registry.npm.taobao.org/colors from cache
1021 http 200 http://registry.npm.taobao.org/forever-monitor
1022 silly registry.get cb [ 200,
1022 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1022 silly registry.get     'content-type': 'application/json; charset=utf-8',
1022 silly registry.get     'content-length': '21785',
1022 silly registry.get     connection: 'keep-alive',
1022 silly registry.get     'x-powered-by': 'koa',
1022 silly registry.get     etag: '"1406928977000"',
1022 silly registry.get     'x-readtime': '9' } ]
1023 http 200 http://registry.npm.taobao.org/cliff
1024 silly registry.get cb [ 200,
1024 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1024 silly registry.get     'content-type': 'application/json; charset=utf-8',
1024 silly registry.get     'content-length': '16640',
1024 silly registry.get     connection: 'keep-alive',
1024 silly registry.get     'x-powered-by': 'koa',
1024 silly registry.get     etag: '"1397494898000"',
1024 silly registry.get     'x-readtime': '9' } ]
1025 verbose registry.get http://registry.npm.taobao.org/colors not expired, no request
1026 verbose request where is /winston
1027 verbose request registry http://registry.npm.taobao.org/
1028 verbose url raw /winston
1029 verbose url resolving [ 'http://registry.npm.taobao.org/', './winston' ]
1030 verbose url resolved http://registry.npm.taobao.org/winston
1031 verbose request where is http://registry.npm.taobao.org/winston
1032 info trying registry request attempt 1 at 15:20:45
1033 verbose etag "1397502697000"
1034 http GET http://registry.npm.taobao.org/winston
1035 verbose request where is /eyes
1036 verbose request registry http://registry.npm.taobao.org/
1037 verbose url raw /eyes
1038 verbose url resolving [ 'http://registry.npm.taobao.org/', './eyes' ]
1039 verbose url resolved http://registry.npm.taobao.org/eyes
1040 verbose request where is http://registry.npm.taobao.org/eyes
1041 info trying registry request attempt 1 at 15:20:45
1042 verbose etag "1397452779000"
1043 http GET http://registry.npm.taobao.org/eyes
1044 http 200 http://registry.npm.taobao.org/nodemon
1045 silly registry.get cb [ 200,
1045 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1045 silly registry.get     'content-type': 'application/json; charset=utf-8',
1045 silly registry.get     'content-length': '134085',
1045 silly registry.get     connection: 'keep-alive',
1045 silly registry.get     'x-powered-by': 'koa',
1045 silly registry.get     etag: '"1404233004000"',
1045 silly registry.get     'x-readtime': '666' } ]
1046 http 304 http://registry.npm.taobao.org/nconf
1047 silly registry.get cb [ 304,
1047 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1047 silly registry.get     connection: 'keep-alive',
1047 silly registry.get     'x-powered-by': 'koa',
1047 silly registry.get     etag: '"1397516252000"',
1047 silly registry.get     'x-readtime': '7' } ]
1048 verbose etag http://registry.npm.taobao.org/nconf from cache
1049 verbose registry.get http://registry.npm.taobao.org/async not expired, no request
1050 verbose request where is /optimist
1051 verbose request registry http://registry.npm.taobao.org/
1052 verbose url raw /optimist
1053 verbose url resolving [ 'http://registry.npm.taobao.org/', './optimist' ]
1054 verbose url resolved http://registry.npm.taobao.org/optimist
1055 verbose request where is http://registry.npm.taobao.org/optimist
1056 info trying registry request attempt 1 at 15:20:45
1057 verbose etag "1397452996000"
1058 http GET http://registry.npm.taobao.org/optimist
1059 verbose request where is /ini
1060 verbose request registry http://registry.npm.taobao.org/
1061 verbose url raw /ini
1062 verbose url resolving [ 'http://registry.npm.taobao.org/', './ini' ]
1063 verbose url resolved http://registry.npm.taobao.org/ini
1064 verbose request where is http://registry.npm.taobao.org/ini
1065 info trying registry request attempt 1 at 15:20:45
1066 verbose etag "1400825330000"
1067 http GET http://registry.npm.taobao.org/ini
1068 http 200 http://registry.npm.taobao.org/pkginfo
1069 silly registry.get cb [ 200,
1069 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1069 silly registry.get     'content-type': 'application/json; charset=utf-8',
1069 silly registry.get     'content-length': '6908',
1069 silly registry.get     connection: 'keep-alive',
1069 silly registry.get     'x-powered-by': 'koa',
1069 silly registry.get     etag: '"1397502703000"',
1069 silly registry.get     'x-readtime': '21' } ]
1070 http 304 http://registry.npm.taobao.org/flatiron
1071 silly registry.get cb [ 304,
1071 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1071 silly registry.get     connection: 'keep-alive',
1071 silly registry.get     'x-powered-by': 'koa',
1071 silly registry.get     etag: '"1397520241000"',
1071 silly registry.get     'x-readtime': '222' } ]
1072 verbose etag http://registry.npm.taobao.org/flatiron from cache
1073 http 304 http://registry.npm.taobao.org/timespan
1074 silly registry.get cb [ 304,
1074 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1074 silly registry.get     connection: 'keep-alive',
1074 silly registry.get     'x-powered-by': 'koa',
1074 silly registry.get     etag: '"1397508602000"',
1074 silly registry.get     'x-readtime': '86' } ]
1075 verbose etag http://registry.npm.taobao.org/timespan from cache
1076 verbose request where is /optimist
1077 verbose request registry http://registry.npm.taobao.org/
1078 verbose url raw /optimist
1079 verbose url resolving [ 'http://registry.npm.taobao.org/', './optimist' ]
1080 verbose url resolved http://registry.npm.taobao.org/optimist
1081 verbose request where is http://registry.npm.taobao.org/optimist
1082 info trying registry request attempt 1 at 15:20:45
1083 verbose etag "1397452996000"
1084 http GET http://registry.npm.taobao.org/optimist
1085 verbose registry.get http://registry.npm.taobao.org/prompt not expired, no request
1086 verbose request where is /broadway
1087 verbose request registry http://registry.npm.taobao.org/
1088 verbose url raw /broadway
1089 verbose url resolving [ 'http://registry.npm.taobao.org/', './broadway' ]
1090 verbose url resolved http://registry.npm.taobao.org/broadway
1091 verbose request where is http://registry.npm.taobao.org/broadway
1092 info trying registry request attempt 1 at 15:20:45
1093 verbose etag "1397480826000"
1094 http GET http://registry.npm.taobao.org/broadway
1095 verbose request where is /director
1096 verbose request registry http://registry.npm.taobao.org/
1097 verbose url raw /director
1098 verbose url resolving [ 'http://registry.npm.taobao.org/', './director' ]
1099 verbose url resolved http://registry.npm.taobao.org/director
1100 verbose request where is http://registry.npm.taobao.org/director
1101 info trying registry request attempt 1 at 15:20:45
1102 verbose etag "1397503465000"
1103 http GET http://registry.npm.taobao.org/director
1104 http 200 http://registry.npm.taobao.org/nssocket
1105 silly registry.get cb [ 200,
1105 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1105 silly registry.get     'content-type': 'application/json; charset=utf-8',
1105 silly registry.get     'content-length': '28447',
1105 silly registry.get     connection: 'keep-alive',
1105 silly registry.get     'x-powered-by': 'koa',
1105 silly registry.get     etag: '"1397525227000"',
1105 silly registry.get     'x-readtime': '120' } ]
1106 verbose request where is /eventemitter2
1107 verbose request registry http://registry.npm.taobao.org/
1108 verbose url raw /eventemitter2
1109 verbose url resolving [ 'http://registry.npm.taobao.org/', './eventemitter2' ]
1110 verbose url resolved http://registry.npm.taobao.org/eventemitter2
1111 verbose request where is http://registry.npm.taobao.org/eventemitter2
1112 info trying registry request attempt 1 at 15:20:45
1113 verbose etag "1403631265000"
1114 http GET http://registry.npm.taobao.org/eventemitter2
1115 verbose request where is /lazy
1116 verbose request registry http://registry.npm.taobao.org/
1117 verbose url raw /lazy
1118 verbose url resolving [ 'http://registry.npm.taobao.org/', './lazy' ]
1119 verbose url resolved http://registry.npm.taobao.org/lazy
1120 verbose request where is http://registry.npm.taobao.org/lazy
1121 info trying registry request attempt 1 at 15:20:45
1122 verbose etag "1397504070000"
1123 http GET http://registry.npm.taobao.org/lazy
1124 http 304 http://registry.npm.taobao.org/optimist
1125 silly registry.get cb [ 304,
1125 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1125 silly registry.get     connection: 'keep-alive',
1125 silly registry.get     'x-powered-by': 'koa',
1125 silly registry.get     etag: '"1397452996000"',
1125 silly registry.get     'x-readtime': '2' } ]
1126 verbose etag http://registry.npm.taobao.org/optimist from cache
1127 verbose request where is /wordwrap
1128 verbose request registry http://registry.npm.taobao.org/
1129 verbose url raw /wordwrap
1130 verbose url resolving [ 'http://registry.npm.taobao.org/', './wordwrap' ]
1131 verbose url resolved http://registry.npm.taobao.org/wordwrap
1132 verbose request where is http://registry.npm.taobao.org/wordwrap
1133 info trying registry request attempt 1 at 15:20:45
1134 verbose etag "1397448182000"
1135 http GET http://registry.npm.taobao.org/wordwrap
1136 verbose request where is /minimist
1137 verbose request registry http://registry.npm.taobao.org/
1138 verbose url raw /minimist
1139 verbose url resolving [ 'http://registry.npm.taobao.org/', './minimist' ]
1140 verbose url resolved http://registry.npm.taobao.org/minimist
1141 verbose request where is http://registry.npm.taobao.org/minimist
1142 info trying registry request attempt 1 at 15:20:45
1143 verbose etag "1403190256000"
1144 http GET http://registry.npm.taobao.org/minimist
1145 http 304 http://registry.npm.taobao.org/utile
1146 silly registry.get cb [ 304,
1146 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1146 silly registry.get     connection: 'keep-alive',
1146 silly registry.get     'x-powered-by': 'koa',
1146 silly registry.get     etag: '"1397502725000"',
1146 silly registry.get     'x-readtime': '11' } ]
1147 verbose etag http://registry.npm.taobao.org/utile from cache
1148 http 200 http://registry.npm.taobao.org/watch
1149 silly registry.get cb [ 200,
1149 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1149 silly registry.get     'content-type': 'application/json; charset=utf-8',
1149 silly registry.get     'content-length': '17904',
1149 silly registry.get     connection: 'keep-alive',
1149 silly registry.get     'x-powered-by': 'koa',
1149 silly registry.get     etag: '"1405618027000"',
1149 silly registry.get     'x-readtime': '20' } ]
1150 verbose registry.get http://registry.npm.taobao.org/async not expired, no request
1151 http 200 http://registry.npm.taobao.org/npm
1152 silly registry.get cb [ 200,
1152 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:44 GMT',
1152 silly registry.get     'content-type': 'application/json; charset=utf-8',
1152 silly registry.get     'content-length': '1183224',
1152 silly registry.get     connection: 'keep-alive',
1152 silly registry.get     'x-powered-by': 'koa',
1152 silly registry.get     etag: '"1406852957000"',
1152 silly registry.get     'x-readtime': '226' } ]
1153 verbose request where is /mkdirp
1154 verbose request registry http://registry.npm.taobao.org/
1155 verbose url raw /mkdirp
1156 verbose url resolving [ 'http://registry.npm.taobao.org/', './mkdirp' ]
1157 verbose url resolved http://registry.npm.taobao.org/mkdirp
1158 verbose request where is http://registry.npm.taobao.org/mkdirp
1159 info trying registry request attempt 1 at 15:20:45
1160 verbose etag "1399343851000"
1161 http GET http://registry.npm.taobao.org/mkdirp
1162 verbose request where is /rimraf
1163 verbose request registry http://registry.npm.taobao.org/
1164 verbose url raw /rimraf
1165 verbose url resolving [ 'http://registry.npm.taobao.org/', './rimraf' ]
1166 verbose url resolved http://registry.npm.taobao.org/rimraf
1167 verbose request where is http://registry.npm.taobao.org/rimraf
1168 info trying registry request attempt 1 at 15:20:45
1169 verbose etag "1399393050000"
1170 http GET http://registry.npm.taobao.org/rimraf
1171 http 304 http://registry.npm.taobao.org/winston
1172 silly registry.get cb [ 304,
1172 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1172 silly registry.get     connection: 'keep-alive',
1172 silly registry.get     'x-powered-by': 'koa',
1172 silly registry.get     etag: '"1397502697000"',
1172 silly registry.get     'x-readtime': '7' } ]
1173 verbose etag http://registry.npm.taobao.org/winston from cache
1174 verbose request where is /i
1175 verbose request registry http://registry.npm.taobao.org/
1176 verbose url raw /i
1177 verbose url resolving [ 'http://registry.npm.taobao.org/', './i' ]
1178 verbose url resolved http://registry.npm.taobao.org/i
1179 verbose request where is http://registry.npm.taobao.org/i
1180 info trying registry request attempt 1 at 15:20:45
1181 verbose etag "1397507013000"
1182 http GET http://registry.npm.taobao.org/i
1183 verbose request where is /deep-equal
1184 verbose request registry http://registry.npm.taobao.org/
1185 verbose url raw /deep-equal
1186 verbose url resolving [ 'http://registry.npm.taobao.org/', './deep-equal' ]
1187 verbose url resolved http://registry.npm.taobao.org/deep-equal
1188 verbose request where is http://registry.npm.taobao.org/deep-equal
1189 info trying registry request attempt 1 at 15:20:45
1190 verbose etag "1397450606000"
1191 http GET http://registry.npm.taobao.org/deep-equal
1192 verbose request where is /ncp
1193 verbose request registry http://registry.npm.taobao.org/
1194 verbose url raw /ncp
1195 verbose url resolving [ 'http://registry.npm.taobao.org/', './ncp' ]
1196 verbose url resolved http://registry.npm.taobao.org/ncp
1197 verbose request where is http://registry.npm.taobao.org/ncp
1198 info trying registry request attempt 1 at 15:20:45
1199 verbose etag "1397836016000"
1200 http GET http://registry.npm.taobao.org/ncp
1201 http 304 http://registry.npm.taobao.org/findup-sync
1202 silly registry.get cb [ 304,
1202 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1202 silly registry.get     connection: 'keep-alive',
1202 silly registry.get     'x-powered-by': 'koa',
1202 silly registry.get     etag: '"1397505921000"',
1202 silly registry.get     'x-readtime': '2' } ]
1203 verbose etag http://registry.npm.taobao.org/findup-sync from cache
1204 http 200 http://registry.npm.taobao.org/nopt
1205 silly registry.get cb [ 200,
1205 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1205 silly registry.get     'content-type': 'application/json; charset=utf-8',
1205 silly registry.get     'content-length': '27566',
1205 silly registry.get     connection: 'keep-alive',
1205 silly registry.get     'x-powered-by': 'koa',
1205 silly registry.get     etag: '"1404235407000"',
1205 silly registry.get     'x-readtime': '18' } ]
1206 http 200 http://registry.npm.taobao.org/sails
1207 silly registry.get cb [ 200,
1207 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1207 silly registry.get     'content-type': 'application/json; charset=utf-8',
1207 silly registry.get     'content-length': '195533',
1207 silly registry.get     connection: 'keep-alive',
1207 silly registry.get     'x-powered-by': 'koa',
1207 silly registry.get     etag: '"1406940976000"',
1207 silly registry.get     'x-readtime': '756' } ]
1208 http 200 http://registry.npm.taobao.org/resolve
1209 silly registry.get cb [ 200,
1209 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1209 silly registry.get     'content-type': 'application/json; charset=utf-8',
1209 silly registry.get     'content-length': '39059',
1209 silly registry.get     connection: 'keep-alive',
1209 silly registry.get     'x-powered-by': 'koa',
1209 silly registry.get     etag: '"1406279127000"',
1209 silly registry.get     'x-readtime': '26' } ]
1210 http 304 http://registry.npm.taobao.org/chai
1211 silly registry.get cb [ 304,
1211 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1211 silly registry.get     connection: 'keep-alive',
1211 silly registry.get     'x-powered-by': 'koa',
1211 silly registry.get     etag: '"1397446620000"',
1211 silly registry.get     'x-readtime': '7' } ]
1212 verbose etag http://registry.npm.taobao.org/chai from cache
1213 verbose registry.get http://registry.npm.taobao.org/async not expired, no request
1214 verbose registry.get http://registry.npm.taobao.org/colors not expired, no request
1215 verbose registry.get http://registry.npm.taobao.org/pkginfo not expired, no request
1216 verbose request where is /eyes
1217 verbose request registry http://registry.npm.taobao.org/
1218 verbose url raw /eyes
1219 verbose url resolving [ 'http://registry.npm.taobao.org/', './eyes' ]
1220 verbose url resolved http://registry.npm.taobao.org/eyes
1221 verbose request where is http://registry.npm.taobao.org/eyes
1222 info trying registry request attempt 1 at 15:20:45
1223 verbose etag "1397452779000"
1224 http GET http://registry.npm.taobao.org/eyes
1225 verbose request where is /glob
1226 verbose request registry http://registry.npm.taobao.org/
1227 verbose url raw /glob
1228 verbose url resolving [ 'http://registry.npm.taobao.org/', './glob' ]
1229 verbose url resolved http://registry.npm.taobao.org/glob
1230 verbose request where is http://registry.npm.taobao.org/glob
1231 info trying registry request attempt 1 at 15:20:45
1232 verbose etag "1401758454000"
1233 http GET http://registry.npm.taobao.org/glob
1234 http 304 http://registry.npm.taobao.org/modular-amd
1235 silly registry.get cb [ 304,
1235 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1235 silly registry.get     connection: 'keep-alive',
1235 silly registry.get     'x-powered-by': 'koa',
1235 silly registry.get     etag: '"1397704942000"',
1235 silly registry.get     'x-readtime': '4' } ]
1236 verbose etag http://registry.npm.taobao.org/modular-amd from cache
1237 verbose registry.get http://registry.npm.taobao.org/lodash not expired, no request
1238 verbose request where is /cycle
1239 verbose request registry http://registry.npm.taobao.org/
1240 verbose url raw /cycle
1241 verbose url resolving [ 'http://registry.npm.taobao.org/', './cycle' ]
1242 verbose url resolved http://registry.npm.taobao.org/cycle
1243 verbose request where is http://registry.npm.taobao.org/cycle
1244 info trying registry request attempt 1 at 15:20:45
1245 verbose etag "1397501175000"
1246 http GET http://registry.npm.taobao.org/cycle
1247 verbose request where is /stack-trace
1248 verbose request registry http://registry.npm.taobao.org/
1249 verbose url raw /stack-trace
1250 verbose url resolving [ 'http://registry.npm.taobao.org/', './stack-trace' ]
1251 verbose url resolved http://registry.npm.taobao.org/stack-trace
1252 verbose request where is http://registry.npm.taobao.org/stack-trace
1253 info trying registry request attempt 1 at 15:20:45
1254 verbose etag "1397486630000"
1255 http GET http://registry.npm.taobao.org/stack-trace
1256 verbose request where is /request
1257 verbose request registry http://registry.npm.taobao.org/
1258 verbose url raw /request
1259 verbose url resolving [ 'http://registry.npm.taobao.org/', './request' ]
1260 verbose url resolved http://registry.npm.taobao.org/request
1261 verbose request where is http://registry.npm.taobao.org/request
1262 info trying registry request attempt 1 at 15:20:45
1263 verbose etag "1400534329000"
1264 http GET http://registry.npm.taobao.org/request
1265 http 304 http://registry.npm.taobao.org/node-getopt
1266 silly registry.get cb [ 304,
1266 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1266 silly registry.get     connection: 'keep-alive',
1266 silly registry.get     'x-powered-by': 'koa',
1266 silly registry.get     etag: '"1397716749000"',
1266 silly registry.get     'x-readtime': '9' } ]
1267 verbose etag http://registry.npm.taobao.org/node-getopt from cache
1268 http 304 http://registry.npm.taobao.org/colors
1269 silly registry.get cb [ 304,
1269 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1269 silly registry.get     connection: 'keep-alive',
1269 silly registry.get     'x-powered-by': 'koa',
1269 silly registry.get     etag: '"1397447037000"',
1269 silly registry.get     'x-readtime': '2' } ]
1270 verbose etag http://registry.npm.taobao.org/colors from cache
1271 http 304 http://registry.npm.taobao.org/mkdirp
1272 silly registry.get cb [ 304,
1272 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1272 silly registry.get     connection: 'keep-alive',
1272 silly registry.get     'x-powered-by': 'koa',
1272 silly registry.get     etag: '"1399343851000"',
1272 silly registry.get     'x-readtime': '7' } ]
1273 verbose etag http://registry.npm.taobao.org/mkdirp from cache
1274 http 304 http://registry.npm.taobao.org/async
1275 silly registry.get cb [ 304,
1275 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1275 silly registry.get     connection: 'keep-alive',
1275 silly registry.get     'x-powered-by': 'koa',
1275 silly registry.get     etag: '"1400236732000"',
1275 silly registry.get     'x-readtime': '7' } ]
1276 verbose etag http://registry.npm.taobao.org/async from cache
1277 http 200 http://registry.npm.taobao.org/sinon-chai
1278 silly registry.get cb [ 200,
1278 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1278 silly registry.get     'content-type': 'application/json; charset=utf-8',
1278 silly registry.get     'content-length': '29401',
1278 silly registry.get     connection: 'keep-alive',
1278 silly registry.get     'x-powered-by': 'koa',
1278 silly registry.get     etag: '"1397504906000"',
1278 silly registry.get     'x-readtime': '78' } ]
1279 http 304 http://registry.npm.taobao.org/findup-sync
1280 silly registry.get cb [ 304,
1280 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1280 silly registry.get     connection: 'keep-alive',
1280 silly registry.get     'x-powered-by': 'koa',
1280 silly registry.get     etag: '"1397505921000"',
1280 silly registry.get     'x-readtime': '2' } ]
1281 verbose etag http://registry.npm.taobao.org/findup-sync from cache
1282 verbose request where is /glob
1283 verbose request registry http://registry.npm.taobao.org/
1284 verbose url raw /glob
1285 verbose url resolving [ 'http://registry.npm.taobao.org/', './glob' ]
1286 verbose url resolved http://registry.npm.taobao.org/glob
1287 verbose request where is http://registry.npm.taobao.org/glob
1288 info trying registry request attempt 1 at 15:20:45
1289 verbose etag "1401758454000"
1290 http GET http://registry.npm.taobao.org/glob
1291 verbose registry.get http://registry.npm.taobao.org/lodash not expired, no request
1292 http 200 http://registry.npm.taobao.org/hooker
1293 silly registry.get cb [ 200,
1293 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1293 silly registry.get     'content-type': 'application/json; charset=utf-8',
1293 silly registry.get     'content-length': '7967',
1293 silly registry.get     connection: 'keep-alive',
1293 silly registry.get     'x-powered-by': 'koa',
1293 silly registry.get     etag: '"1397508834000"',
1293 silly registry.get     'x-readtime': '6' } ]
1294 http 200 http://registry.npm.taobao.org/mocha
1295 silly registry.get cb [ 200,
1295 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1295 silly registry.get     'content-type': 'application/json; charset=utf-8',
1295 silly registry.get     'content-length': '106878',
1295 silly registry.get     connection: 'keep-alive',
1295 silly registry.get     'x-powered-by': 'koa',
1295 silly registry.get     etag: '"1406519195000"',
1295 silly registry.get     'x-readtime': '103' } ]
1296 http 304 http://registry.npm.taobao.org/dateformat
1297 silly registry.get cb [ 304,
1297 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1297 silly registry.get     connection: 'keep-alive',
1297 silly registry.get     'x-powered-by': 'koa',
1297 silly registry.get     etag: '"1400586524000"',
1297 silly registry.get     'x-readtime': '6' } ]
1298 verbose etag http://registry.npm.taobao.org/dateformat from cache
1299 http 200 http://registry.npm.taobao.org/express
1300 silly registry.get cb [ 200,
1300 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1300 silly registry.get     'content-type': 'application/json; charset=utf-8',
1300 silly registry.get     'content-length': '313408',
1300 silly registry.get     connection: 'keep-alive',
1300 silly registry.get     'x-powered-by': 'koa',
1300 silly registry.get     etag: '"1407192189000"',
1300 silly registry.get     'x-readtime': '75' } ]
1301 http 304 http://registry.npm.taobao.org/eventemitter2
1302 silly registry.get cb [ 304,
1302 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1302 silly registry.get     connection: 'keep-alive',
1302 silly registry.get     'x-powered-by': 'koa',
1302 silly registry.get     etag: '"1403631265000"',
1302 silly registry.get     'x-readtime': '6' } ]
1303 verbose etag http://registry.npm.taobao.org/eventemitter2 from cache
1304 http 304 http://registry.npm.taobao.org/lodash
1305 silly registry.get cb [ 304,
1305 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1305 silly registry.get     connection: 'keep-alive',
1305 silly registry.get     'x-powered-by': 'koa',
1305 silly registry.get     etag: '"1397567791000"',
1305 silly registry.get     'x-readtime': '2' } ]
1306 verbose etag http://registry.npm.taobao.org/lodash from cache
1307 http 200 http://registry.npm.taobao.org/nopt
1308 silly registry.get cb [ 200,
1308 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1308 silly registry.get     'content-type': 'application/json; charset=utf-8',
1308 silly registry.get     'content-length': '27566',
1308 silly registry.get     connection: 'keep-alive',
1308 silly registry.get     'x-powered-by': 'koa',
1308 silly registry.get     etag: '"1404235407000"',
1308 silly registry.get     'x-readtime': '36' } ]
1309 http 304 http://registry.npm.taobao.org/which
1310 silly registry.get cb [ 304,
1310 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1310 silly registry.get     connection: 'keep-alive',
1310 silly registry.get     'x-powered-by': 'koa',
1310 silly registry.get     etag: '"1397448125000"',
1310 silly registry.get     'x-readtime': '7' } ]
1311 verbose etag http://registry.npm.taobao.org/which from cache
1312 http 200 http://registry.npm.taobao.org/minimatch
1313 silly registry.get cb [ 200,
1313 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1313 silly registry.get     'content-type': 'application/json; charset=utf-8',
1313 silly registry.get     'content-length': '34712',
1313 silly registry.get     connection: 'keep-alive',
1313 silly registry.get     'x-powered-by': 'koa',
1313 silly registry.get     etag: '"1406583997000"',
1313 silly registry.get     'x-readtime': '17' } ]
1314 http 304 http://registry.npm.taobao.org/rimraf
1315 silly registry.get cb [ 304,
1315 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1315 silly registry.get     connection: 'keep-alive',
1315 silly registry.get     'x-powered-by': 'koa',
1315 silly registry.get     etag: '"1399393050000"',
1315 silly registry.get     'x-readtime': '2' } ]
1316 verbose etag http://registry.npm.taobao.org/rimraf from cache
1317 http 200 http://registry.npm.taobao.org/glob
1318 silly registry.get cb [ 200,
1318 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1318 silly registry.get     'content-type': 'application/json; charset=utf-8',
1318 silly registry.get     'content-length': '55679',
1318 silly registry.get     connection: 'keep-alive',
1318 silly registry.get     'x-powered-by': 'koa',
1318 silly registry.get     etag: '"1406584000000"',
1318 silly registry.get     'x-readtime': '44' } ]
1319 http 200 http://registry.npm.taobao.org/iconv-lite
1320 silly registry.get cb [ 200,
1320 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1320 silly registry.get     'content-type': 'application/json; charset=utf-8',
1320 silly registry.get     'content-length': '41325',
1320 silly registry.get     connection: 'keep-alive',
1320 silly registry.get     'x-powered-by': 'koa',
1320 silly registry.get     etag: '"1405573629000"',
1320 silly registry.get     'x-readtime': '41' } ]
1321 http 304 http://registry.npm.taobao.org/exit
1322 silly registry.get cb [ 304,
1322 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1322 silly registry.get     connection: 'keep-alive',
1322 silly registry.get     'x-powered-by': 'koa',
1322 silly registry.get     etag: '"1397516858000"',
1322 silly registry.get     'x-readtime': '2' } ]
1323 verbose etag http://registry.npm.taobao.org/exit from cache
1324 http 304 http://registry.npm.taobao.org/underscore.string
1325 silly registry.get cb [ 304,
1325 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1325 silly registry.get     connection: 'keep-alive',
1325 silly registry.get     'x-powered-by': 'koa',
1325 silly registry.get     etag: '"1402328150000"',
1325 silly registry.get     'x-readtime': '7' } ]
1326 verbose etag http://registry.npm.taobao.org/underscore.string from cache
1327 http 304 http://registry.npm.taobao.org/getobject
1328 silly registry.get cb [ 304,
1328 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1328 silly registry.get     connection: 'keep-alive',
1328 silly registry.get     'x-powered-by': 'koa',
1328 silly registry.get     etag: '"1397542881000"',
1328 silly registry.get     'x-readtime': '6' } ]
1329 verbose etag http://registry.npm.taobao.org/getobject from cache
1330 http 304 http://registry.npm.taobao.org/grunt-legacy-log
1331 silly registry.get cb [ 304,
1331 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1331 silly registry.get     connection: 'keep-alive',
1331 silly registry.get     'x-powered-by': 'koa',
1331 silly registry.get     etag: '"1399923451000"',
1331 silly registry.get     'x-readtime': '7' } ]
1332 verbose etag http://registry.npm.taobao.org/grunt-legacy-log from cache
1333 http 304 http://registry.npm.taobao.org/grunt-legacy-util
1334 silly registry.get cb [ 304,
1334 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1334 silly registry.get     connection: 'keep-alive',
1334 silly registry.get     'x-powered-by': 'koa',
1334 silly registry.get     etag: '"1399652250000"',
1334 silly registry.get     'x-readtime': '3' } ]
1335 verbose etag http://registry.npm.taobao.org/grunt-legacy-util from cache
1336 verbose registry.get http://registry.npm.taobao.org/hooker not expired, no request
1337 verbose registry.get http://registry.npm.taobao.org/lodash not expired, no request
1338 verbose registry.get http://registry.npm.taobao.org/underscore.string not expired, no request
1339 verbose registry.get http://registry.npm.taobao.org/colors not expired, no request
1340 verbose registry.get http://registry.npm.taobao.org/hooker not expired, no request
1341 verbose registry.get http://registry.npm.taobao.org/async not expired, no request
1342 verbose registry.get http://registry.npm.taobao.org/lodash not expired, no request
1343 verbose registry.get http://registry.npm.taobao.org/exit not expired, no request
1344 verbose registry.get http://registry.npm.taobao.org/getobject not expired, no request
1345 verbose registry.get http://registry.npm.taobao.org/which not expired, no request
1346 verbose registry.get http://registry.npm.taobao.org/underscore.string not expired, no request
1347 http 304 http://registry.npm.taobao.org/socket.io
1348 silly registry.get cb [ 304,
1348 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1348 silly registry.get     connection: 'keep-alive',
1348 silly registry.get     'x-powered-by': 'koa',
1348 silly registry.get     etag: '"1403215391000"',
1348 silly registry.get     'x-readtime': '3' } ]
1349 verbose etag http://registry.npm.taobao.org/socket.io from cache
1350 http 200 http://registry.npm.taobao.org/js-yaml
1351 silly registry.get cb [ 200,
1351 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1351 silly registry.get     'content-type': 'application/json; charset=utf-8',
1351 silly registry.get     'content-length': '48409',
1351 silly registry.get     connection: 'keep-alive',
1351 silly registry.get     'x-powered-by': 'koa',
1351 silly registry.get     etag: '"1404726236000"',
1351 silly registry.get     'x-readtime': '41' } ]
1352 http 200 http://registry.npm.taobao.org/tap
1353 silly registry.get cb [ 200,
1353 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1353 silly registry.get     'content-type': 'application/json; charset=utf-8',
1353 silly registry.get     'content-length': '62279',
1353 silly registry.get     connection: 'keep-alive',
1353 silly registry.get     'x-powered-by': 'koa',
1353 silly registry.get     etag: '"1406151336000"',
1353 silly registry.get     'x-readtime': '22' } ]
1354 http 304 http://registry.npm.taobao.org/pty.js
1355 silly registry.get cb [ 304,
1355 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1355 silly registry.get     connection: 'keep-alive',
1355 silly registry.get     'x-powered-by': 'koa',
1355 silly registry.get     etag: '"1397725625000"',
1355 silly registry.get     'x-readtime': '65' } ]
1356 verbose etag http://registry.npm.taobao.org/pty.js from cache
1357 http 304 http://registry.npm.taobao.org/term.js
1358 silly registry.get cb [ 304,
1358 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1358 silly registry.get     connection: 'keep-alive',
1358 silly registry.get     'x-powered-by': 'koa',
1358 silly registry.get     etag: '"1397734547000"',
1358 silly registry.get     'x-readtime': '40' } ]
1359 verbose etag http://registry.npm.taobao.org/term.js from cache
1360 http 304 http://registry.npm.taobao.org/async
1361 silly registry.get cb [ 304,
1361 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1361 silly registry.get     connection: 'keep-alive',
1361 silly registry.get     'x-powered-by': 'koa',
1361 silly registry.get     etag: '"1400236732000"',
1361 silly registry.get     'x-readtime': '2' } ]
1362 verbose etag http://registry.npm.taobao.org/async from cache
1363 http 200 http://registry.npm.taobao.org/glob
1364 silly registry.get cb [ 200,
1364 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1364 silly registry.get     'content-type': 'application/json; charset=utf-8',
1364 silly registry.get     'content-length': '55679',
1364 silly registry.get     connection: 'keep-alive',
1364 silly registry.get     'x-powered-by': 'koa',
1364 silly registry.get     etag: '"1406584000000"',
1364 silly registry.get     'x-readtime': '51' } ]
1365 http 304 http://registry.npm.taobao.org/strong-data-uri
1366 silly registry.get cb [ 304,
1366 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1366 silly registry.get     connection: 'keep-alive',
1366 silly registry.get     'x-powered-by': 'koa',
1366 silly registry.get     etag: '"1397573344000"',
1366 silly registry.get     'x-readtime': '3' } ]
1367 verbose etag http://registry.npm.taobao.org/strong-data-uri from cache
1368 verbose request where is /truncate
1369 verbose request registry http://registry.npm.taobao.org/
1370 verbose url raw /truncate
1371 verbose url resolving [ 'http://registry.npm.taobao.org/', './truncate' ]
1372 verbose url resolved http://registry.npm.taobao.org/truncate
1373 verbose request where is http://registry.npm.taobao.org/truncate
1374 info trying registry request attempt 1 at 15:20:46
1375 verbose etag "1397573643000"
1376 http GET http://registry.npm.taobao.org/truncate
1377 http 304 http://registry.npm.taobao.org/which
1378 silly registry.get cb [ 304,
1378 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1378 silly registry.get     connection: 'keep-alive',
1378 silly registry.get     'x-powered-by': 'koa',
1378 silly registry.get     etag: '"1397448125000"',
1378 silly registry.get     'x-readtime': '7' } ]
1379 verbose etag http://registry.npm.taobao.org/which from cache
1380 http 200 http://registry.npm.taobao.org/express
1381 silly registry.get cb [ 200,
1381 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1381 silly registry.get     'content-type': 'application/json; charset=utf-8',
1381 silly registry.get     'content-length': '313408',
1381 silly registry.get     connection: 'keep-alive',
1381 silly registry.get     'x-powered-by': 'koa',
1381 silly registry.get     etag: '"1407192189000"',
1381 silly registry.get     'x-readtime': '93' } ]
1382 http 200 http://registry.npm.taobao.org/debug
1383 silly registry.get cb [ 200,
1383 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1383 silly registry.get     'content-type': 'application/json; charset=utf-8',
1383 silly registry.get     'content-length': '26757',
1383 silly registry.get     connection: 'keep-alive',
1383 silly registry.get     'x-powered-by': 'koa',
1383 silly registry.get     etag: '"1405466842000"',
1383 silly registry.get     'x-readtime': '32' } ]
1384 http 200 http://registry.npm.taobao.org/rc
1385 silly registry.get cb [ 200,
1385 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1385 silly registry.get     'content-type': 'application/json; charset=utf-8',
1385 silly registry.get     'content-length': '24728',
1385 silly registry.get     connection: 'keep-alive',
1385 silly registry.get     'x-powered-by': 'koa',
1385 silly registry.get     etag: '"1406685407000"',
1385 silly registry.get     'x-readtime': '24' } ]
1386 http 304 http://registry.npm.taobao.org/opener
1387 silly registry.get cb [ 304,
1387 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1387 silly registry.get     connection: 'keep-alive',
1387 silly registry.get     'x-powered-by': 'koa',
1387 silly registry.get     etag: '"1397452758000"',
1387 silly registry.get     'x-readtime': '2' } ]
1388 verbose etag http://registry.npm.taobao.org/opener from cache
1389 http 304 http://registry.npm.taobao.org/ws
1390 silly registry.get cb [ 304,
1390 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1390 silly registry.get     connection: 'keep-alive',
1390 silly registry.get     'x-powered-by': 'koa',
1390 silly registry.get     etag: '"1397507409000"',
1390 silly registry.get     'x-readtime': '6' } ]
1391 verbose etag http://registry.npm.taobao.org/ws from cache
1392 verbose request where is /commander
1393 verbose request registry http://registry.npm.taobao.org/
1394 verbose url raw /commander
1395 verbose url resolving [ 'http://registry.npm.taobao.org/', './commander' ]
1396 verbose url resolved http://registry.npm.taobao.org/commander
1397 verbose request where is http://registry.npm.taobao.org/commander
1398 info trying registry request attempt 1 at 15:20:46
1399 verbose etag "1397446222000"
1400 http GET http://registry.npm.taobao.org/commander
1401 verbose request where is /tinycolor
1402 verbose request registry http://registry.npm.taobao.org/
1403 verbose url raw /tinycolor
1404 verbose url resolving [ 'http://registry.npm.taobao.org/', './tinycolor' ]
1405 verbose url resolved http://registry.npm.taobao.org/tinycolor
1406 verbose request where is http://registry.npm.taobao.org/tinycolor
1407 info trying registry request attempt 1 at 15:20:46
1408 verbose etag "1397515646000"
1409 http GET http://registry.npm.taobao.org/tinycolor
1410 verbose request where is /options
1411 verbose request registry http://registry.npm.taobao.org/
1412 verbose url raw /options
1413 verbose url resolving [ 'http://registry.npm.taobao.org/', './options' ]
1414 verbose url resolved http://registry.npm.taobao.org/options
1415 verbose request where is http://registry.npm.taobao.org/options
1416 info trying registry request attempt 1 at 15:20:46
1417 verbose etag "1397515650000"
1418 http GET http://registry.npm.taobao.org/options
1419 verbose request where is /nan
1420 verbose request registry http://registry.npm.taobao.org/
1421 verbose url raw /nan
1422 verbose url resolving [ 'http://registry.npm.taobao.org/', './nan' ]
1423 verbose url resolved http://registry.npm.taobao.org/nan
1424 verbose request where is http://registry.npm.taobao.org/nan
1425 info trying registry request attempt 1 at 15:20:46
1426 verbose etag "1401917969000"
1427 http GET http://registry.npm.taobao.org/nan
1428 http 304 http://registry.npm.taobao.org/mkdirp
1429 silly registry.get cb [ 304,
1429 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1429 silly registry.get     connection: 'keep-alive',
1429 silly registry.get     'x-powered-by': 'koa',
1429 silly registry.get     etag: '"1399343851000"',
1429 silly registry.get     'x-readtime': '2' } ]
1430 verbose etag http://registry.npm.taobao.org/mkdirp from cache
1431 http 304 http://registry.npm.taobao.org/async
1432 silly registry.get cb [ 304,
1432 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1432 silly registry.get     connection: 'keep-alive',
1432 silly registry.get     'x-powered-by': 'koa',
1432 silly registry.get     etag: '"1400236732000"',
1432 silly registry.get     'x-readtime': '2' } ]
1433 verbose etag http://registry.npm.taobao.org/async from cache
1434 http 200 http://registry.npm.taobao.org/yargs
1435 silly registry.get cb [ 200,
1435 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1435 silly registry.get     'content-type': 'application/json; charset=utf-8',
1435 silly registry.get     'content-length': '50372',
1435 silly registry.get     connection: 'keep-alive',
1435 silly registry.get     'x-powered-by': 'koa',
1435 silly registry.get     etag: '"1406670397000"',
1435 silly registry.get     'x-readtime': '39' } ]
1436 http 200 http://registry.npm.taobao.org/commander
1437 silly registry.get cb [ 200,
1437 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1437 silly registry.get     'content-type': 'application/json; charset=utf-8',
1437 silly registry.get     'content-length': '44218',
1437 silly registry.get     connection: 'keep-alive',
1437 silly registry.get     'x-powered-by': 'koa',
1437 silly registry.get     etag: '"1405477638000"',
1437 silly registry.get     'x-readtime': '40' } ]
1438 http 200 http://registry.npm.taobao.org/express
1439 silly registry.get cb [ 200,
1439 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:45 GMT',
1439 silly registry.get     'content-type': 'application/json; charset=utf-8',
1439 silly registry.get     'content-length': '313408',
1439 silly registry.get     connection: 'keep-alive',
1439 silly registry.get     'x-powered-by': 'koa',
1439 silly registry.get     etag: '"1407192189000"',
1439 silly registry.get     'x-readtime': '135' } ]
1440 http 304 http://registry.npm.taobao.org/dateformat
1441 silly registry.get cb [ 304,
1441 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1441 silly registry.get     connection: 'keep-alive',
1441 silly registry.get     'x-powered-by': 'koa',
1441 silly registry.get     etag: '"1400586524000"',
1441 silly registry.get     'x-readtime': '6' } ]
1442 verbose etag http://registry.npm.taobao.org/dateformat from cache
1443 http 304 http://registry.npm.taobao.org/colors
1444 silly registry.get cb [ 304,
1444 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1444 silly registry.get     connection: 'keep-alive',
1444 silly registry.get     'x-powered-by': 'koa',
1444 silly registry.get     etag: '"1397447037000"',
1444 silly registry.get     'x-readtime': '6' } ]
1445 verbose etag http://registry.npm.taobao.org/colors from cache
1446 http 304 http://registry.npm.taobao.org/findup-sync
1447 silly registry.get cb [ 304,
1447 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1447 silly registry.get     connection: 'keep-alive',
1447 silly registry.get     'x-powered-by': 'koa',
1447 silly registry.get     etag: '"1397505921000"',
1447 silly registry.get     'x-readtime': '2' } ]
1448 verbose etag http://registry.npm.taobao.org/findup-sync from cache
1449 verbose registry.get http://registry.npm.taobao.org/glob not expired, no request
1450 verbose registry.get http://registry.npm.taobao.org/lodash not expired, no request
1451 http 304 http://registry.npm.taobao.org/eventemitter2
1452 silly registry.get cb [ 304,
1452 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1452 silly registry.get     connection: 'keep-alive',
1452 silly registry.get     'x-powered-by': 'koa',
1452 silly registry.get     etag: '"1403631265000"',
1452 silly registry.get     'x-readtime': '7' } ]
1453 verbose etag http://registry.npm.taobao.org/eventemitter2 from cache
1454 http 200 http://registry.npm.taobao.org/hooker
1455 silly registry.get cb [ 200,
1455 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1455 silly registry.get     'content-type': 'application/json; charset=utf-8',
1455 silly registry.get     'content-length': '7967',
1455 silly registry.get     connection: 'keep-alive',
1455 silly registry.get     'x-powered-by': 'koa',
1455 silly registry.get     etag: '"1397508834000"',
1455 silly registry.get     'x-readtime': '13' } ]
1456 http 200 http://registry.npm.taobao.org/iconv-lite
1457 silly registry.get cb [ 200,
1457 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1457 silly registry.get     'content-type': 'application/json; charset=utf-8',
1457 silly registry.get     'content-length': '41325',
1457 silly registry.get     connection: 'keep-alive',
1457 silly registry.get     'x-powered-by': 'koa',
1457 silly registry.get     etag: '"1405573629000"',
1457 silly registry.get     'x-readtime': '13' } ]
1458 http 200 http://registry.npm.taobao.org/nopt
1459 silly registry.get cb [ 200,
1459 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1459 silly registry.get     'content-type': 'application/json; charset=utf-8',
1459 silly registry.get     'content-length': '27566',
1459 silly registry.get     connection: 'keep-alive',
1459 silly registry.get     'x-powered-by': 'koa',
1459 silly registry.get     etag: '"1404235407000"',
1459 silly registry.get     'x-readtime': '12' } ]
1460 http 200 http://registry.npm.taobao.org/minimatch
1461 silly registry.get cb [ 200,
1461 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1461 silly registry.get     'content-type': 'application/json; charset=utf-8',
1461 silly registry.get     'content-length': '34712',
1461 silly registry.get     connection: 'keep-alive',
1461 silly registry.get     'x-powered-by': 'koa',
1461 silly registry.get     etag: '"1406583997000"',
1461 silly registry.get     'x-readtime': '31' } ]
1462 http 200 http://registry.npm.taobao.org/glob
1463 silly registry.get cb [ 200,
1463 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1463 silly registry.get     'content-type': 'application/json; charset=utf-8',
1463 silly registry.get     'content-length': '55679',
1463 silly registry.get     connection: 'keep-alive',
1463 silly registry.get     'x-powered-by': 'koa',
1463 silly registry.get     etag: '"1406584000000"',
1463 silly registry.get     'x-readtime': '57' } ]
1464 http 304 http://registry.npm.taobao.org/rimraf
1465 silly registry.get cb [ 304,
1465 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1465 silly registry.get     connection: 'keep-alive',
1465 silly registry.get     'x-powered-by': 'koa',
1465 silly registry.get     etag: '"1399393050000"',
1465 silly registry.get     'x-readtime': '7' } ]
1466 verbose etag http://registry.npm.taobao.org/rimraf from cache
1467 http 304 http://registry.npm.taobao.org/underscore.string
1468 silly registry.get cb [ 304,
1468 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1468 silly registry.get     connection: 'keep-alive',
1468 silly registry.get     'x-powered-by': 'koa',
1468 silly registry.get     etag: '"1402328150000"',
1468 silly registry.get     'x-readtime': '7' } ]
1469 verbose etag http://registry.npm.taobao.org/underscore.string from cache
1470 http 304 http://registry.npm.taobao.org/which
1471 silly registry.get cb [ 304,
1471 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1471 silly registry.get     connection: 'keep-alive',
1471 silly registry.get     'x-powered-by': 'koa',
1471 silly registry.get     etag: '"1397448125000"',
1471 silly registry.get     'x-readtime': '6' } ]
1472 verbose etag http://registry.npm.taobao.org/which from cache
1473 http 304 http://registry.npm.taobao.org/lodash
1474 silly registry.get cb [ 304,
1474 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1474 silly registry.get     connection: 'keep-alive',
1474 silly registry.get     'x-powered-by': 'koa',
1474 silly registry.get     etag: '"1397567791000"',
1474 silly registry.get     'x-readtime': '7' } ]
1475 verbose etag http://registry.npm.taobao.org/lodash from cache
1476 http 304 http://registry.npm.taobao.org/exit
1477 silly registry.get cb [ 304,
1477 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1477 silly registry.get     connection: 'keep-alive',
1477 silly registry.get     'x-powered-by': 'koa',
1477 silly registry.get     etag: '"1397516858000"',
1477 silly registry.get     'x-readtime': '2' } ]
1478 verbose etag http://registry.npm.taobao.org/exit from cache
1479 http 304 http://registry.npm.taobao.org/getobject
1480 silly registry.get cb [ 304,
1480 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1480 silly registry.get     connection: 'keep-alive',
1480 silly registry.get     'x-powered-by': 'koa',
1480 silly registry.get     etag: '"1397542881000"',
1480 silly registry.get     'x-readtime': '3' } ]
1481 verbose etag http://registry.npm.taobao.org/getobject from cache
1482 http 200 http://registry.npm.taobao.org/js-yaml
1483 silly registry.get cb [ 200,
1483 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1483 silly registry.get     'content-type': 'application/json; charset=utf-8',
1483 silly registry.get     'content-length': '48409',
1483 silly registry.get     connection: 'keep-alive',
1483 silly registry.get     'x-powered-by': 'koa',
1483 silly registry.get     etag: '"1404726236000"',
1483 silly registry.get     'x-readtime': '25' } ]
1484 http 304 http://registry.npm.taobao.org/grunt-legacy-util
1485 silly registry.get cb [ 304,
1485 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1485 silly registry.get     connection: 'keep-alive',
1485 silly registry.get     'x-powered-by': 'koa',
1485 silly registry.get     etag: '"1399652250000"',
1485 silly registry.get     'x-readtime': '2' } ]
1486 verbose etag http://registry.npm.taobao.org/grunt-legacy-util from cache
1487 verbose registry.get http://registry.npm.taobao.org/hooker not expired, no request
1488 verbose registry.get http://registry.npm.taobao.org/async not expired, no request
1489 verbose registry.get http://registry.npm.taobao.org/lodash not expired, no request
1490 verbose registry.get http://registry.npm.taobao.org/exit not expired, no request
1491 verbose registry.get http://registry.npm.taobao.org/underscore.string not expired, no request
1492 verbose registry.get http://registry.npm.taobao.org/getobject not expired, no request
1493 verbose registry.get http://registry.npm.taobao.org/which not expired, no request
1494 http 304 http://registry.npm.taobao.org/grunt-legacy-log
1495 silly registry.get cb [ 304,
1495 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1495 silly registry.get     connection: 'keep-alive',
1495 silly registry.get     'x-powered-by': 'koa',
1495 silly registry.get     etag: '"1399923451000"',
1495 silly registry.get     'x-readtime': '7' } ]
1496 verbose etag http://registry.npm.taobao.org/grunt-legacy-log from cache
1497 http 304 http://registry.npm.taobao.org/winston
1498 silly registry.get cb [ 304,
1498 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1498 silly registry.get     connection: 'keep-alive',
1498 silly registry.get     'x-powered-by': 'koa',
1498 silly registry.get     etag: '"1397502697000"',
1498 silly registry.get     'x-readtime': '7' } ]
1499 verbose etag http://registry.npm.taobao.org/winston from cache
1500 verbose registry.get http://registry.npm.taobao.org/hooker not expired, no request
1501 verbose registry.get http://registry.npm.taobao.org/lodash not expired, no request
1502 verbose registry.get http://registry.npm.taobao.org/underscore.string not expired, no request
1503 verbose registry.get http://registry.npm.taobao.org/colors not expired, no request
1504 http 304 http://registry.npm.taobao.org/optimist
1505 silly registry.get cb [ 304,
1505 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1505 silly registry.get     connection: 'keep-alive',
1505 silly registry.get     'x-powered-by': 'koa',
1505 silly registry.get     etag: '"1397452996000"',
1505 silly registry.get     'x-readtime': '2' } ]
1506 verbose etag http://registry.npm.taobao.org/optimist from cache
1507 http 304 http://registry.npm.taobao.org/eyes
1508 silly registry.get cb [ 304,
1508 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1508 silly registry.get     connection: 'keep-alive',
1508 silly registry.get     'x-powered-by': 'koa',
1508 silly registry.get     etag: '"1397452779000"',
1508 silly registry.get     'x-readtime': '7' } ]
1509 verbose etag http://registry.npm.taobao.org/eyes from cache
1510 http 304 http://registry.npm.taobao.org/ini
1511 silly registry.get cb [ 304,
1511 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1511 silly registry.get     connection: 'keep-alive',
1511 silly registry.get     'x-powered-by': 'koa',
1511 silly registry.get     etag: '"1400825330000"',
1511 silly registry.get     'x-readtime': '7' } ]
1512 verbose etag http://registry.npm.taobao.org/ini from cache
1513 http 304 http://registry.npm.taobao.org/broadway
1514 silly registry.get cb [ 304,
1514 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1514 silly registry.get     connection: 'keep-alive',
1514 silly registry.get     'x-powered-by': 'koa',
1514 silly registry.get     etag: '"1397480826000"',
1514 silly registry.get     'x-readtime': '2' } ]
1515 verbose etag http://registry.npm.taobao.org/broadway from cache
1516 http 304 http://registry.npm.taobao.org/optimist
1517 silly registry.get cb [ 304,
1517 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1517 silly registry.get     connection: 'keep-alive',
1517 silly registry.get     'x-powered-by': 'koa',
1517 silly registry.get     etag: '"1397452996000"',
1517 silly registry.get     'x-readtime': '7' } ]
1518 verbose etag http://registry.npm.taobao.org/optimist from cache
1519 verbose registry.get http://registry.npm.taobao.org/cliff not expired, no request
1520 verbose registry.get http://registry.npm.taobao.org/eventemitter2 not expired, no request
1521 verbose registry.get http://registry.npm.taobao.org/nconf not expired, no request
1522 verbose registry.get http://registry.npm.taobao.org/winston not expired, no request
1523 verbose registry.get http://registry.npm.taobao.org/utile not expired, no request
1524 http 304 http://registry.npm.taobao.org/director
1525 silly registry.get cb [ 304,
1525 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1525 silly registry.get     connection: 'keep-alive',
1525 silly registry.get     'x-powered-by': 'koa',
1525 silly registry.get     etag: '"1397503465000"',
1525 silly registry.get     'x-readtime': '7' } ]
1526 verbose etag http://registry.npm.taobao.org/director from cache
1527 http 304 http://registry.npm.taobao.org/eventemitter2
1528 silly registry.get cb [ 304,
1528 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1528 silly registry.get     connection: 'keep-alive',
1528 silly registry.get     'x-powered-by': 'koa',
1528 silly registry.get     etag: '"1403631265000"',
1528 silly registry.get     'x-readtime': '2' } ]
1529 verbose etag http://registry.npm.taobao.org/eventemitter2 from cache
1530 http 304 http://registry.npm.taobao.org/lazy
1531 silly registry.get cb [ 304,
1531 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1531 silly registry.get     connection: 'keep-alive',
1531 silly registry.get     'x-powered-by': 'koa',
1531 silly registry.get     etag: '"1397504070000"',
1531 silly registry.get     'x-readtime': '4' } ]
1532 verbose etag http://registry.npm.taobao.org/lazy from cache
1533 http 304 http://registry.npm.taobao.org/wordwrap
1534 silly registry.get cb [ 304,
1534 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1534 silly registry.get     connection: 'keep-alive',
1534 silly registry.get     'x-powered-by': 'koa',
1534 silly registry.get     etag: '"1397448182000"',
1534 silly registry.get     'x-readtime': '8' } ]
1535 verbose etag http://registry.npm.taobao.org/wordwrap from cache
1536 http 304 http://registry.npm.taobao.org/minimist
1537 silly registry.get cb [ 304,
1537 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1537 silly registry.get     connection: 'keep-alive',
1537 silly registry.get     'x-powered-by': 'koa',
1537 silly registry.get     etag: '"1403190256000"',
1537 silly registry.get     'x-readtime': '6' } ]
1538 verbose etag http://registry.npm.taobao.org/minimist from cache
1539 http 304 http://registry.npm.taobao.org/mkdirp
1540 silly registry.get cb [ 304,
1540 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1540 silly registry.get     connection: 'keep-alive',
1540 silly registry.get     'x-powered-by': 'koa',
1540 silly registry.get     etag: '"1399343851000"',
1540 silly registry.get     'x-readtime': '2' } ]
1541 verbose etag http://registry.npm.taobao.org/mkdirp from cache
1542 verbose registry.get http://registry.npm.taobao.org/minimist not expired, no request
1543 http 304 http://registry.npm.taobao.org/rimraf
1544 silly registry.get cb [ 304,
1544 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1544 silly registry.get     connection: 'keep-alive',
1544 silly registry.get     'x-powered-by': 'koa',
1544 silly registry.get     etag: '"1399393050000"',
1544 silly registry.get     'x-readtime': '7' } ]
1545 verbose etag http://registry.npm.taobao.org/rimraf from cache
1546 http 304 http://registry.npm.taobao.org/deep-equal
1547 silly registry.get cb [ 304,
1547 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1547 silly registry.get     connection: 'keep-alive',
1547 silly registry.get     'x-powered-by': 'koa',
1547 silly registry.get     etag: '"1397450606000"',
1547 silly registry.get     'x-readtime': '2' } ]
1548 verbose etag http://registry.npm.taobao.org/deep-equal from cache
1549 http 304 http://registry.npm.taobao.org/i
1550 silly registry.get cb [ 304,
1550 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1550 silly registry.get     connection: 'keep-alive',
1550 silly registry.get     'x-powered-by': 'koa',
1550 silly registry.get     etag: '"1397507013000"',
1550 silly registry.get     'x-readtime': '6' } ]
1551 verbose etag http://registry.npm.taobao.org/i from cache
1552 http 304 http://registry.npm.taobao.org/eyes
1553 silly registry.get cb [ 304,
1553 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1553 silly registry.get     connection: 'keep-alive',
1553 silly registry.get     'x-powered-by': 'koa',
1553 silly registry.get     etag: '"1397452779000"',
1553 silly registry.get     'x-readtime': '2' } ]
1554 verbose etag http://registry.npm.taobao.org/eyes from cache
1555 http 200 http://registry.npm.taobao.org/ncp
1556 silly registry.get cb [ 200,
1556 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1556 silly registry.get     'content-type': 'application/json; charset=utf-8',
1556 silly registry.get     'content-length': '25012',
1556 silly registry.get     connection: 'keep-alive',
1556 silly registry.get     'x-powered-by': 'koa',
1556 silly registry.get     etag: '"1404849850000"',
1556 silly registry.get     'x-readtime': '23' } ]
1557 http 304 http://registry.npm.taobao.org/cycle
1558 silly registry.get cb [ 304,
1558 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1558 silly registry.get     connection: 'keep-alive',
1558 silly registry.get     'x-powered-by': 'koa',
1558 silly registry.get     etag: '"1397501175000"',
1558 silly registry.get     'x-readtime': '8' } ]
1559 verbose etag http://registry.npm.taobao.org/cycle from cache
1560 http 304 http://registry.npm.taobao.org/stack-trace
1561 silly registry.get cb [ 304,
1561 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1561 silly registry.get     connection: 'keep-alive',
1561 silly registry.get     'x-powered-by': 'koa',
1561 silly registry.get     etag: '"1397486630000"',
1561 silly registry.get     'x-readtime': '2' } ]
1562 verbose etag http://registry.npm.taobao.org/stack-trace from cache
1563 http 200 http://registry.npm.taobao.org/glob
1564 silly registry.get cb [ 200,
1564 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1564 silly registry.get     'content-type': 'application/json; charset=utf-8',
1564 silly registry.get     'content-length': '55679',
1564 silly registry.get     connection: 'keep-alive',
1564 silly registry.get     'x-powered-by': 'koa',
1564 silly registry.get     etag: '"1406584000000"',
1564 silly registry.get     'x-readtime': '45' } ]
1565 http 304 http://registry.npm.taobao.org/truncate
1566 silly registry.get cb [ 304,
1566 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1566 silly registry.get     connection: 'keep-alive',
1566 silly registry.get     'x-powered-by': 'koa',
1566 silly registry.get     etag: '"1397573643000"',
1566 silly registry.get     'x-readtime': '2' } ]
1567 verbose etag http://registry.npm.taobao.org/truncate from cache
1568 http 200 http://registry.npm.taobao.org/glob
1569 silly registry.get cb [ 200,
1569 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1569 silly registry.get     'content-type': 'application/json; charset=utf-8',
1569 silly registry.get     'content-length': '55679',
1569 silly registry.get     connection: 'keep-alive',
1569 silly registry.get     'x-powered-by': 'koa',
1569 silly registry.get     etag: '"1406584000000"',
1569 silly registry.get     'x-readtime': '43' } ]
1570 http 200 http://registry.npm.taobao.org/request
1571 silly registry.get cb [ 200,
1571 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1571 silly registry.get     'content-type': 'application/json; charset=utf-8',
1571 silly registry.get     'content-length': '101817',
1571 silly registry.get     connection: 'keep-alive',
1571 silly registry.get     'x-powered-by': 'koa',
1571 silly registry.get     etag: '"1406169329000"',
1571 silly registry.get     'x-readtime': '114' } ]
1572 http 200 http://registry.npm.taobao.org/tinycolor
1573 silly registry.get cb [ 200,
1573 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1573 silly registry.get     'content-type': 'application/json; charset=utf-8',
1573 silly registry.get     'content-length': '1476',
1573 silly registry.get     connection: 'keep-alive',
1573 silly registry.get     'x-powered-by': 'koa',
1573 silly registry.get     etag: '"1397515647000"',
1573 silly registry.get     'x-readtime': '42' } ]
1574 http 200 http://registry.npm.taobao.org/commander
1575 silly registry.get cb [ 200,
1575 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1575 silly registry.get     'content-type': 'application/json; charset=utf-8',
1575 silly registry.get     'content-length': '44218',
1575 silly registry.get     connection: 'keep-alive',
1575 silly registry.get     'x-powered-by': 'koa',
1575 silly registry.get     etag: '"1405477638000"',
1575 silly registry.get     'x-readtime': '115' } ]
1576 http 200 http://registry.npm.taobao.org/options
1577 silly registry.get cb [ 200,
1577 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1577 silly registry.get     'content-type': 'application/json; charset=utf-8',
1577 silly registry.get     'content-length': '6521',
1577 silly registry.get     connection: 'keep-alive',
1577 silly registry.get     'x-powered-by': 'koa',
1577 silly registry.get     etag: '"1397515651000"',
1577 silly registry.get     'x-readtime': '45' } ]
1578 http 200 http://registry.npm.taobao.org/nan
1579 silly registry.get cb [ 200,
1579 silly registry.get   { date: 'Tue, 05 Aug 2014 07:20:46 GMT',
1579 silly registry.get     'content-type': 'application/json; charset=utf-8',
1579 silly registry.get     'content-length': '71794',
1579 silly registry.get     connection: 'keep-alive',
1579 silly registry.get     'x-powered-by': 'koa',
1579 silly registry.get     etag: '"1406982358000"',
1579 silly registry.get     'x-readtime': '106' } ]
1580 info outdated updating [ [ '/usr/local/lib',
1580 info outdated     'node-theseus',
1580 info outdated     '0.2.4',
1580 info outdated     '0.2.5',
1580 info outdated     '0.2.5',
1580 info outdated     'latest' ],
1580 info outdated   [ '/usr/local/lib', 'cnpm', '0.2.0', '0.5.2', '0.5.2', 'latest' ],
1580 info outdated   [ '/usr/local/lib', 'gulp', '3.8.2', '3.8.7', '3.8.7', 'latest' ],
1580 info outdated   [ '/usr/local/lib', 'bower', '1.3.5', '1.3.8', '1.3.8', 'latest' ],
1580 info outdated   [ '/usr/local/lib', 'less', '1.7.3', '1.7.4', '1.7.4', 'latest' ],
1580 info outdated   [ '/usr/local/lib', 'yo', '1.2.0', '1.2.1', '1.2.1', 'latest' ],
1580 info outdated   [ '/usr/local/lib/node_modules/generator-meanstack',
1580 info outdated     'yeoman-generator',
1580 info outdated     '0.15.0',
1580 info outdated     '0.15.0',
1580 info outdated     '0.17.2',
1580 info outdated     '~0.15.0' ],
1580 info outdated   [ '/usr/local/lib', 'nodemon', '1.2.0', '1.2.1', '1.2.1', 'latest' ],
1580 info outdated   [ '/usr/local/lib', 'npm', '1.4.21', '1.4.23', '1.4.23', 'latest' ],
1580 info outdated   [ '/usr/local/lib',
1580 info outdated     'sails',
1580 info outdated     '0.10.0-rc8',
1580 info outdated     '0.10.1',
1580 info outdated     '0.10.1',
1580 info outdated     'latest' ],
1580 info outdated   [ '/usr/local/lib/node_modules/coffee-script',
1580 info outdated     'mkdirp',
1580 info outdated     '0.3.5',
1580 info outdated     '0.3.5',
1580 info outdated     '0.5.0',
1580 info outdated     '~0.3.5' ],
1580 info outdated   [ '/usr/local/lib/node_modules/coffee',
1580 info outdated     'chai',
1580 info outdated     '1.7.2',
1580 info outdated     '1.7.2',
1580 info outdated     '1.9.1',
1580 info outdated     '1.7.x' ],
1580 info outdated   [ '/usr/local/lib/node_modules/coffee',
1580 info outdated     'sinon-chai',
1580 info outdated     '2.4.0',
1580 info outdated     '2.4.0',
1580 info outdated     '2.5.0',
1580 info outdated     '2.4.x' ],
1580 info outdated   [ '/usr/local/lib/node_modules/coffee',
1580 info outdated     'mocha',
1580 info outdated     '1.11.0',
1580 info outdated     '1.11.0',
1580 info outdated     '1.21.3',
1580 info outdated     '1.11.x' ],
1580 info outdated   [ '/usr/local/lib/node_modules/coffee',
1580 info outdated     'express',
1580 info outdated     '3.2.6',
1580 info outdated     '3.2.6',
1580 info outdated     '4.7.4',
1580 info outdated     '3.2.x' ],
1580 info outdated   [ '/usr/local/lib/node_modules/nodeunit',
1580 info outdated     'tap',
1580 info outdated     '0.4.11',
1580 info outdated     '0.4.12',
1580 info outdated     '0.4.12',
1580 info outdated     '>=0.2.3' ],
1580 info outdated   [ '/usr/local/lib/node_modules/tty.js',
1580 info outdated     'socket.io',
1580 info outdated     '0.9.13',
1580 info outdated     '0.9.13',
1580 info outdated     '1.0.6',
1580 info outdated     '0.9.13' ],
1580 info outdated   [ '/usr/local/lib/node_modules/tty.js',
1580 info outdated     'pty.js',
1580 info outdated     undefined,
1580 info outdated     '0.2.3',
1580 info outdated     '0.2.4',
1580 info outdated     '0.2.3' ],
1580 info outdated   [ '/usr/local/lib/node_modules/tty.js',
1580 info outdated     'term.js',
1580 info outdated     '0.0.3',
1580 info outdated     '0.0.3',
1580 info outdated     '0.0.4',
1580 info outdated     '0.0.3' ],
1580 info outdated   [ '/usr/local/lib/node_modules/tty.js',
1580 info outdated     'express',
1580 info outdated     '3.1.0',
1580 info outdated     '3.1.0',
1580 info outdated     '4.7.4',
1580 info outdated     '3.1.0' ],
1580 info outdated   [ '/usr/local/lib/node_modules/express-generator',
1580 info outdated     'mkdirp',
1580 info outdated     '0.3.5',
1580 info outdated     '0.3.5',
1580 info outdated     '0.5.0',
1580 info outdated     '0.3.5' ],
1580 info outdated   [ '/usr/local/lib/node_modules/express-generator',
1580 info outdated     'commander',
1580 info outdated     '1.3.2',
1580 info outdated     '1.3.2',
1580 info outdated     '2.3.0',
1580 info outdated     '1.3.2' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init',
1580 info outdated     'prompt',
1580 info outdated     '0.1.12',
1580 info outdated     '0.1.12',
1580 info outdated     '0.2.13',
1580 info outdated     '~0.1.12' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init',
1580 info outdated     'semver',
1580 info outdated     '1.0.14',
1580 info outdated     '1.0.14',
1580 info outdated     '3.0.1',
1580 info outdated     '~1.0.14' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init',
1580 info outdated     'async',
1580 info outdated     '0.2.10',
1580 info outdated     '0.2.10',
1580 info outdated     '0.9.0',
1580 info outdated     '~0.2.10' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1580 info outdated     'coffee-script',
1580 info outdated     '1.3.3',
1580 info outdated     '1.3.3',
1580 info outdated     '1.7.1',
1580 info outdated     '~1.3.3' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1580 info outdated     'async',
1580 info outdated     '0.1.22',
1580 info outdated     '0.1.22',
1580 info outdated     '0.9.0',
1580 info outdated     '~0.1.22' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1580 info outdated     'dateformat',
1580 info outdated     '1.0.2-1.2.3',
1580 info outdated     '1.0.2-1.2.3',
1580 info outdated     '1.0.8-1.2.3',
1580 info outdated     '1.0.2-1.2.3' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/findup-sync',
1580 info outdated     'glob',
1580 info outdated     '3.2.11',
1580 info outdated     '3.2.11',
1580 info outdated     '4.0.5',
1580 info outdated     '~3.2.9' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1580 info outdated     'iconv-lite',
1580 info outdated     '0.2.11',
1580 info outdated     '0.2.11',
1580 info outdated     '0.4.4',
1580 info outdated     '~0.2.11' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1580 info outdated     'nopt',
1580 info outdated     '1.0.10',
1580 info outdated     '1.0.10',
1580 info outdated     '3.0.1',
1580 info outdated     '~1.0.10' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1580 info outdated     'minimatch',
1580 info outdated     '0.2.14',
1580 info outdated     '0.2.14',
1580 info outdated     '1.0.0',
1580 info outdated     '~0.2.12' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1580 info outdated     'glob',
1580 info outdated     '3.1.21',
1580 info outdated     '3.1.21',
1580 info outdated     '4.0.5',
1580 info outdated     '~3.1.21' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1580 info outdated     'underscore.string',
1580 info outdated     '2.2.1',
1580 info outdated     '2.2.1',
1580 info outdated     '2.3.3',
1580 info outdated     '~2.2.1' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1580 info outdated     'lodash',
1580 info outdated     '0.9.2',
1580 info outdated     '0.9.2',
1580 info outdated     '2.4.1',
1580 info outdated     '~0.9.2' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1580 info outdated     'js-yaml',
1580 info outdated     '2.0.5',
1580 info outdated     '2.0.5',
1580 info outdated     '3.1.0',
1580 info outdated     '~2.0.5' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util',
1580 info outdated     'async',
1580 info outdated     '0.1.22',
1580 info outdated     '0.1.22',
1580 info outdated     '0.9.0',
1580 info outdated     '~0.1.22' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util',
1580 info outdated     'lodash',
1580 info outdated     '0.9.2',
1580 info outdated     '0.9.2',
1580 info outdated     '2.4.1',
1580 info outdated     '~0.9.2' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util',
1580 info outdated     'underscore.string',
1580 info outdated     '2.2.1',
1580 info outdated     '2.2.1',
1580 info outdated     '2.3.3',
1580 info outdated     '~2.2.1' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-cli',
1580 info outdated     'nopt',
1580 info outdated     '1.0.10',
1580 info outdated     '1.0.10',
1580 info outdated     '3.0.1',
1580 info outdated     '~1.0.10' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-cli',
1580 info outdated     'resolve',
1580 info outdated     '0.3.1',
1580 info outdated     '0.3.1',
1580 info outdated     '0.7.4',
1580 info outdated     '~0.3.1' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt-cli/node_modules/findup-sync',
1580 info outdated     'glob',
1580 info outdated     '3.2.11',
1580 info outdated     '3.2.11',
1580 info outdated     '4.0.5',
1580 info outdated     '~3.2.9' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt',
1580 info outdated     'coffee-script',
1580 info outdated     '1.3.3',
1580 info outdated     '1.3.3',
1580 info outdated     '1.7.1',
1580 info outdated     '~1.3.3' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt',
1580 info outdated     'async',
1580 info outdated     '0.1.22',
1580 info outdated     '0.1.22',
1580 info outdated     '0.9.0',
1580 info outdated     '~0.1.22' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt',
1580 info outdated     'dateformat',
1580 info outdated     '1.0.2-1.2.3',
1580 info outdated     '1.0.2-1.2.3',
1580 info outdated     '1.0.8-1.2.3',
1580 info outdated     '1.0.2-1.2.3' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt',
1580 info outdated     'lodash',
1580 info outdated     '0.9.2',
1580 info outdated     '0.9.2',
1580 info outdated     '2.4.1',
1580 info outdated     '~0.9.2' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt',
1580 info outdated     'nopt',
1580 info outdated     '1.0.10',
1580 info outdated     '1.0.10',
1580 info outdated     '3.0.1',
1580 info outdated     '~1.0.10' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt',
1580 info outdated     'minimatch',
1580 info outdated     '0.2.14',
1580 info outdated     '0.2.14',
1580 info outdated     '1.0.0',
1580 info outdated     '~0.2.12' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt',
1580 info outdated     'glob',
1580 info outdated     '3.1.21',
1580 info outdated     '3.1.21',
1580 info outdated     '4.0.5',
1580 info outdated     '~3.1.21' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt',
1580 info outdated     'iconv-lite',
1580 info outdated     '0.2.11',
1580 info outdated     '0.2.11',
1580 info outdated     '0.4.4',
1580 info outdated     '~0.2.11' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt',
1580 info outdated     'underscore.string',
1580 info outdated     '2.2.1',
1580 info outdated     '2.2.1',
1580 info outdated     '2.3.3',
1580 info outdated     '~2.2.1' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util',
1580 info outdated     'async',
1580 info outdated     '0.1.22',
1580 info outdated     '0.1.22',
1580 info outdated     '0.9.0',
1580 info outdated     '~0.1.22' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util',
1580 info outdated     'lodash',
1580 info outdated     '0.9.2',
1580 info outdated     '0.9.2',
1580 info outdated     '2.4.1',
1580 info outdated     '~0.9.2' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util',
1580 info outdated     'underscore.string',
1580 info outdated     '2.2.1',
1580 info outdated     '2.2.1',
1580 info outdated     '2.3.3',
1580 info outdated     '~2.2.1' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt',
1580 info outdated     'js-yaml',
1580 info outdated     '2.0.5',
1580 info outdated     '2.0.5',
1580 info outdated     '3.1.0',
1580 info outdated     '~2.0.5' ],
1580 info outdated   [ '/usr/local/lib/node_modules/grunt/node_modules/findup-sync',
1580 info outdated     'glob',
1580 info outdated     '3.2.11',
1580 info outdated     '3.2.11',
1580 info outdated     '4.0.5',
1580 info outdated     '~3.2.9' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever',
1580 info outdated     'forever-monitor',
1580 info outdated     '1.2.3',
1580 info outdated     '1.2.3',
1580 info outdated     '1.3.0',
1580 info outdated     '1.2.3' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever',
1580 info outdated     'watch',
1580 info outdated     '0.8.0',
1580 info outdated     '0.8.0',
1580 info outdated     '0.11.0',
1580 info outdated     '~0.8.0' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/cliff',
1580 info outdated     'winston',
1580 info outdated     '0.6.2',
1580 info outdated     '0.6.2',
1580 info outdated     '0.7.3',
1580 info outdated     '0.6.x' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/nconf',
1580 info outdated     'async',
1580 info outdated     '0.2.9',
1580 info outdated     '0.2.9',
1580 info outdated     '0.9.0',
1580 info outdated     '0.2.9' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/nconf',
1580 info outdated     'optimist',
1580 info outdated     '0.6.0',
1580 info outdated     '0.6.0',
1580 info outdated     '0.6.1',
1580 info outdated     '0.6.0' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/flatiron',
1580 info outdated     'prompt',
1580 info outdated     '0.2.11',
1580 info outdated     '0.2.11',
1580 info outdated     '0.2.13',
1580 info outdated     '0.2.11' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules/broadway',
1580 info outdated     'eventemitter2',
1580 info outdated     '0.4.12',
1580 info outdated     '0.4.12',
1580 info outdated     '0.4.14',
1580 info outdated     '0.4.12' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules/broadway',
1580 info outdated     'winston',
1580 info outdated     '0.7.2',
1580 info outdated     '0.7.2',
1580 info outdated     '0.7.3',
1580 info outdated     '0.7.2' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/flatiron',
1580 info outdated     'optimist',
1580 info outdated     '0.6.0',
1580 info outdated     '0.6.0',
1580 info outdated     '0.6.1',
1580 info outdated     '0.6.0' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/flatiron',
1580 info outdated     'director',
1580 info outdated     '1.1.10',
1580 info outdated     '1.1.10',
1580 info outdated     '1.2.3',
1580 info outdated     '1.1.10' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/optimist',
1580 info outdated     'minimist',
1580 info outdated     '0.0.10',
1580 info outdated     '0.0.10',
1580 info outdated     '0.2.0',
1580 info outdated     '~0.0.1' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/utile',
1580 info outdated     'async',
1580 info outdated     '0.2.10',
1580 info outdated     '0.2.10',
1580 info outdated     '0.9.0',
1580 info outdated     '~0.2.9' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/utile/node_modules/mkdirp',
1580 info outdated     'minimist',
1580 info outdated     '0.0.8',
1580 info outdated     '0.0.8',
1580 info outdated     '0.2.0',
1580 info outdated     '0.0.8' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/utile',
1580 info outdated     'ncp',
1580 info outdated     '0.4.2',
1580 info outdated     '0.4.2',
1580 info outdated     '0.6.0',
1580 info outdated     '0.4.x' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/winston',
1580 info outdated     'async',
1580 info outdated     '0.2.10',
1580 info outdated     '0.2.10',
1580 info outdated     '0.9.0',
1580 info outdated     '0.2.x' ],
1580 info outdated   [ '/usr/local/lib/node_modules/forever/node_modules/winston',
1580 info outdated     'request',
1580 info outdated     '2.16.6',
1580 info outdated     '2.16.6',
1580 info outdated     '2.39.0',
1580 info outdated     '2.16.x' ],
1580 info outdated   [ '/usr/local/lib/node_modules/node-inspector',
1580 info outdated     'async',
1580 info outdated     '0.8.0',
1580 info outdated     '0.8.0',
1580 info outdated     '0.9.0',
1580 info outdated     '~0.8' ],
1580 info outdated   [ '/usr/local/lib/node_modules/node-inspector',
1580 info outdated     'glob',
1580 info outdated     '3.2.11',
1580 info outdated     '3.2.11',
1580 info outdated     '4.0.5',
1580 info outdated     '~3.2.1' ],
1580 info outdated   [ '/usr/local/lib/node_modules/node-inspector',
1580 info outdated     'debug',
1580 info outdated     '0.8.1',
1580 info outdated     '0.8.1',
1580 info outdated     '1.0.4',
1580 info outdated     '~0.8' ],
1580 info outdated   [ '/usr/local/lib/node_modules/node-inspector',
1580 info outdated     'rc',
1580 info outdated     '0.3.5',
1580 info outdated     '0.3.5',
1580 info outdated     '0.5.0',
1580 info outdated     '~0.3.0' ],
1580 info outdated   [ '/usr/local/lib/node_modules/node-inspector',
1580 info outdated     'yargs',
1580 info outdated     '1.2.6',
1580 info outdated     '1.2.6',
1580 info outdated     '1.3.1',
1580 info outdated     '~1.2.1' ],
1580 info outdated   [ '/usr/local/lib/node_modules/node-inspector',
1580 info outdated     'express',
1580 info outdated     '4.0.0',
1580 info outdated     '4.0.0',
1580 info outdated     '4.7.4',
1580 info outdated     '~4.0' ],
1580 info outdated   [ '/usr/local/lib/node_modules/node-inspector/node_modules/ws',
1580 info outdated     'commander',
1580 info outdated     '0.6.1',
1580 info outdated     '0.6.1',
1580 info outdated     '2.3.0',
1580 info outdated     '~0.6.1' ],
1580 info outdated   [ '/usr/local/lib/node_modules/node-inspector/node_modules/ws',
1580 info outdated     'nan',
1580 info outdated     '0.3.2',
1580 info outdated     '0.3.2',
1580 info outdated     '1.3.0',
1580 info outdated     '~0.3.0' ] ]
1581 verbose install where,what [ '/usr/local/lib', [ 'node-theseus@0.2.5' ] ]
1582 verbose install where,what [ '/usr/local/lib', [ 'cnpm@0.5.2' ] ]
1583 verbose install where,what [ '/usr/local/lib', [ 'gulp@3.8.7' ] ]
1584 verbose install where,what [ '/usr/local/lib', [ 'bower@1.3.8' ] ]
1585 verbose install where,what [ '/usr/local/lib', [ 'less@1.7.4' ] ]
1586 verbose install where,what [ '/usr/local/lib', [ 'yo@1.2.1' ] ]
1587 verbose install where,what [ '/usr/local/lib/node_modules/generator-meanstack',
1587 verbose install   [ 'yeoman-generator@0.15.0' ] ]
1588 verbose install where,what [ '/usr/local/lib', [ 'nodemon@1.2.1' ] ]
1589 verbose install where,what [ '/usr/local/lib', [ 'npm@1.4.23' ] ]
1590 verbose install where,what [ '/usr/local/lib', [ 'sails@0.10.1' ] ]
1591 verbose install where,what [ '/usr/local/lib/node_modules/coffee-script',
1591 verbose install   [ 'mkdirp@0.3.5' ] ]
1592 verbose install where,what [ '/usr/local/lib/node_modules/coffee', [ 'chai@1.7.2' ] ]
1593 verbose install where,what [ '/usr/local/lib/node_modules/coffee', [ 'sinon-chai@2.4.0' ] ]
1594 verbose install where,what [ '/usr/local/lib/node_modules/coffee', [ 'mocha@1.11.0' ] ]
1595 verbose install where,what [ '/usr/local/lib/node_modules/coffee', [ 'express@3.2.6' ] ]
1596 verbose install where,what [ '/usr/local/lib/node_modules/nodeunit', [ 'tap@0.4.12' ] ]
1597 verbose install where,what [ '/usr/local/lib/node_modules/tty.js', [ 'socket.io@0.9.13' ] ]
1598 verbose install where,what [ '/usr/local/lib/node_modules/tty.js', [ 'pty.js@0.2.3' ] ]
1599 verbose install where,what [ '/usr/local/lib/node_modules/tty.js', [ 'term.js@0.0.3' ] ]
1600 verbose install where,what [ '/usr/local/lib/node_modules/tty.js', [ 'express@3.1.0' ] ]
1601 verbose install where,what [ '/usr/local/lib/node_modules/express-generator',
1601 verbose install   [ 'mkdirp@0.3.5' ] ]
1602 verbose install where,what [ '/usr/local/lib/node_modules/express-generator',
1602 verbose install   [ 'commander@1.3.2' ] ]
1603 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init',
1603 verbose install   [ 'prompt@0.1.12' ] ]
1604 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init',
1604 verbose install   [ 'semver@1.0.14' ] ]
1605 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init', [ 'async@0.2.10' ] ]
1606 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1606 verbose install   [ 'coffee-script@1.3.3' ] ]
1607 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1607 verbose install   [ 'async@0.1.22' ] ]
1608 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1608 verbose install   [ 'dateformat@1.0.2-1.2.3' ] ]
1609 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/findup-sync',
1609 verbose install   [ 'glob@3.2.11' ] ]
1610 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1610 verbose install   [ 'iconv-lite@0.2.11' ] ]
1611 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1611 verbose install   [ 'nopt@1.0.10' ] ]
1612 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1612 verbose install   [ 'minimatch@0.2.14' ] ]
1613 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1613 verbose install   [ 'glob@3.1.21' ] ]
1614 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1614 verbose install   [ 'underscore.string@2.2.1' ] ]
1615 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1615 verbose install   [ 'lodash@0.9.2' ] ]
1616 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt',
1616 verbose install   [ 'js-yaml@2.0.5' ] ]
1617 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util',
1617 verbose install   [ 'async@0.1.22' ] ]
1618 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util',
1618 verbose install   [ 'lodash@0.9.2' ] ]
1619 verbose install where,what [ '/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util',
1619 verbose install   [ 'underscore.string@2.2.1' ] ]
1620 verbose install where,what [ '/usr/local/lib/node_modules/grunt-cli', [ 'nopt@1.0.10' ] ]
1621 verbose install where,what [ '/usr/local/lib/node_modules/grunt-cli', [ 'resolve@0.3.1' ] ]
1622 verbose install where,what [ '/usr/local/lib/node_modules/grunt-cli/node_modules/findup-sync',
1622 verbose install   [ 'glob@3.2.11' ] ]
1623 verbose install where,what [ '/usr/local/lib/node_modules/grunt',
1623 verbose install   [ 'coffee-script@1.3.3' ] ]
1624 verbose install where,what [ '/usr/local/lib/node_modules/grunt', [ 'async@0.1.22' ] ]
1625 verbose install where,what [ '/usr/local/lib/node_modules/grunt',
1625 verbose install   [ 'dateformat@1.0.2-1.2.3' ] ]
1626 verbose install where,what [ '/usr/local/lib/node_modules/grunt', [ 'lodash@0.9.2' ] ]
1627 verbose install where,what [ '/usr/local/lib/node_modules/grunt', [ 'nopt@1.0.10' ] ]
1628 verbose install where,what [ '/usr/local/lib/node_modules/grunt', [ 'minimatch@0.2.14' ] ]
1629 verbose install where,what [ '/usr/local/lib/node_modules/grunt', [ 'glob@3.1.21' ] ]
1630 verbose install where,what [ '/usr/local/lib/node_modules/grunt', [ 'iconv-lite@0.2.11' ] ]
1631 verbose install where,what [ '/usr/local/lib/node_modules/grunt',
1631 verbose install   [ 'underscore.string@2.2.1' ] ]
1632 verbose install where,what [ '/usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util',
1632 verbose install   [ 'async@0.1.22' ] ]
1633 verbose install where,what [ '/usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util',
1633 verbose install   [ 'lodash@0.9.2' ] ]
1634 verbose install where,what [ '/usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util',
1634 verbose install   [ 'underscore.string@2.2.1' ] ]
1635 verbose install where,what [ '/usr/local/lib/node_modules/grunt', [ 'js-yaml@2.0.5' ] ]
1636 verbose install where,what [ '/usr/local/lib/node_modules/grunt/node_modules/findup-sync',
1636 verbose install   [ 'glob@3.2.11' ] ]
1637 verbose install where,what [ '/usr/local/lib/node_modules/forever',
1637 verbose install   [ 'forever-monitor@1.2.3' ] ]
1638 verbose install where,what [ '/usr/local/lib/node_modules/forever', [ 'watch@0.8.0' ] ]
1639 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/cliff',
1639 verbose install   [ 'winston@0.6.2' ] ]
1640 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/nconf',
1640 verbose install   [ 'async@0.2.9' ] ]
1641 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/nconf',
1641 verbose install   [ 'optimist@0.6.0' ] ]
1642 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/flatiron',
1642 verbose install   [ 'prompt@0.2.11' ] ]
1643 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules/broadway',
1643 verbose install   [ 'eventemitter2@0.4.12' ] ]
1644 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules/broadway',
1644 verbose install   [ 'winston@0.7.2' ] ]
1645 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/flatiron',
1645 verbose install   [ 'optimist@0.6.0' ] ]
1646 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/flatiron',
1646 verbose install   [ 'director@1.1.10' ] ]
1647 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/optimist',
1647 verbose install   [ 'minimist@0.0.10' ] ]
1648 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/utile',
1648 verbose install   [ 'async@0.2.10' ] ]
1649 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/utile/node_modules/mkdirp',
1649 verbose install   [ 'minimist@0.0.8' ] ]
1650 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/utile',
1650 verbose install   [ 'ncp@0.4.2' ] ]
1651 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/winston',
1651 verbose install   [ 'async@0.2.10' ] ]
1652 verbose install where,what [ '/usr/local/lib/node_modules/forever/node_modules/winston',
1652 verbose install   [ 'request@2.16.6' ] ]
1653 verbose install where,what [ '/usr/local/lib/node_modules/node-inspector',
1653 verbose install   [ 'async@0.8.0' ] ]
1654 verbose install where,what [ '/usr/local/lib/node_modules/node-inspector',
1654 verbose install   [ 'glob@3.2.11' ] ]
1655 verbose install where,what [ '/usr/local/lib/node_modules/node-inspector',
1655 verbose install   [ 'debug@0.8.1' ] ]
1656 verbose install where,what [ '/usr/local/lib/node_modules/node-inspector', [ 'rc@0.3.5' ] ]
1657 verbose install where,what [ '/usr/local/lib/node_modules/node-inspector',
1657 verbose install   [ 'yargs@1.2.6' ] ]
1658 verbose install where,what [ '/usr/local/lib/node_modules/node-inspector',
1658 verbose install   [ 'express@4.0.0' ] ]
1659 verbose install where,what [ '/usr/local/lib/node_modules/node-inspector/node_modules/ws',
1659 verbose install   [ 'commander@0.6.1' ] ]
1660 verbose install where,what [ '/usr/local/lib/node_modules/node-inspector/node_modules/ws',
1660 verbose install   [ 'nan@0.3.2' ] ]
1661 verbose readDependencies using package.json deps
1662 verbose cache add [ 'yeoman-generator@0.15.0', null ]
1663 verbose cache add name=undefined spec="yeoman-generator@0.15.0" args=["yeoman-generator@0.15.0",null]
1664 verbose parsed url { protocol: null,
1664 verbose parsed url   slashes: null,
1664 verbose parsed url   auth: null,
1664 verbose parsed url   host: null,
1664 verbose parsed url   port: null,
1664 verbose parsed url   hostname: null,
1664 verbose parsed url   hash: null,
1664 verbose parsed url   search: null,
1664 verbose parsed url   query: null,
1664 verbose parsed url   pathname: 'yeoman-generator@0.15.0',
1664 verbose parsed url   path: 'yeoman-generator@0.15.0',
1664 verbose parsed url   href: 'yeoman-generator@0.15.0' }
1665 verbose readDependencies using package.json deps
1666 verbose cache add [ 'mkdirp@0.3.5', null ]
1667 verbose cache add name=undefined spec="mkdirp@0.3.5" args=["mkdirp@0.3.5",null]
1668 verbose parsed url { protocol: null,
1668 verbose parsed url   slashes: null,
1668 verbose parsed url   auth: null,
1668 verbose parsed url   host: null,
1668 verbose parsed url   port: null,
1668 verbose parsed url   hostname: null,
1668 verbose parsed url   hash: null,
1668 verbose parsed url   search: null,
1668 verbose parsed url   query: null,
1668 verbose parsed url   pathname: 'mkdirp@0.3.5',
1668 verbose parsed url   path: 'mkdirp@0.3.5',
1668 verbose parsed url   href: 'mkdirp@0.3.5' }
1669 verbose readDependencies using package.json deps
1670 verbose cache add [ 'chai@1.7.2', null ]
1671 verbose cache add name=undefined spec="chai@1.7.2" args=["chai@1.7.2",null]
1672 verbose parsed url { protocol: null,
1672 verbose parsed url   slashes: null,
1672 verbose parsed url   auth: null,
1672 verbose parsed url   host: null,
1672 verbose parsed url   port: null,
1672 verbose parsed url   hostname: null,
1672 verbose parsed url   hash: null,
1672 verbose parsed url   search: null,
1672 verbose parsed url   query: null,
1672 verbose parsed url   pathname: 'chai@1.7.2',
1672 verbose parsed url   path: 'chai@1.7.2',
1672 verbose parsed url   href: 'chai@1.7.2' }
1673 verbose readDependencies using package.json deps
1674 verbose cache add [ 'sinon-chai@2.4.0', null ]
1675 verbose cache add name=undefined spec="sinon-chai@2.4.0" args=["sinon-chai@2.4.0",null]
1676 verbose parsed url { protocol: null,
1676 verbose parsed url   slashes: null,
1676 verbose parsed url   auth: null,
1676 verbose parsed url   host: null,
1676 verbose parsed url   port: null,
1676 verbose parsed url   hostname: null,
1676 verbose parsed url   hash: null,
1676 verbose parsed url   search: null,
1676 verbose parsed url   query: null,
1676 verbose parsed url   pathname: 'sinon-chai@2.4.0',
1676 verbose parsed url   path: 'sinon-chai@2.4.0',
1676 verbose parsed url   href: 'sinon-chai@2.4.0' }
1677 verbose readDependencies using package.json deps
1678 verbose cache add [ 'mocha@1.11.0', null ]
1679 verbose cache add name=undefined spec="mocha@1.11.0" args=["mocha@1.11.0",null]
1680 verbose parsed url { protocol: null,
1680 verbose parsed url   slashes: null,
1680 verbose parsed url   auth: null,
1680 verbose parsed url   host: null,
1680 verbose parsed url   port: null,
1680 verbose parsed url   hostname: null,
1680 verbose parsed url   hash: null,
1680 verbose parsed url   search: null,
1680 verbose parsed url   query: null,
1680 verbose parsed url   pathname: 'mocha@1.11.0',
1680 verbose parsed url   path: 'mocha@1.11.0',
1680 verbose parsed url   href: 'mocha@1.11.0' }
1681 verbose readDependencies using package.json deps
1682 verbose cache add [ 'express@3.2.6', null ]
1683 verbose cache add name=undefined spec="express@3.2.6" args=["express@3.2.6",null]
1684 verbose parsed url { protocol: null,
1684 verbose parsed url   slashes: null,
1684 verbose parsed url   auth: null,
1684 verbose parsed url   host: null,
1684 verbose parsed url   port: null,
1684 verbose parsed url   hostname: null,
1684 verbose parsed url   hash: null,
1684 verbose parsed url   search: null,
1684 verbose parsed url   query: null,
1684 verbose parsed url   pathname: 'express@3.2.6',
1684 verbose parsed url   path: 'express@3.2.6',
1684 verbose parsed url   href: 'express@3.2.6' }
1685 verbose readDependencies using package.json deps
1686 verbose cache add [ 'tap@0.4.12', null ]
1687 verbose cache add name=undefined spec="tap@0.4.12" args=["tap@0.4.12",null]
1688 verbose parsed url { protocol: null,
1688 verbose parsed url   slashes: null,
1688 verbose parsed url   auth: null,
1688 verbose parsed url   host: null,
1688 verbose parsed url   port: null,
1688 verbose parsed url   hostname: null,
1688 verbose parsed url   hash: null,
1688 verbose parsed url   search: null,
1688 verbose parsed url   query: null,
1688 verbose parsed url   pathname: 'tap@0.4.12',
1688 verbose parsed url   path: 'tap@0.4.12',
1688 verbose parsed url   href: 'tap@0.4.12' }
1689 verbose readDependencies using package.json deps
1690 verbose cache add [ 'socket.io@0.9.13', null ]
1691 verbose cache add name=undefined spec="socket.io@0.9.13" args=["socket.io@0.9.13",null]
1692 verbose parsed url { protocol: null,
1692 verbose parsed url   slashes: null,
1692 verbose parsed url   auth: null,
1692 verbose parsed url   host: null,
1692 verbose parsed url   port: null,
1692 verbose parsed url   hostname: null,
1692 verbose parsed url   hash: null,
1692 verbose parsed url   search: null,
1692 verbose parsed url   query: null,
1692 verbose parsed url   pathname: 'socket.io@0.9.13',
1692 verbose parsed url   path: 'socket.io@0.9.13',
1692 verbose parsed url   href: 'socket.io@0.9.13' }
1693 verbose readDependencies using package.json deps
1694 verbose cache add [ 'pty.js@0.2.3', null ]
1695 verbose cache add name=undefined spec="pty.js@0.2.3" args=["pty.js@0.2.3",null]
1696 verbose parsed url { protocol: null,
1696 verbose parsed url   slashes: null,
1696 verbose parsed url   auth: null,
1696 verbose parsed url   host: null,
1696 verbose parsed url   port: null,
1696 verbose parsed url   hostname: null,
1696 verbose parsed url   hash: null,
1696 verbose parsed url   search: null,
1696 verbose parsed url   query: null,
1696 verbose parsed url   pathname: 'pty.js@0.2.3',
1696 verbose parsed url   path: 'pty.js@0.2.3',
1696 verbose parsed url   href: 'pty.js@0.2.3' }
1697 verbose readDependencies using package.json deps
1698 verbose cache add [ 'term.js@0.0.3', null ]
1699 verbose cache add name=undefined spec="term.js@0.0.3" args=["term.js@0.0.3",null]
1700 verbose parsed url { protocol: null,
1700 verbose parsed url   slashes: null,
1700 verbose parsed url   auth: null,
1700 verbose parsed url   host: null,
1700 verbose parsed url   port: null,
1700 verbose parsed url   hostname: null,
1700 verbose parsed url   hash: null,
1700 verbose parsed url   search: null,
1700 verbose parsed url   query: null,
1700 verbose parsed url   pathname: 'term.js@0.0.3',
1700 verbose parsed url   path: 'term.js@0.0.3',
1700 verbose parsed url   href: 'term.js@0.0.3' }
1701 verbose readDependencies using package.json deps
1702 verbose cache add [ 'express@3.1.0', null ]
1703 verbose cache add name=undefined spec="express@3.1.0" args=["express@3.1.0",null]
1704 verbose parsed url { protocol: null,
1704 verbose parsed url   slashes: null,
1704 verbose parsed url   auth: null,
1704 verbose parsed url   host: null,
1704 verbose parsed url   port: null,
1704 verbose parsed url   hostname: null,
1704 verbose parsed url   hash: null,
1704 verbose parsed url   search: null,
1704 verbose parsed url   query: null,
1704 verbose parsed url   pathname: 'express@3.1.0',
1704 verbose parsed url   path: 'express@3.1.0',
1704 verbose parsed url   href: 'express@3.1.0' }
1705 verbose readDependencies using package.json deps
1706 verbose cache add [ 'mkdirp@0.3.5', null ]
1707 verbose cache add name=undefined spec="mkdirp@0.3.5" args=["mkdirp@0.3.5",null]
1708 verbose parsed url { protocol: null,
1708 verbose parsed url   slashes: null,
1708 verbose parsed url   auth: null,
1708 verbose parsed url   host: null,
1708 verbose parsed url   port: null,
1708 verbose parsed url   hostname: null,
1708 verbose parsed url   hash: null,
1708 verbose parsed url   search: null,
1708 verbose parsed url   query: null,
1708 verbose parsed url   pathname: 'mkdirp@0.3.5',
1708 verbose parsed url   path: 'mkdirp@0.3.5',
1708 verbose parsed url   href: 'mkdirp@0.3.5' }
1709 verbose readDependencies using package.json deps
1710 verbose cache add [ 'commander@1.3.2', null ]
1711 verbose cache add name=undefined spec="commander@1.3.2" args=["commander@1.3.2",null]
1712 verbose parsed url { protocol: null,
1712 verbose parsed url   slashes: null,
1712 verbose parsed url   auth: null,
1712 verbose parsed url   host: null,
1712 verbose parsed url   port: null,
1712 verbose parsed url   hostname: null,
1712 verbose parsed url   hash: null,
1712 verbose parsed url   search: null,
1712 verbose parsed url   query: null,
1712 verbose parsed url   pathname: 'commander@1.3.2',
1712 verbose parsed url   path: 'commander@1.3.2',
1712 verbose parsed url   href: 'commander@1.3.2' }
1713 verbose readDependencies using package.json deps
1714 verbose cache add [ 'prompt@0.1.12', null ]
1715 verbose cache add name=undefined spec="prompt@0.1.12" args=["prompt@0.1.12",null]
1716 verbose parsed url { protocol: null,
1716 verbose parsed url   slashes: null,
1716 verbose parsed url   auth: null,
1716 verbose parsed url   host: null,
1716 verbose parsed url   port: null,
1716 verbose parsed url   hostname: null,
1716 verbose parsed url   hash: null,
1716 verbose parsed url   search: null,
1716 verbose parsed url   query: null,
1716 verbose parsed url   pathname: 'prompt@0.1.12',
1716 verbose parsed url   path: 'prompt@0.1.12',
1716 verbose parsed url   href: 'prompt@0.1.12' }
1717 verbose readDependencies using package.json deps
1718 verbose cache add [ 'semver@1.0.14', null ]
1719 verbose cache add name=undefined spec="semver@1.0.14" args=["semver@1.0.14",null]
1720 verbose parsed url { protocol: null,
1720 verbose parsed url   slashes: null,
1720 verbose parsed url   auth: null,
1720 verbose parsed url   host: null,
1720 verbose parsed url   port: null,
1720 verbose parsed url   hostname: null,
1720 verbose parsed url   hash: null,
1720 verbose parsed url   search: null,
1720 verbose parsed url   query: null,
1720 verbose parsed url   pathname: 'semver@1.0.14',
1720 verbose parsed url   path: 'semver@1.0.14',
1720 verbose parsed url   href: 'semver@1.0.14' }
1721 verbose readDependencies using package.json deps
1722 verbose cache add [ 'async@0.2.10', null ]
1723 verbose cache add name=undefined spec="async@0.2.10" args=["async@0.2.10",null]
1724 verbose parsed url { protocol: null,
1724 verbose parsed url   slashes: null,
1724 verbose parsed url   auth: null,
1724 verbose parsed url   host: null,
1724 verbose parsed url   port: null,
1724 verbose parsed url   hostname: null,
1724 verbose parsed url   hash: null,
1724 verbose parsed url   search: null,
1724 verbose parsed url   query: null,
1724 verbose parsed url   pathname: 'async@0.2.10',
1724 verbose parsed url   path: 'async@0.2.10',
1724 verbose parsed url   href: 'async@0.2.10' }
1725 verbose readDependencies using package.json deps
1726 verbose cache add [ 'coffee-script@1.3.3', null ]
1727 verbose cache add name=undefined spec="coffee-script@1.3.3" args=["coffee-script@1.3.3",null]
1728 verbose parsed url { protocol: null,
1728 verbose parsed url   slashes: null,
1728 verbose parsed url   auth: null,
1728 verbose parsed url   host: null,
1728 verbose parsed url   port: null,
1728 verbose parsed url   hostname: null,
1728 verbose parsed url   hash: null,
1728 verbose parsed url   search: null,
1728 verbose parsed url   query: null,
1728 verbose parsed url   pathname: 'coffee-script@1.3.3',
1728 verbose parsed url   path: 'coffee-script@1.3.3',
1728 verbose parsed url   href: 'coffee-script@1.3.3' }
1729 verbose readDependencies using package.json deps
1730 verbose cache add [ 'async@0.1.22', null ]
1731 verbose cache add name=undefined spec="async@0.1.22" args=["async@0.1.22",null]
1732 verbose parsed url { protocol: null,
1732 verbose parsed url   slashes: null,
1732 verbose parsed url   auth: null,
1732 verbose parsed url   host: null,
1732 verbose parsed url   port: null,
1732 verbose parsed url   hostname: null,
1732 verbose parsed url   hash: null,
1732 verbose parsed url   search: null,
1732 verbose parsed url   query: null,
1732 verbose parsed url   pathname: 'async@0.1.22',
1732 verbose parsed url   path: 'async@0.1.22',
1732 verbose parsed url   href: 'async@0.1.22' }
1733 verbose readDependencies using package.json deps
1734 verbose cache add [ 'dateformat@1.0.2-1.2.3', null ]
1735 verbose cache add name=undefined spec="dateformat@1.0.2-1.2.3" args=["dateformat@1.0.2-1.2.3",null]
1736 verbose parsed url { protocol: null,
1736 verbose parsed url   slashes: null,
1736 verbose parsed url   auth: null,
1736 verbose parsed url   host: null,
1736 verbose parsed url   port: null,
1736 verbose parsed url   hostname: null,
1736 verbose parsed url   hash: null,
1736 verbose parsed url   search: null,
1736 verbose parsed url   query: null,
1736 verbose parsed url   pathname: 'dateformat@1.0.2-1.2.3',
1736 verbose parsed url   path: 'dateformat@1.0.2-1.2.3',
1736 verbose parsed url   href: 'dateformat@1.0.2-1.2.3' }
1737 verbose readDependencies using package.json deps
1738 verbose cache add [ 'glob@3.2.11', null ]
1739 verbose cache add name=undefined spec="glob@3.2.11" args=["glob@3.2.11",null]
1740 verbose parsed url { protocol: null,
1740 verbose parsed url   slashes: null,
1740 verbose parsed url   auth: null,
1740 verbose parsed url   host: null,
1740 verbose parsed url   port: null,
1740 verbose parsed url   hostname: null,
1740 verbose parsed url   hash: null,
1740 verbose parsed url   search: null,
1740 verbose parsed url   query: null,
1740 verbose parsed url   pathname: 'glob@3.2.11',
1740 verbose parsed url   path: 'glob@3.2.11',
1740 verbose parsed url   href: 'glob@3.2.11' }
1741 verbose readDependencies using package.json deps
1742 verbose cache add [ 'iconv-lite@0.2.11', null ]
1743 verbose cache add name=undefined spec="iconv-lite@0.2.11" args=["iconv-lite@0.2.11",null]
1744 verbose parsed url { protocol: null,
1744 verbose parsed url   slashes: null,
1744 verbose parsed url   auth: null,
1744 verbose parsed url   host: null,
1744 verbose parsed url   port: null,
1744 verbose parsed url   hostname: null,
1744 verbose parsed url   hash: null,
1744 verbose parsed url   search: null,
1744 verbose parsed url   query: null,
1744 verbose parsed url   pathname: 'iconv-lite@0.2.11',
1744 verbose parsed url   path: 'iconv-lite@0.2.11',
1744 verbose parsed url   href: 'iconv-lite@0.2.11' }
1745 verbose readDependencies using package.json deps
1746 verbose cache add [ 'nopt@1.0.10', null ]
1747 verbose cache add name=undefined spec="nopt@1.0.10" args=["nopt@1.0.10",null]
1748 verbose parsed url { protocol: null,
1748 verbose parsed url   slashes: null,
1748 verbose parsed url   auth: null,
1748 verbose parsed url   host: null,
1748 verbose parsed url   port: null,
1748 verbose parsed url   hostname: null,
1748 verbose parsed url   hash: null,
1748 verbose parsed url   search: null,
1748 verbose parsed url   query: null,
1748 verbose parsed url   pathname: 'nopt@1.0.10',
1748 verbose parsed url   path: 'nopt@1.0.10',
1748 verbose parsed url   href: 'nopt@1.0.10' }
1749 verbose readDependencies using package.json deps
1750 verbose cache add [ 'minimatch@0.2.14', null ]
1751 verbose cache add name=undefined spec="minimatch@0.2.14" args=["minimatch@0.2.14",null]
1752 verbose parsed url { protocol: null,
1752 verbose parsed url   slashes: null,
1752 verbose parsed url   auth: null,
1752 verbose parsed url   host: null,
1752 verbose parsed url   port: null,
1752 verbose parsed url   hostname: null,
1752 verbose parsed url   hash: null,
1752 verbose parsed url   search: null,
1752 verbose parsed url   query: null,
1752 verbose parsed url   pathname: 'minimatch@0.2.14',
1752 verbose parsed url   path: 'minimatch@0.2.14',
1752 verbose parsed url   href: 'minimatch@0.2.14' }
1753 verbose readDependencies using package.json deps
1754 verbose cache add [ 'glob@3.1.21', null ]
1755 verbose cache add name=undefined spec="glob@3.1.21" args=["glob@3.1.21",null]
1756 verbose parsed url { protocol: null,
1756 verbose parsed url   slashes: null,
1756 verbose parsed url   auth: null,
1756 verbose parsed url   host: null,
1756 verbose parsed url   port: null,
1756 verbose parsed url   hostname: null,
1756 verbose parsed url   hash: null,
1756 verbose parsed url   search: null,
1756 verbose parsed url   query: null,
1756 verbose parsed url   pathname: 'glob@3.1.21',
1756 verbose parsed url   path: 'glob@3.1.21',
1756 verbose parsed url   href: 'glob@3.1.21' }
1757 verbose readDependencies using package.json deps
1758 verbose cache add [ 'underscore.string@2.2.1', null ]
1759 verbose cache add name=undefined spec="underscore.string@2.2.1" args=["underscore.string@2.2.1",null]
1760 verbose parsed url { protocol: null,
1760 verbose parsed url   slashes: null,
1760 verbose parsed url   auth: null,
1760 verbose parsed url   host: null,
1760 verbose parsed url   port: null,
1760 verbose parsed url   hostname: null,
1760 verbose parsed url   hash: null,
1760 verbose parsed url   search: null,
1760 verbose parsed url   query: null,
1760 verbose parsed url   pathname: 'underscore.string@2.2.1',
1760 verbose parsed url   path: 'underscore.string@2.2.1',
1760 verbose parsed url   href: 'underscore.string@2.2.1' }
1761 verbose readDependencies using package.json deps
1762 verbose cache add [ 'lodash@0.9.2', null ]
1763 verbose cache add name=undefined spec="lodash@0.9.2" args=["lodash@0.9.2",null]
1764 verbose parsed url { protocol: null,
1764 verbose parsed url   slashes: null,
1764 verbose parsed url   auth: null,
1764 verbose parsed url   host: null,
1764 verbose parsed url   port: null,
1764 verbose parsed url   hostname: null,
1764 verbose parsed url   hash: null,
1764 verbose parsed url   search: null,
1764 verbose parsed url   query: null,
1764 verbose parsed url   pathname: 'lodash@0.9.2',
1764 verbose parsed url   path: 'lodash@0.9.2',
1764 verbose parsed url   href: 'lodash@0.9.2' }
1765 verbose readDependencies using package.json deps
1766 verbose cache add [ 'js-yaml@2.0.5', null ]
1767 verbose cache add name=undefined spec="js-yaml@2.0.5" args=["js-yaml@2.0.5",null]
1768 verbose parsed url { protocol: null,
1768 verbose parsed url   slashes: null,
1768 verbose parsed url   auth: null,
1768 verbose parsed url   host: null,
1768 verbose parsed url   port: null,
1768 verbose parsed url   hostname: null,
1768 verbose parsed url   hash: null,
1768 verbose parsed url   search: null,
1768 verbose parsed url   query: null,
1768 verbose parsed url   pathname: 'js-yaml@2.0.5',
1768 verbose parsed url   path: 'js-yaml@2.0.5',
1768 verbose parsed url   href: 'js-yaml@2.0.5' }
1769 verbose readDependencies using package.json deps
1770 verbose cache add [ 'async@0.1.22', null ]
1771 verbose cache add name=undefined spec="async@0.1.22" args=["async@0.1.22",null]
1772 verbose parsed url { protocol: null,
1772 verbose parsed url   slashes: null,
1772 verbose parsed url   auth: null,
1772 verbose parsed url   host: null,
1772 verbose parsed url   port: null,
1772 verbose parsed url   hostname: null,
1772 verbose parsed url   hash: null,
1772 verbose parsed url   search: null,
1772 verbose parsed url   query: null,
1772 verbose parsed url   pathname: 'async@0.1.22',
1772 verbose parsed url   path: 'async@0.1.22',
1772 verbose parsed url   href: 'async@0.1.22' }
1773 verbose readDependencies using package.json deps
1774 verbose cache add [ 'lodash@0.9.2', null ]
1775 verbose cache add name=undefined spec="lodash@0.9.2" args=["lodash@0.9.2",null]
1776 verbose parsed url { protocol: null,
1776 verbose parsed url   slashes: null,
1776 verbose parsed url   auth: null,
1776 verbose parsed url   host: null,
1776 verbose parsed url   port: null,
1776 verbose parsed url   hostname: null,
1776 verbose parsed url   hash: null,
1776 verbose parsed url   search: null,
1776 verbose parsed url   query: null,
1776 verbose parsed url   pathname: 'lodash@0.9.2',
1776 verbose parsed url   path: 'lodash@0.9.2',
1776 verbose parsed url   href: 'lodash@0.9.2' }
1777 verbose readDependencies using package.json deps
1778 verbose cache add [ 'underscore.string@2.2.1', null ]
1779 verbose cache add name=undefined spec="underscore.string@2.2.1" args=["underscore.string@2.2.1",null]
1780 verbose parsed url { protocol: null,
1780 verbose parsed url   slashes: null,
1780 verbose parsed url   auth: null,
1780 verbose parsed url   host: null,
1780 verbose parsed url   port: null,
1780 verbose parsed url   hostname: null,
1780 verbose parsed url   hash: null,
1780 verbose parsed url   search: null,
1780 verbose parsed url   query: null,
1780 verbose parsed url   pathname: 'underscore.string@2.2.1',
1780 verbose parsed url   path: 'underscore.string@2.2.1',
1780 verbose parsed url   href: 'underscore.string@2.2.1' }
1781 verbose readDependencies using package.json deps
1782 verbose cache add [ 'nopt@1.0.10', null ]
1783 verbose cache add name=undefined spec="nopt@1.0.10" args=["nopt@1.0.10",null]
1784 verbose parsed url { protocol: null,
1784 verbose parsed url   slashes: null,
1784 verbose parsed url   auth: null,
1784 verbose parsed url   host: null,
1784 verbose parsed url   port: null,
1784 verbose parsed url   hostname: null,
1784 verbose parsed url   hash: null,
1784 verbose parsed url   search: null,
1784 verbose parsed url   query: null,
1784 verbose parsed url   pathname: 'nopt@1.0.10',
1784 verbose parsed url   path: 'nopt@1.0.10',
1784 verbose parsed url   href: 'nopt@1.0.10' }
1785 verbose readDependencies using package.json deps
1786 verbose cache add [ 'resolve@0.3.1', null ]
1787 verbose cache add name=undefined spec="resolve@0.3.1" args=["resolve@0.3.1",null]
1788 verbose parsed url { protocol: null,
1788 verbose parsed url   slashes: null,
1788 verbose parsed url   auth: null,
1788 verbose parsed url   host: null,
1788 verbose parsed url   port: null,
1788 verbose parsed url   hostname: null,
1788 verbose parsed url   hash: null,
1788 verbose parsed url   search: null,
1788 verbose parsed url   query: null,
1788 verbose parsed url   pathname: 'resolve@0.3.1',
1788 verbose parsed url   path: 'resolve@0.3.1',
1788 verbose parsed url   href: 'resolve@0.3.1' }
1789 verbose readDependencies using package.json deps
1790 verbose cache add [ 'glob@3.2.11', null ]
1791 verbose cache add name=undefined spec="glob@3.2.11" args=["glob@3.2.11",null]
1792 verbose parsed url { protocol: null,
1792 verbose parsed url   slashes: null,
1792 verbose parsed url   auth: null,
1792 verbose parsed url   host: null,
1792 verbose parsed url   port: null,
1792 verbose parsed url   hostname: null,
1792 verbose parsed url   hash: null,
1792 verbose parsed url   search: null,
1792 verbose parsed url   query: null,
1792 verbose parsed url   pathname: 'glob@3.2.11',
1792 verbose parsed url   path: 'glob@3.2.11',
1792 verbose parsed url   href: 'glob@3.2.11' }
1793 verbose readDependencies using package.json deps
1794 verbose cache add [ 'coffee-script@1.3.3', null ]
1795 verbose cache add name=undefined spec="coffee-script@1.3.3" args=["coffee-script@1.3.3",null]
1796 verbose parsed url { protocol: null,
1796 verbose parsed url   slashes: null,
1796 verbose parsed url   auth: null,
1796 verbose parsed url   host: null,
1796 verbose parsed url   port: null,
1796 verbose parsed url   hostname: null,
1796 verbose parsed url   hash: null,
1796 verbose parsed url   search: null,
1796 verbose parsed url   query: null,
1796 verbose parsed url   pathname: 'coffee-script@1.3.3',
1796 verbose parsed url   path: 'coffee-script@1.3.3',
1796 verbose parsed url   href: 'coffee-script@1.3.3' }
1797 verbose readDependencies using package.json deps
1798 verbose cache add [ 'async@0.1.22', null ]
1799 verbose cache add name=undefined spec="async@0.1.22" args=["async@0.1.22",null]
1800 verbose parsed url { protocol: null,
1800 verbose parsed url   slashes: null,
1800 verbose parsed url   auth: null,
1800 verbose parsed url   host: null,
1800 verbose parsed url   port: null,
1800 verbose parsed url   hostname: null,
1800 verbose parsed url   hash: null,
1800 verbose parsed url   search: null,
1800 verbose parsed url   query: null,
1800 verbose parsed url   pathname: 'async@0.1.22',
1800 verbose parsed url   path: 'async@0.1.22',
1800 verbose parsed url   href: 'async@0.1.22' }
1801 verbose readDependencies using package.json deps
1802 verbose cache add [ 'dateformat@1.0.2-1.2.3', null ]
1803 verbose cache add name=undefined spec="dateformat@1.0.2-1.2.3" args=["dateformat@1.0.2-1.2.3",null]
1804 verbose parsed url { protocol: null,
1804 verbose parsed url   slashes: null,
1804 verbose parsed url   auth: null,
1804 verbose parsed url   host: null,
1804 verbose parsed url   port: null,
1804 verbose parsed url   hostname: null,
1804 verbose parsed url   hash: null,
1804 verbose parsed url   search: null,
1804 verbose parsed url   query: null,
1804 verbose parsed url   pathname: 'dateformat@1.0.2-1.2.3',
1804 verbose parsed url   path: 'dateformat@1.0.2-1.2.3',
1804 verbose parsed url   href: 'dateformat@1.0.2-1.2.3' }
1805 verbose readDependencies using package.json deps
1806 verbose cache add [ 'lodash@0.9.2', null ]
1807 verbose cache add name=undefined spec="lodash@0.9.2" args=["lodash@0.9.2",null]
1808 verbose parsed url { protocol: null,
1808 verbose parsed url   slashes: null,
1808 verbose parsed url   auth: null,
1808 verbose parsed url   host: null,
1808 verbose parsed url   port: null,
1808 verbose parsed url   hostname: null,
1808 verbose parsed url   hash: null,
1808 verbose parsed url   search: null,
1808 verbose parsed url   query: null,
1808 verbose parsed url   pathname: 'lodash@0.9.2',
1808 verbose parsed url   path: 'lodash@0.9.2',
1808 verbose parsed url   href: 'lodash@0.9.2' }
1809 verbose readDependencies using package.json deps
1810 verbose cache add [ 'nopt@1.0.10', null ]
1811 verbose cache add name=undefined spec="nopt@1.0.10" args=["nopt@1.0.10",null]
1812 verbose parsed url { protocol: null,
1812 verbose parsed url   slashes: null,
1812 verbose parsed url   auth: null,
1812 verbose parsed url   host: null,
1812 verbose parsed url   port: null,
1812 verbose parsed url   hostname: null,
1812 verbose parsed url   hash: null,
1812 verbose parsed url   search: null,
1812 verbose parsed url   query: null,
1812 verbose parsed url   pathname: 'nopt@1.0.10',
1812 verbose parsed url   path: 'nopt@1.0.10',
1812 verbose parsed url   href: 'nopt@1.0.10' }
1813 verbose readDependencies using package.json deps
1814 verbose cache add [ 'minimatch@0.2.14', null ]
1815 verbose cache add name=undefined spec="minimatch@0.2.14" args=["minimatch@0.2.14",null]
1816 verbose parsed url { protocol: null,
1816 verbose parsed url   slashes: null,
1816 verbose parsed url   auth: null,
1816 verbose parsed url   host: null,
1816 verbose parsed url   port: null,
1816 verbose parsed url   hostname: null,
1816 verbose parsed url   hash: null,
1816 verbose parsed url   search: null,
1816 verbose parsed url   query: null,
1816 verbose parsed url   pathname: 'minimatch@0.2.14',
1816 verbose parsed url   path: 'minimatch@0.2.14',
1816 verbose parsed url   href: 'minimatch@0.2.14' }
1817 verbose readDependencies using package.json deps
1818 verbose cache add [ 'glob@3.1.21', null ]
1819 verbose cache add name=undefined spec="glob@3.1.21" args=["glob@3.1.21",null]
1820 verbose parsed url { protocol: null,
1820 verbose parsed url   slashes: null,
1820 verbose parsed url   auth: null,
1820 verbose parsed url   host: null,
1820 verbose parsed url   port: null,
1820 verbose parsed url   hostname: null,
1820 verbose parsed url   hash: null,
1820 verbose parsed url   search: null,
1820 verbose parsed url   query: null,
1820 verbose parsed url   pathname: 'glob@3.1.21',
1820 verbose parsed url   path: 'glob@3.1.21',
1820 verbose parsed url   href: 'glob@3.1.21' }
1821 verbose readDependencies using package.json deps
1822 verbose cache add [ 'iconv-lite@0.2.11', null ]
1823 verbose cache add name=undefined spec="iconv-lite@0.2.11" args=["iconv-lite@0.2.11",null]
1824 verbose parsed url { protocol: null,
1824 verbose parsed url   slashes: null,
1824 verbose parsed url   auth: null,
1824 verbose parsed url   host: null,
1824 verbose parsed url   port: null,
1824 verbose parsed url   hostname: null,
1824 verbose parsed url   hash: null,
1824 verbose parsed url   search: null,
1824 verbose parsed url   query: null,
1824 verbose parsed url   pathname: 'iconv-lite@0.2.11',
1824 verbose parsed url   path: 'iconv-lite@0.2.11',
1824 verbose parsed url   href: 'iconv-lite@0.2.11' }
1825 verbose readDependencies using package.json deps
1826 verbose cache add [ 'underscore.string@2.2.1', null ]
1827 verbose cache add name=undefined spec="underscore.string@2.2.1" args=["underscore.string@2.2.1",null]
1828 verbose parsed url { protocol: null,
1828 verbose parsed url   slashes: null,
1828 verbose parsed url   auth: null,
1828 verbose parsed url   host: null,
1828 verbose parsed url   port: null,
1828 verbose parsed url   hostname: null,
1828 verbose parsed url   hash: null,
1828 verbose parsed url   search: null,
1828 verbose parsed url   query: null,
1828 verbose parsed url   pathname: 'underscore.string@2.2.1',
1828 verbose parsed url   path: 'underscore.string@2.2.1',
1828 verbose parsed url   href: 'underscore.string@2.2.1' }
1829 verbose readDependencies using package.json deps
1830 verbose cache add [ 'async@0.1.22', null ]
1831 verbose cache add name=undefined spec="async@0.1.22" args=["async@0.1.22",null]
1832 verbose parsed url { protocol: null,
1832 verbose parsed url   slashes: null,
1832 verbose parsed url   auth: null,
1832 verbose parsed url   host: null,
1832 verbose parsed url   port: null,
1832 verbose parsed url   hostname: null,
1832 verbose parsed url   hash: null,
1832 verbose parsed url   search: null,
1832 verbose parsed url   query: null,
1832 verbose parsed url   pathname: 'async@0.1.22',
1832 verbose parsed url   path: 'async@0.1.22',
1832 verbose parsed url   href: 'async@0.1.22' }
1833 verbose readDependencies using package.json deps
1834 verbose cache add [ 'lodash@0.9.2', null ]
1835 verbose cache add name=undefined spec="lodash@0.9.2" args=["lodash@0.9.2",null]
1836 verbose parsed url { protocol: null,
1836 verbose parsed url   slashes: null,
1836 verbose parsed url   auth: null,
1836 verbose parsed url   host: null,
1836 verbose parsed url   port: null,
1836 verbose parsed url   hostname: null,
1836 verbose parsed url   hash: null,
1836 verbose parsed url   search: null,
1836 verbose parsed url   query: null,
1836 verbose parsed url   pathname: 'lodash@0.9.2',
1836 verbose parsed url   path: 'lodash@0.9.2',
1836 verbose parsed url   href: 'lodash@0.9.2' }
1837 verbose readDependencies using package.json deps
1838 verbose cache add [ 'underscore.string@2.2.1', null ]
1839 verbose cache add name=undefined spec="underscore.string@2.2.1" args=["underscore.string@2.2.1",null]
1840 verbose parsed url { protocol: null,
1840 verbose parsed url   slashes: null,
1840 verbose parsed url   auth: null,
1840 verbose parsed url   host: null,
1840 verbose parsed url   port: null,
1840 verbose parsed url   hostname: null,
1840 verbose parsed url   hash: null,
1840 verbose parsed url   search: null,
1840 verbose parsed url   query: null,
1840 verbose parsed url   pathname: 'underscore.string@2.2.1',
1840 verbose parsed url   path: 'underscore.string@2.2.1',
1840 verbose parsed url   href: 'underscore.string@2.2.1' }
1841 verbose readDependencies using package.json deps
1842 verbose cache add [ 'js-yaml@2.0.5', null ]
1843 verbose cache add name=undefined spec="js-yaml@2.0.5" args=["js-yaml@2.0.5",null]
1844 verbose parsed url { protocol: null,
1844 verbose parsed url   slashes: null,
1844 verbose parsed url   auth: null,
1844 verbose parsed url   host: null,
1844 verbose parsed url   port: null,
1844 verbose parsed url   hostname: null,
1844 verbose parsed url   hash: null,
1844 verbose parsed url   search: null,
1844 verbose parsed url   query: null,
1844 verbose parsed url   pathname: 'js-yaml@2.0.5',
1844 verbose parsed url   path: 'js-yaml@2.0.5',
1844 verbose parsed url   href: 'js-yaml@2.0.5' }
1845 verbose readDependencies using package.json deps
1846 verbose cache add [ 'glob@3.2.11', null ]
1847 verbose cache add name=undefined spec="glob@3.2.11" args=["glob@3.2.11",null]
1848 verbose parsed url { protocol: null,
1848 verbose parsed url   slashes: null,
1848 verbose parsed url   auth: null,
1848 verbose parsed url   host: null,
1848 verbose parsed url   port: null,
1848 verbose parsed url   hostname: null,
1848 verbose parsed url   hash: null,
1848 verbose parsed url   search: null,
1848 verbose parsed url   query: null,
1848 verbose parsed url   pathname: 'glob@3.2.11',
1848 verbose parsed url   path: 'glob@3.2.11',
1848 verbose parsed url   href: 'glob@3.2.11' }
1849 verbose readDependencies using package.json deps
1850 verbose cache add [ 'forever-monitor@1.2.3', null ]
1851 verbose cache add name=undefined spec="forever-monitor@1.2.3" args=["forever-monitor@1.2.3",null]
1852 verbose parsed url { protocol: null,
1852 verbose parsed url   slashes: null,
1852 verbose parsed url   auth: null,
1852 verbose parsed url   host: null,
1852 verbose parsed url   port: null,
1852 verbose parsed url   hostname: null,
1852 verbose parsed url   hash: null,
1852 verbose parsed url   search: null,
1852 verbose parsed url   query: null,
1852 verbose parsed url   pathname: 'forever-monitor@1.2.3',
1852 verbose parsed url   path: 'forever-monitor@1.2.3',
1852 verbose parsed url   href: 'forever-monitor@1.2.3' }
1853 verbose readDependencies using package.json deps
1854 verbose cache add [ 'watch@0.8.0', null ]
1855 verbose cache add name=undefined spec="watch@0.8.0" args=["watch@0.8.0",null]
1856 verbose parsed url { protocol: null,
1856 verbose parsed url   slashes: null,
1856 verbose parsed url   auth: null,
1856 verbose parsed url   host: null,
1856 verbose parsed url   port: null,
1856 verbose parsed url   hostname: null,
1856 verbose parsed url   hash: null,
1856 verbose parsed url   search: null,
1856 verbose parsed url   query: null,
1856 verbose parsed url   pathname: 'watch@0.8.0',
1856 verbose parsed url   path: 'watch@0.8.0',
1856 verbose parsed url   href: 'watch@0.8.0' }
1857 verbose readDependencies using package.json deps
1858 verbose cache add [ 'winston@0.6.2', null ]
1859 verbose cache add name=undefined spec="winston@0.6.2" args=["winston@0.6.2",null]
1860 verbose parsed url { protocol: null,
1860 verbose parsed url   slashes: null,
1860 verbose parsed url   auth: null,
1860 verbose parsed url   host: null,
1860 verbose parsed url   port: null,
1860 verbose parsed url   hostname: null,
1860 verbose parsed url   hash: null,
1860 verbose parsed url   search: null,
1860 verbose parsed url   query: null,
1860 verbose parsed url   pathname: 'winston@0.6.2',
1860 verbose parsed url   path: 'winston@0.6.2',
1860 verbose parsed url   href: 'winston@0.6.2' }
1861 verbose readDependencies using package.json deps
1862 verbose cache add [ 'async@0.2.9', null ]
1863 verbose cache add name=undefined spec="async@0.2.9" args=["async@0.2.9",null]
1864 verbose parsed url { protocol: null,
1864 verbose parsed url   slashes: null,
1864 verbose parsed url   auth: null,
1864 verbose parsed url   host: null,
1864 verbose parsed url   port: null,
1864 verbose parsed url   hostname: null,
1864 verbose parsed url   hash: null,
1864 verbose parsed url   search: null,
1864 verbose parsed url   query: null,
1864 verbose parsed url   pathname: 'async@0.2.9',
1864 verbose parsed url   path: 'async@0.2.9',
1864 verbose parsed url   href: 'async@0.2.9' }
1865 verbose readDependencies using package.json deps
1866 verbose cache add [ 'optimist@0.6.0', null ]
1867 verbose cache add name=undefined spec="optimist@0.6.0" args=["optimist@0.6.0",null]
1868 verbose parsed url { protocol: null,
1868 verbose parsed url   slashes: null,
1868 verbose parsed url   auth: null,
1868 verbose parsed url   host: null,
1868 verbose parsed url   port: null,
1868 verbose parsed url   hostname: null,
1868 verbose parsed url   hash: null,
1868 verbose parsed url   search: null,
1868 verbose parsed url   query: null,
1868 verbose parsed url   pathname: 'optimist@0.6.0',
1868 verbose parsed url   path: 'optimist@0.6.0',
1868 verbose parsed url   href: 'optimist@0.6.0' }
1869 verbose readDependencies using package.json deps
1870 verbose cache add [ 'prompt@0.2.11', null ]
1871 verbose cache add name=undefined spec="prompt@0.2.11" args=["prompt@0.2.11",null]
1872 verbose parsed url { protocol: null,
1872 verbose parsed url   slashes: null,
1872 verbose parsed url   auth: null,
1872 verbose parsed url   host: null,
1872 verbose parsed url   port: null,
1872 verbose parsed url   hostname: null,
1872 verbose parsed url   hash: null,
1872 verbose parsed url   search: null,
1872 verbose parsed url   query: null,
1872 verbose parsed url   pathname: 'prompt@0.2.11',
1872 verbose parsed url   path: 'prompt@0.2.11',
1872 verbose parsed url   href: 'prompt@0.2.11' }
1873 verbose readDependencies using package.json deps
1874 verbose cache add [ 'eventemitter2@0.4.12', null ]
1875 verbose cache add name=undefined spec="eventemitter2@0.4.12" args=["eventemitter2@0.4.12",null]
1876 verbose parsed url { protocol: null,
1876 verbose parsed url   slashes: null,
1876 verbose parsed url   auth: null,
1876 verbose parsed url   host: null,
1876 verbose parsed url   port: null,
1876 verbose parsed url   hostname: null,
1876 verbose parsed url   hash: null,
1876 verbose parsed url   search: null,
1876 verbose parsed url   query: null,
1876 verbose parsed url   pathname: 'eventemitter2@0.4.12',
1876 verbose parsed url   path: 'eventemitter2@0.4.12',
1876 verbose parsed url   href: 'eventemitter2@0.4.12' }
1877 verbose readDependencies using package.json deps
1878 verbose cache add [ 'winston@0.7.2', null ]
1879 verbose cache add name=undefined spec="winston@0.7.2" args=["winston@0.7.2",null]
1880 verbose parsed url { protocol: null,
1880 verbose parsed url   slashes: null,
1880 verbose parsed url   auth: null,
1880 verbose parsed url   host: null,
1880 verbose parsed url   port: null,
1880 verbose parsed url   hostname: null,
1880 verbose parsed url   hash: null,
1880 verbose parsed url   search: null,
1880 verbose parsed url   query: null,
1880 verbose parsed url   pathname: 'winston@0.7.2',
1880 verbose parsed url   path: 'winston@0.7.2',
1880 verbose parsed url   href: 'winston@0.7.2' }
1881 verbose readDependencies using package.json deps
1882 verbose cache add [ 'optimist@0.6.0', null ]
1883 verbose cache add name=undefined spec="optimist@0.6.0" args=["optimist@0.6.0",null]
1884 verbose parsed url { protocol: null,
1884 verbose parsed url   slashes: null,
1884 verbose parsed url   auth: null,
1884 verbose parsed url   host: null,
1884 verbose parsed url   port: null,
1884 verbose parsed url   hostname: null,
1884 verbose parsed url   hash: null,
1884 verbose parsed url   search: null,
1884 verbose parsed url   query: null,
1884 verbose parsed url   pathname: 'optimist@0.6.0',
1884 verbose parsed url   path: 'optimist@0.6.0',
1884 verbose parsed url   href: 'optimist@0.6.0' }
1885 verbose readDependencies using package.json deps
1886 verbose cache add [ 'director@1.1.10', null ]
1887 verbose cache add name=undefined spec="director@1.1.10" args=["director@1.1.10",null]
1888 verbose parsed url { protocol: null,
1888 verbose parsed url   slashes: null,
1888 verbose parsed url   auth: null,
1888 verbose parsed url   host: null,
1888 verbose parsed url   port: null,
1888 verbose parsed url   hostname: null,
1888 verbose parsed url   hash: null,
1888 verbose parsed url   search: null,
1888 verbose parsed url   query: null,
1888 verbose parsed url   pathname: 'director@1.1.10',
1888 verbose parsed url   path: 'director@1.1.10',
1888 verbose parsed url   href: 'director@1.1.10' }
1889 verbose readDependencies using package.json deps
1890 verbose cache add [ 'minimist@0.0.10', null ]
1891 verbose cache add name=undefined spec="minimist@0.0.10" args=["minimist@0.0.10",null]
1892 verbose parsed url { protocol: null,
1892 verbose parsed url   slashes: null,
1892 verbose parsed url   auth: null,
1892 verbose parsed url   host: null,
1892 verbose parsed url   port: null,
1892 verbose parsed url   hostname: null,
1892 verbose parsed url   hash: null,
1892 verbose parsed url   search: null,
1892 verbose parsed url   query: null,
1892 verbose parsed url   pathname: 'minimist@0.0.10',
1892 verbose parsed url   path: 'minimist@0.0.10',
1892 verbose parsed url   href: 'minimist@0.0.10' }
1893 verbose readDependencies using package.json deps
1894 verbose cache add [ 'async@0.2.10', null ]
1895 verbose cache add name=undefined spec="async@0.2.10" args=["async@0.2.10",null]
1896 verbose parsed url { protocol: null,
1896 verbose parsed url   slashes: null,
1896 verbose parsed url   auth: null,
1896 verbose parsed url   host: null,
1896 verbose parsed url   port: null,
1896 verbose parsed url   hostname: null,
1896 verbose parsed url   hash: null,
1896 verbose parsed url   search: null,
1896 verbose parsed url   query: null,
1896 verbose parsed url   pathname: 'async@0.2.10',
1896 verbose parsed url   path: 'async@0.2.10',
1896 verbose parsed url   href: 'async@0.2.10' }
1897 verbose readDependencies using package.json deps
1898 verbose cache add [ 'minimist@0.0.8', null ]
1899 verbose cache add name=undefined spec="minimist@0.0.8" args=["minimist@0.0.8",null]
1900 verbose parsed url { protocol: null,
1900 verbose parsed url   slashes: null,
1900 verbose parsed url   auth: null,
1900 verbose parsed url   host: null,
1900 verbose parsed url   port: null,
1900 verbose parsed url   hostname: null,
1900 verbose parsed url   hash: null,
1900 verbose parsed url   search: null,
1900 verbose parsed url   query: null,
1900 verbose parsed url   pathname: 'minimist@0.0.8',
1900 verbose parsed url   path: 'minimist@0.0.8',
1900 verbose parsed url   href: 'minimist@0.0.8' }
1901 verbose readDependencies using package.json deps
1902 verbose cache add [ 'ncp@0.4.2', null ]
1903 verbose cache add name=undefined spec="ncp@0.4.2" args=["ncp@0.4.2",null]
1904 verbose parsed url { protocol: null,
1904 verbose parsed url   slashes: null,
1904 verbose parsed url   auth: null,
1904 verbose parsed url   host: null,
1904 verbose parsed url   port: null,
1904 verbose parsed url   hostname: null,
1904 verbose parsed url   hash: null,
1904 verbose parsed url   search: null,
1904 verbose parsed url   query: null,
1904 verbose parsed url   pathname: 'ncp@0.4.2',
1904 verbose parsed url   path: 'ncp@0.4.2',
1904 verbose parsed url   href: 'ncp@0.4.2' }
1905 verbose readDependencies using package.json deps
1906 verbose cache add [ 'async@0.2.10', null ]
1907 verbose cache add name=undefined spec="async@0.2.10" args=["async@0.2.10",null]
1908 verbose parsed url { protocol: null,
1908 verbose parsed url   slashes: null,
1908 verbose parsed url   auth: null,
1908 verbose parsed url   host: null,
1908 verbose parsed url   port: null,
1908 verbose parsed url   hostname: null,
1908 verbose parsed url   hash: null,
1908 verbose parsed url   search: null,
1908 verbose parsed url   query: null,
1908 verbose parsed url   pathname: 'async@0.2.10',
1908 verbose parsed url   path: 'async@0.2.10',
1908 verbose parsed url   href: 'async@0.2.10' }
1909 verbose readDependencies using package.json deps
1910 verbose cache add [ 'request@2.16.6', null ]
1911 verbose cache add name=undefined spec="request@2.16.6" args=["request@2.16.6",null]
1912 verbose parsed url { protocol: null,
1912 verbose parsed url   slashes: null,
1912 verbose parsed url   auth: null,
1912 verbose parsed url   host: null,
1912 verbose parsed url   port: null,
1912 verbose parsed url   hostname: null,
1912 verbose parsed url   hash: null,
1912 verbose parsed url   search: null,
1912 verbose parsed url   query: null,
1912 verbose parsed url   pathname: 'request@2.16.6',
1912 verbose parsed url   path: 'request@2.16.6',
1912 verbose parsed url   href: 'request@2.16.6' }
1913 verbose readDependencies using package.json deps
1914 verbose cache add [ 'async@0.8.0', null ]
1915 verbose cache add name=undefined spec="async@0.8.0" args=["async@0.8.0",null]
1916 verbose parsed url { protocol: null,
1916 verbose parsed url   slashes: null,
1916 verbose parsed url   auth: null,
1916 verbose parsed url   host: null,
1916 verbose parsed url   port: null,
1916 verbose parsed url   hostname: null,
1916 verbose parsed url   hash: null,
1916 verbose parsed url   search: null,
1916 verbose parsed url   query: null,
1916 verbose parsed url   pathname: 'async@0.8.0',
1916 verbose parsed url   path: 'async@0.8.0',
1916 verbose parsed url   href: 'async@0.8.0' }
1917 verbose readDependencies using package.json deps
1918 verbose cache add [ 'glob@3.2.11', null ]
1919 verbose cache add name=undefined spec="glob@3.2.11" args=["glob@3.2.11",null]
1920 verbose parsed url { protocol: null,
1920 verbose parsed url   slashes: null,
1920 verbose parsed url   auth: null,
1920 verbose parsed url   host: null,
1920 verbose parsed url   port: null,
1920 verbose parsed url   hostname: null,
1920 verbose parsed url   hash: null,
1920 verbose parsed url   search: null,
1920 verbose parsed url   query: null,
1920 verbose parsed url   pathname: 'glob@3.2.11',
1920 verbose parsed url   path: 'glob@3.2.11',
1920 verbose parsed url   href: 'glob@3.2.11' }
1921 verbose readDependencies using package.json deps
1922 verbose cache add [ 'debug@0.8.1', null ]
1923 verbose cache add name=undefined spec="debug@0.8.1" args=["debug@0.8.1",null]
1924 verbose parsed url { protocol: null,
1924 verbose parsed url   slashes: null,
1924 verbose parsed url   auth: null,
1924 verbose parsed url   host: null,
1924 verbose parsed url   port: null,
1924 verbose parsed url   hostname: null,
1924 verbose parsed url   hash: null,
1924 verbose parsed url   search: null,
1924 verbose parsed url   query: null,
1924 verbose parsed url   pathname: 'debug@0.8.1',
1924 verbose parsed url   path: 'debug@0.8.1',
1924 verbose parsed url   href: 'debug@0.8.1' }
1925 verbose readDependencies using package.json deps
1926 verbose cache add [ 'rc@0.3.5', null ]
1927 verbose cache add name=undefined spec="rc@0.3.5" args=["rc@0.3.5",null]
1928 verbose parsed url { protocol: null,
1928 verbose parsed url   slashes: null,
1928 verbose parsed url   auth: null,
1928 verbose parsed url   host: null,
1928 verbose parsed url   port: null,
1928 verbose parsed url   hostname: null,
1928 verbose parsed url   hash: null,
1928 verbose parsed url   search: null,
1928 verbose parsed url   query: null,
1928 verbose parsed url   pathname: 'rc@0.3.5',
1928 verbose parsed url   path: 'rc@0.3.5',
1928 verbose parsed url   href: 'rc@0.3.5' }
1929 verbose readDependencies using package.json deps
1930 verbose cache add [ 'yargs@1.2.6', null ]
1931 verbose cache add name=undefined spec="yargs@1.2.6" args=["yargs@1.2.6",null]
1932 verbose parsed url { protocol: null,
1932 verbose parsed url   slashes: null,
1932 verbose parsed url   auth: null,
1932 verbose parsed url   host: null,
1932 verbose parsed url   port: null,
1932 verbose parsed url   hostname: null,
1932 verbose parsed url   hash: null,
1932 verbose parsed url   search: null,
1932 verbose parsed url   query: null,
1932 verbose parsed url   pathname: 'yargs@1.2.6',
1932 verbose parsed url   path: 'yargs@1.2.6',
1932 verbose parsed url   href: 'yargs@1.2.6' }
1933 verbose readDependencies using package.json deps
1934 verbose cache add [ 'express@4.0.0', null ]
1935 verbose cache add name=undefined spec="express@4.0.0" args=["express@4.0.0",null]
1936 verbose parsed url { protocol: null,
1936 verbose parsed url   slashes: null,
1936 verbose parsed url   auth: null,
1936 verbose parsed url   host: null,
1936 verbose parsed url   port: null,
1936 verbose parsed url   hostname: null,
1936 verbose parsed url   hash: null,
1936 verbose parsed url   search: null,
1936 verbose parsed url   query: null,
1936 verbose parsed url   pathname: 'express@4.0.0',
1936 verbose parsed url   path: 'express@4.0.0',
1936 verbose parsed url   href: 'express@4.0.0' }
1937 verbose readDependencies using package.json deps
1938 verbose cache add [ 'commander@0.6.1', null ]
1939 verbose cache add name=undefined spec="commander@0.6.1" args=["commander@0.6.1",null]
1940 verbose parsed url { protocol: null,
1940 verbose parsed url   slashes: null,
1940 verbose parsed url   auth: null,
1940 verbose parsed url   host: null,
1940 verbose parsed url   port: null,
1940 verbose parsed url   hostname: null,
1940 verbose parsed url   hash: null,
1940 verbose parsed url   search: null,
1940 verbose parsed url   query: null,
1940 verbose parsed url   pathname: 'commander@0.6.1',
1940 verbose parsed url   path: 'commander@0.6.1',
1940 verbose parsed url   href: 'commander@0.6.1' }
1941 verbose readDependencies using package.json deps
1942 verbose cache add [ 'nan@0.3.2', null ]
1943 verbose cache add name=undefined spec="nan@0.3.2" args=["nan@0.3.2",null]
1944 verbose parsed url { protocol: null,
1944 verbose parsed url   slashes: null,
1944 verbose parsed url   auth: null,
1944 verbose parsed url   host: null,
1944 verbose parsed url   port: null,
1944 verbose parsed url   hostname: null,
1944 verbose parsed url   hash: null,
1944 verbose parsed url   search: null,
1944 verbose parsed url   query: null,
1944 verbose parsed url   pathname: 'nan@0.3.2',
1944 verbose parsed url   path: 'nan@0.3.2',
1944 verbose parsed url   href: 'nan@0.3.2' }
1945 verbose cache add name="yeoman-generator" spec="0.15.0" args=["yeoman-generator","0.15.0"]
1946 verbose parsed url { protocol: null,
1946 verbose parsed url   slashes: null,
1946 verbose parsed url   auth: null,
1946 verbose parsed url   host: null,
1946 verbose parsed url   port: null,
1946 verbose parsed url   hostname: null,
1946 verbose parsed url   hash: null,
1946 verbose parsed url   search: null,
1946 verbose parsed url   query: null,
1946 verbose parsed url   pathname: '0.15.0',
1946 verbose parsed url   path: '0.15.0',
1946 verbose parsed url   href: '0.15.0' }
1947 verbose addNamed [ 'yeoman-generator', '0.15.0' ]
1948 verbose addNamed [ '0.15.0', '0.15.0' ]
1949 verbose cache add name="mkdirp" spec="0.3.5" args=["mkdirp","0.3.5"]
1950 verbose parsed url { protocol: null,
1950 verbose parsed url   slashes: null,
1950 verbose parsed url   auth: null,
1950 verbose parsed url   host: null,
1950 verbose parsed url   port: null,
1950 verbose parsed url   hostname: null,
1950 verbose parsed url   hash: null,
1950 verbose parsed url   search: null,
1950 verbose parsed url   query: null,
1950 verbose parsed url   pathname: '0.3.5',
1950 verbose parsed url   path: '0.3.5',
1950 verbose parsed url   href: '0.3.5' }
1951 verbose addNamed [ 'mkdirp', '0.3.5' ]
1952 verbose addNamed [ '0.3.5', '0.3.5' ]
1953 verbose cache add name="chai" spec="1.7.2" args=["chai","1.7.2"]
1954 verbose parsed url { protocol: null,
1954 verbose parsed url   slashes: null,
1954 verbose parsed url   auth: null,
1954 verbose parsed url   host: null,
1954 verbose parsed url   port: null,
1954 verbose parsed url   hostname: null,
1954 verbose parsed url   hash: null,
1954 verbose parsed url   search: null,
1954 verbose parsed url   query: null,
1954 verbose parsed url   pathname: '1.7.2',
1954 verbose parsed url   path: '1.7.2',
1954 verbose parsed url   href: '1.7.2' }
1955 verbose addNamed [ 'chai', '1.7.2' ]
1956 verbose addNamed [ '1.7.2', '1.7.2' ]
1957 verbose cache add name="sinon-chai" spec="2.4.0" args=["sinon-chai","2.4.0"]
1958 verbose parsed url { protocol: null,
1958 verbose parsed url   slashes: null,
1958 verbose parsed url   auth: null,
1958 verbose parsed url   host: null,
1958 verbose parsed url   port: null,
1958 verbose parsed url   hostname: null,
1958 verbose parsed url   hash: null,
1958 verbose parsed url   search: null,
1958 verbose parsed url   query: null,
1958 verbose parsed url   pathname: '2.4.0',
1958 verbose parsed url   path: '2.4.0',
1958 verbose parsed url   href: '2.4.0' }
1959 verbose addNamed [ 'sinon-chai', '2.4.0' ]
1960 verbose addNamed [ '2.4.0', '2.4.0' ]
1961 verbose cache add name="mocha" spec="1.11.0" args=["mocha","1.11.0"]
1962 verbose parsed url { protocol: null,
1962 verbose parsed url   slashes: null,
1962 verbose parsed url   auth: null,
1962 verbose parsed url   host: null,
1962 verbose parsed url   port: null,
1962 verbose parsed url   hostname: null,
1962 verbose parsed url   hash: null,
1962 verbose parsed url   search: null,
1962 verbose parsed url   query: null,
1962 verbose parsed url   pathname: '1.11.0',
1962 verbose parsed url   path: '1.11.0',
1962 verbose parsed url   href: '1.11.0' }
1963 verbose addNamed [ 'mocha', '1.11.0' ]
1964 verbose addNamed [ '1.11.0', '1.11.0' ]
1965 verbose cache add name="express" spec="3.2.6" args=["express","3.2.6"]
1966 verbose parsed url { protocol: null,
1966 verbose parsed url   slashes: null,
1966 verbose parsed url   auth: null,
1966 verbose parsed url   host: null,
1966 verbose parsed url   port: null,
1966 verbose parsed url   hostname: null,
1966 verbose parsed url   hash: null,
1966 verbose parsed url   search: null,
1966 verbose parsed url   query: null,
1966 verbose parsed url   pathname: '3.2.6',
1966 verbose parsed url   path: '3.2.6',
1966 verbose parsed url   href: '3.2.6' }
1967 verbose addNamed [ 'express', '3.2.6' ]
1968 verbose addNamed [ '3.2.6', '3.2.6' ]
1969 verbose cache add name="tap" spec="0.4.12" args=["tap","0.4.12"]
1970 verbose parsed url { protocol: null,
1970 verbose parsed url   slashes: null,
1970 verbose parsed url   auth: null,
1970 verbose parsed url   host: null,
1970 verbose parsed url   port: null,
1970 verbose parsed url   hostname: null,
1970 verbose parsed url   hash: null,
1970 verbose parsed url   search: null,
1970 verbose parsed url   query: null,
1970 verbose parsed url   pathname: '0.4.12',
1970 verbose parsed url   path: '0.4.12',
1970 verbose parsed url   href: '0.4.12' }
1971 verbose addNamed [ 'tap', '0.4.12' ]
1972 verbose addNamed [ '0.4.12', '0.4.12' ]
1973 verbose cache add name="socket.io" spec="0.9.13" args=["socket.io","0.9.13"]
1974 verbose parsed url { protocol: null,
1974 verbose parsed url   slashes: null,
1974 verbose parsed url   auth: null,
1974 verbose parsed url   host: null,
1974 verbose parsed url   port: null,
1974 verbose parsed url   hostname: null,
1974 verbose parsed url   hash: null,
1974 verbose parsed url   search: null,
1974 verbose parsed url   query: null,
1974 verbose parsed url   pathname: '0.9.13',
1974 verbose parsed url   path: '0.9.13',
1974 verbose parsed url   href: '0.9.13' }
1975 verbose addNamed [ 'socket.io', '0.9.13' ]
1976 verbose addNamed [ '0.9.13', '0.9.13' ]
1977 verbose cache add name="pty.js" spec="0.2.3" args=["pty.js","0.2.3"]
1978 verbose parsed url { protocol: null,
1978 verbose parsed url   slashes: null,
1978 verbose parsed url   auth: null,
1978 verbose parsed url   host: null,
1978 verbose parsed url   port: null,
1978 verbose parsed url   hostname: null,
1978 verbose parsed url   hash: null,
1978 verbose parsed url   search: null,
1978 verbose parsed url   query: null,
1978 verbose parsed url   pathname: '0.2.3',
1978 verbose parsed url   path: '0.2.3',
1978 verbose parsed url   href: '0.2.3' }
1979 verbose addNamed [ 'pty.js', '0.2.3' ]
1980 verbose addNamed [ '0.2.3', '0.2.3' ]
1981 verbose cache add name="term.js" spec="0.0.3" args=["term.js","0.0.3"]
1982 verbose parsed url { protocol: null,
1982 verbose parsed url   slashes: null,
1982 verbose parsed url   auth: null,
1982 verbose parsed url   host: null,
1982 verbose parsed url   port: null,
1982 verbose parsed url   hostname: null,
1982 verbose parsed url   hash: null,
1982 verbose parsed url   search: null,
1982 verbose parsed url   query: null,
1982 verbose parsed url   pathname: '0.0.3',
1982 verbose parsed url   path: '0.0.3',
1982 verbose parsed url   href: '0.0.3' }
1983 verbose addNamed [ 'term.js', '0.0.3' ]
1984 verbose addNamed [ '0.0.3', '0.0.3' ]
1985 verbose cache add name="express" spec="3.1.0" args=["express","3.1.0"]
1986 verbose parsed url { protocol: null,
1986 verbose parsed url   slashes: null,
1986 verbose parsed url   auth: null,
1986 verbose parsed url   host: null,
1986 verbose parsed url   port: null,
1986 verbose parsed url   hostname: null,
1986 verbose parsed url   hash: null,
1986 verbose parsed url   search: null,
1986 verbose parsed url   query: null,
1986 verbose parsed url   pathname: '3.1.0',
1986 verbose parsed url   path: '3.1.0',
1986 verbose parsed url   href: '3.1.0' }
1987 verbose addNamed [ 'express', '3.1.0' ]
1988 verbose addNamed [ '3.1.0', '3.1.0' ]
1989 verbose cache add name="mkdirp" spec="0.3.5" args=["mkdirp","0.3.5"]
1990 verbose parsed url { protocol: null,
1990 verbose parsed url   slashes: null,
1990 verbose parsed url   auth: null,
1990 verbose parsed url   host: null,
1990 verbose parsed url   port: null,
1990 verbose parsed url   hostname: null,
1990 verbose parsed url   hash: null,
1990 verbose parsed url   search: null,
1990 verbose parsed url   query: null,
1990 verbose parsed url   pathname: '0.3.5',
1990 verbose parsed url   path: '0.3.5',
1990 verbose parsed url   href: '0.3.5' }
1991 verbose addNamed [ 'mkdirp', '0.3.5' ]
1992 verbose cache add name="commander" spec="1.3.2" args=["commander","1.3.2"]
1993 verbose parsed url { protocol: null,
1993 verbose parsed url   slashes: null,
1993 verbose parsed url   auth: null,
1993 verbose parsed url   host: null,
1993 verbose parsed url   port: null,
1993 verbose parsed url   hostname: null,
1993 verbose parsed url   hash: null,
1993 verbose parsed url   search: null,
1993 verbose parsed url   query: null,
1993 verbose parsed url   pathname: '1.3.2',
1993 verbose parsed url   path: '1.3.2',
1993 verbose parsed url   href: '1.3.2' }
1994 verbose addNamed [ 'commander', '1.3.2' ]
1995 verbose addNamed [ '1.3.2', '1.3.2' ]
1996 verbose cache add name="prompt" spec="0.1.12" args=["prompt","0.1.12"]
1997 verbose parsed url { protocol: null,
1997 verbose parsed url   slashes: null,
1997 verbose parsed url   auth: null,
1997 verbose parsed url   host: null,
1997 verbose parsed url   port: null,
1997 verbose parsed url   hostname: null,
1997 verbose parsed url   hash: null,
1997 verbose parsed url   search: null,
1997 verbose parsed url   query: null,
1997 verbose parsed url   pathname: '0.1.12',
1997 verbose parsed url   path: '0.1.12',
1997 verbose parsed url   href: '0.1.12' }
1998 verbose addNamed [ 'prompt', '0.1.12' ]
1999 verbose addNamed [ '0.1.12', '0.1.12' ]
2000 verbose cache add name="semver" spec="1.0.14" args=["semver","1.0.14"]
2001 verbose parsed url { protocol: null,
2001 verbose parsed url   slashes: null,
2001 verbose parsed url   auth: null,
2001 verbose parsed url   host: null,
2001 verbose parsed url   port: null,
2001 verbose parsed url   hostname: null,
2001 verbose parsed url   hash: null,
2001 verbose parsed url   search: null,
2001 verbose parsed url   query: null,
2001 verbose parsed url   pathname: '1.0.14',
2001 verbose parsed url   path: '1.0.14',
2001 verbose parsed url   href: '1.0.14' }
2002 verbose addNamed [ 'semver', '1.0.14' ]
2003 verbose addNamed [ '1.0.14', '1.0.14' ]
2004 verbose cache add name="async" spec="0.2.10" args=["async","0.2.10"]
2005 verbose parsed url { protocol: null,
2005 verbose parsed url   slashes: null,
2005 verbose parsed url   auth: null,
2005 verbose parsed url   host: null,
2005 verbose parsed url   port: null,
2005 verbose parsed url   hostname: null,
2005 verbose parsed url   hash: null,
2005 verbose parsed url   search: null,
2005 verbose parsed url   query: null,
2005 verbose parsed url   pathname: '0.2.10',
2005 verbose parsed url   path: '0.2.10',
2005 verbose parsed url   href: '0.2.10' }
2006 verbose addNamed [ 'async', '0.2.10' ]
2007 verbose addNamed [ '0.2.10', '0.2.10' ]
2008 verbose cache add name="coffee-script" spec="1.3.3" args=["coffee-script","1.3.3"]
2009 verbose parsed url { protocol: null,
2009 verbose parsed url   slashes: null,
2009 verbose parsed url   auth: null,
2009 verbose parsed url   host: null,
2009 verbose parsed url   port: null,
2009 verbose parsed url   hostname: null,
2009 verbose parsed url   hash: null,
2009 verbose parsed url   search: null,
2009 verbose parsed url   query: null,
2009 verbose parsed url   pathname: '1.3.3',
2009 verbose parsed url   path: '1.3.3',
2009 verbose parsed url   href: '1.3.3' }
2010 verbose addNamed [ 'coffee-script', '1.3.3' ]
2011 verbose addNamed [ '1.3.3', '1.3.3' ]
2012 verbose cache add name="async" spec="0.1.22" args=["async","0.1.22"]
2013 verbose parsed url { protocol: null,
2013 verbose parsed url   slashes: null,
2013 verbose parsed url   auth: null,
2013 verbose parsed url   host: null,
2013 verbose parsed url   port: null,
2013 verbose parsed url   hostname: null,
2013 verbose parsed url   hash: null,
2013 verbose parsed url   search: null,
2013 verbose parsed url   query: null,
2013 verbose parsed url   pathname: '0.1.22',
2013 verbose parsed url   path: '0.1.22',
2013 verbose parsed url   href: '0.1.22' }
2014 verbose addNamed [ 'async', '0.1.22' ]
2015 verbose addNamed [ '0.1.22', '0.1.22' ]
2016 verbose cache add name="dateformat" spec="1.0.2-1.2.3" args=["dateformat","1.0.2-1.2.3"]
2017 verbose parsed url { protocol: null,
2017 verbose parsed url   slashes: null,
2017 verbose parsed url   auth: null,
2017 verbose parsed url   host: null,
2017 verbose parsed url   port: null,
2017 verbose parsed url   hostname: null,
2017 verbose parsed url   hash: null,
2017 verbose parsed url   search: null,
2017 verbose parsed url   query: null,
2017 verbose parsed url   pathname: '1.0.2-1.2.3',
2017 verbose parsed url   path: '1.0.2-1.2.3',
2017 verbose parsed url   href: '1.0.2-1.2.3' }
2018 verbose addNamed [ 'dateformat', '1.0.2-1.2.3' ]
2019 verbose addNamed [ '1.0.2-1.2.3', '1.0.2-1.2.3' ]
2020 verbose cache add name="glob" spec="3.2.11" args=["glob","3.2.11"]
2021 verbose parsed url { protocol: null,
2021 verbose parsed url   slashes: null,
2021 verbose parsed url   auth: null,
2021 verbose parsed url   host: null,
2021 verbose parsed url   port: null,
2021 verbose parsed url   hostname: null,
2021 verbose parsed url   hash: null,
2021 verbose parsed url   search: null,
2021 verbose parsed url   query: null,
2021 verbose parsed url   pathname: '3.2.11',
2021 verbose parsed url   path: '3.2.11',
2021 verbose parsed url   href: '3.2.11' }
2022 verbose addNamed [ 'glob', '3.2.11' ]
2023 verbose addNamed [ '3.2.11', '3.2.11' ]
2024 verbose cache add name="iconv-lite" spec="0.2.11" args=["iconv-lite","0.2.11"]
2025 verbose parsed url { protocol: null,
2025 verbose parsed url   slashes: null,
2025 verbose parsed url   auth: null,
2025 verbose parsed url   host: null,
2025 verbose parsed url   port: null,
2025 verbose parsed url   hostname: null,
2025 verbose parsed url   hash: null,
2025 verbose parsed url   search: null,
2025 verbose parsed url   query: null,
2025 verbose parsed url   pathname: '0.2.11',
2025 verbose parsed url   path: '0.2.11',
2025 verbose parsed url   href: '0.2.11' }
2026 verbose addNamed [ 'iconv-lite', '0.2.11' ]
2027 verbose addNamed [ '0.2.11', '0.2.11' ]
2028 verbose cache add name="nopt" spec="1.0.10" args=["nopt","1.0.10"]
2029 verbose parsed url { protocol: null,
2029 verbose parsed url   slashes: null,
2029 verbose parsed url   auth: null,
2029 verbose parsed url   host: null,
2029 verbose parsed url   port: null,
2029 verbose parsed url   hostname: null,
2029 verbose parsed url   hash: null,
2029 verbose parsed url   search: null,
2029 verbose parsed url   query: null,
2029 verbose parsed url   pathname: '1.0.10',
2029 verbose parsed url   path: '1.0.10',
2029 verbose parsed url   href: '1.0.10' }
2030 verbose addNamed [ 'nopt', '1.0.10' ]
2031 verbose addNamed [ '1.0.10', '1.0.10' ]
2032 verbose cache add name="minimatch" spec="0.2.14" args=["minimatch","0.2.14"]
2033 verbose parsed url { protocol: null,
2033 verbose parsed url   slashes: null,
2033 verbose parsed url   auth: null,
2033 verbose parsed url   host: null,
2033 verbose parsed url   port: null,
2033 verbose parsed url   hostname: null,
2033 verbose parsed url   hash: null,
2033 verbose parsed url   search: null,
2033 verbose parsed url   query: null,
2033 verbose parsed url   pathname: '0.2.14',
2033 verbose parsed url   path: '0.2.14',
2033 verbose parsed url   href: '0.2.14' }
2034 verbose addNamed [ 'minimatch', '0.2.14' ]
2035 verbose addNamed [ '0.2.14', '0.2.14' ]
2036 verbose cache add name="glob" spec="3.1.21" args=["glob","3.1.21"]
2037 verbose parsed url { protocol: null,
2037 verbose parsed url   slashes: null,
2037 verbose parsed url   auth: null,
2037 verbose parsed url   host: null,
2037 verbose parsed url   port: null,
2037 verbose parsed url   hostname: null,
2037 verbose parsed url   hash: null,
2037 verbose parsed url   search: null,
2037 verbose parsed url   query: null,
2037 verbose parsed url   pathname: '3.1.21',
2037 verbose parsed url   path: '3.1.21',
2037 verbose parsed url   href: '3.1.21' }
2038 verbose addNamed [ 'glob', '3.1.21' ]
2039 verbose addNamed [ '3.1.21', '3.1.21' ]
2040 verbose cache add name="underscore.string" spec="2.2.1" args=["underscore.string","2.2.1"]
2041 verbose parsed url { protocol: null,
2041 verbose parsed url   slashes: null,
2041 verbose parsed url   auth: null,
2041 verbose parsed url   host: null,
2041 verbose parsed url   port: null,
2041 verbose parsed url   hostname: null,
2041 verbose parsed url   hash: null,
2041 verbose parsed url   search: null,
2041 verbose parsed url   query: null,
2041 verbose parsed url   pathname: '2.2.1',
2041 verbose parsed url   path: '2.2.1',
2041 verbose parsed url   href: '2.2.1' }
2042 verbose addNamed [ 'underscore.string', '2.2.1' ]
2043 verbose addNamed [ '2.2.1', '2.2.1' ]
2044 verbose cache add name="lodash" spec="0.9.2" args=["lodash","0.9.2"]
2045 verbose parsed url { protocol: null,
2045 verbose parsed url   slashes: null,
2045 verbose parsed url   auth: null,
2045 verbose parsed url   host: null,
2045 verbose parsed url   port: null,
2045 verbose parsed url   hostname: null,
2045 verbose parsed url   hash: null,
2045 verbose parsed url   search: null,
2045 verbose parsed url   query: null,
2045 verbose parsed url   pathname: '0.9.2',
2045 verbose parsed url   path: '0.9.2',
2045 verbose parsed url   href: '0.9.2' }
2046 verbose addNamed [ 'lodash', '0.9.2' ]
2047 verbose addNamed [ '0.9.2', '0.9.2' ]
2048 verbose cache add name="js-yaml" spec="2.0.5" args=["js-yaml","2.0.5"]
2049 verbose parsed url { protocol: null,
2049 verbose parsed url   slashes: null,
2049 verbose parsed url   auth: null,
2049 verbose parsed url   host: null,
2049 verbose parsed url   port: null,
2049 verbose parsed url   hostname: null,
2049 verbose parsed url   hash: null,
2049 verbose parsed url   search: null,
2049 verbose parsed url   query: null,
2049 verbose parsed url   pathname: '2.0.5',
2049 verbose parsed url   path: '2.0.5',
2049 verbose parsed url   href: '2.0.5' }
2050 verbose addNamed [ 'js-yaml', '2.0.5' ]
2051 verbose addNamed [ '2.0.5', '2.0.5' ]
2052 verbose cache add name="async" spec="0.1.22" args=["async","0.1.22"]
2053 verbose parsed url { protocol: null,
2053 verbose parsed url   slashes: null,
2053 verbose parsed url   auth: null,
2053 verbose parsed url   host: null,
2053 verbose parsed url   port: null,
2053 verbose parsed url   hostname: null,
2053 verbose parsed url   hash: null,
2053 verbose parsed url   search: null,
2053 verbose parsed url   query: null,
2053 verbose parsed url   pathname: '0.1.22',
2053 verbose parsed url   path: '0.1.22',
2053 verbose parsed url   href: '0.1.22' }
2054 verbose addNamed [ 'async', '0.1.22' ]
2055 verbose cache add name="lodash" spec="0.9.2" args=["lodash","0.9.2"]
2056 verbose parsed url { protocol: null,
2056 verbose parsed url   slashes: null,
2056 verbose parsed url   auth: null,
2056 verbose parsed url   host: null,
2056 verbose parsed url   port: null,
2056 verbose parsed url   hostname: null,
2056 verbose parsed url   hash: null,
2056 verbose parsed url   search: null,
2056 verbose parsed url   query: null,
2056 verbose parsed url   pathname: '0.9.2',
2056 verbose parsed url   path: '0.9.2',
2056 verbose parsed url   href: '0.9.2' }
2057 verbose addNamed [ 'lodash', '0.9.2' ]
2058 verbose cache add name="underscore.string" spec="2.2.1" args=["underscore.string","2.2.1"]
2059 verbose parsed url { protocol: null,
2059 verbose parsed url   slashes: null,
2059 verbose parsed url   auth: null,
2059 verbose parsed url   host: null,
2059 verbose parsed url   port: null,
2059 verbose parsed url   hostname: null,
2059 verbose parsed url   hash: null,
2059 verbose parsed url   search: null,
2059 verbose parsed url   query: null,
2059 verbose parsed url   pathname: '2.2.1',
2059 verbose parsed url   path: '2.2.1',
2059 verbose parsed url   href: '2.2.1' }
2060 verbose addNamed [ 'underscore.string', '2.2.1' ]
2061 verbose cache add name="nopt" spec="1.0.10" args=["nopt","1.0.10"]
2062 verbose parsed url { protocol: null,
2062 verbose parsed url   slashes: null,
2062 verbose parsed url   auth: null,
2062 verbose parsed url   host: null,
2062 verbose parsed url   port: null,
2062 verbose parsed url   hostname: null,
2062 verbose parsed url   hash: null,
2062 verbose parsed url   search: null,
2062 verbose parsed url   query: null,
2062 verbose parsed url   pathname: '1.0.10',
2062 verbose parsed url   path: '1.0.10',
2062 verbose parsed url   href: '1.0.10' }
2063 verbose addNamed [ 'nopt', '1.0.10' ]
2064 verbose cache add name="resolve" spec="0.3.1" args=["resolve","0.3.1"]
2065 verbose parsed url { protocol: null,
2065 verbose parsed url   slashes: null,
2065 verbose parsed url   auth: null,
2065 verbose parsed url   host: null,
2065 verbose parsed url   port: null,
2065 verbose parsed url   hostname: null,
2065 verbose parsed url   hash: null,
2065 verbose parsed url   search: null,
2065 verbose parsed url   query: null,
2065 verbose parsed url   pathname: '0.3.1',
2065 verbose parsed url   path: '0.3.1',
2065 verbose parsed url   href: '0.3.1' }
2066 verbose addNamed [ 'resolve', '0.3.1' ]
2067 verbose addNamed [ '0.3.1', '0.3.1' ]
2068 verbose cache add name="glob" spec="3.2.11" args=["glob","3.2.11"]
2069 verbose parsed url { protocol: null,
2069 verbose parsed url   slashes: null,
2069 verbose parsed url   auth: null,
2069 verbose parsed url   host: null,
2069 verbose parsed url   port: null,
2069 verbose parsed url   hostname: null,
2069 verbose parsed url   hash: null,
2069 verbose parsed url   search: null,
2069 verbose parsed url   query: null,
2069 verbose parsed url   pathname: '3.2.11',
2069 verbose parsed url   path: '3.2.11',
2069 verbose parsed url   href: '3.2.11' }
2070 verbose addNamed [ 'glob', '3.2.11' ]
2071 verbose cache add name="coffee-script" spec="1.3.3" args=["coffee-script","1.3.3"]
2072 verbose parsed url { protocol: null,
2072 verbose parsed url   slashes: null,
2072 verbose parsed url   auth: null,
2072 verbose parsed url   host: null,
2072 verbose parsed url   port: null,
2072 verbose parsed url   hostname: null,
2072 verbose parsed url   hash: null,
2072 verbose parsed url   search: null,
2072 verbose parsed url   query: null,
2072 verbose parsed url   pathname: '1.3.3',
2072 verbose parsed url   path: '1.3.3',
2072 verbose parsed url   href: '1.3.3' }
2073 verbose addNamed [ 'coffee-script', '1.3.3' ]
2074 verbose cache add name="async" spec="0.1.22" args=["async","0.1.22"]
2075 verbose parsed url { protocol: null,
2075 verbose parsed url   slashes: null,
2075 verbose parsed url   auth: null,
2075 verbose parsed url   host: null,
2075 verbose parsed url   port: null,
2075 verbose parsed url   hostname: null,
2075 verbose parsed url   hash: null,
2075 verbose parsed url   search: null,
2075 verbose parsed url   query: null,
2075 verbose parsed url   pathname: '0.1.22',
2075 verbose parsed url   path: '0.1.22',
2075 verbose parsed url   href: '0.1.22' }
2076 verbose addNamed [ 'async', '0.1.22' ]
2077 verbose cache add name="dateformat" spec="1.0.2-1.2.3" args=["dateformat","1.0.2-1.2.3"]
2078 verbose parsed url { protocol: null,
2078 verbose parsed url   slashes: null,
2078 verbose parsed url   auth: null,
2078 verbose parsed url   host: null,
2078 verbose parsed url   port: null,
2078 verbose parsed url   hostname: null,
2078 verbose parsed url   hash: null,
2078 verbose parsed url   search: null,
2078 verbose parsed url   query: null,
2078 verbose parsed url   pathname: '1.0.2-1.2.3',
2078 verbose parsed url   path: '1.0.2-1.2.3',
2078 verbose parsed url   href: '1.0.2-1.2.3' }
2079 verbose addNamed [ 'dateformat', '1.0.2-1.2.3' ]
2080 verbose cache add name="lodash" spec="0.9.2" args=["lodash","0.9.2"]
2081 verbose parsed url { protocol: null,
2081 verbose parsed url   slashes: null,
2081 verbose parsed url   auth: null,
2081 verbose parsed url   host: null,
2081 verbose parsed url   port: null,
2081 verbose parsed url   hostname: null,
2081 verbose parsed url   hash: null,
2081 verbose parsed url   search: null,
2081 verbose parsed url   query: null,
2081 verbose parsed url   pathname: '0.9.2',
2081 verbose parsed url   path: '0.9.2',
2081 verbose parsed url   href: '0.9.2' }
2082 verbose addNamed [ 'lodash', '0.9.2' ]
2083 verbose cache add name="nopt" spec="1.0.10" args=["nopt","1.0.10"]
2084 verbose parsed url { protocol: null,
2084 verbose parsed url   slashes: null,
2084 verbose parsed url   auth: null,
2084 verbose parsed url   host: null,
2084 verbose parsed url   port: null,
2084 verbose parsed url   hostname: null,
2084 verbose parsed url   hash: null,
2084 verbose parsed url   search: null,
2084 verbose parsed url   query: null,
2084 verbose parsed url   pathname: '1.0.10',
2084 verbose parsed url   path: '1.0.10',
2084 verbose parsed url   href: '1.0.10' }
2085 verbose addNamed [ 'nopt', '1.0.10' ]
2086 verbose cache add name="minimatch" spec="0.2.14" args=["minimatch","0.2.14"]
2087 verbose parsed url { protocol: null,
2087 verbose parsed url   slashes: null,
2087 verbose parsed url   auth: null,
2087 verbose parsed url   host: null,
2087 verbose parsed url   port: null,
2087 verbose parsed url   hostname: null,
2087 verbose parsed url   hash: null,
2087 verbose parsed url   search: null,
2087 verbose parsed url   query: null,
2087 verbose parsed url   pathname: '0.2.14',
2087 verbose parsed url   path: '0.2.14',
2087 verbose parsed url   href: '0.2.14' }
2088 verbose addNamed [ 'minimatch', '0.2.14' ]
2089 verbose cache add name="glob" spec="3.1.21" args=["glob","3.1.21"]
2090 verbose parsed url { protocol: null,
2090 verbose parsed url   slashes: null,
2090 verbose parsed url   auth: null,
2090 verbose parsed url   host: null,
2090 verbose parsed url   port: null,
2090 verbose parsed url   hostname: null,
2090 verbose parsed url   hash: null,
2090 verbose parsed url   search: null,
2090 verbose parsed url   query: null,
2090 verbose parsed url   pathname: '3.1.21',
2090 verbose parsed url   path: '3.1.21',
2090 verbose parsed url   href: '3.1.21' }
2091 verbose addNamed [ 'glob', '3.1.21' ]
2092 verbose cache add name="iconv-lite" spec="0.2.11" args=["iconv-lite","0.2.11"]
2093 verbose parsed url { protocol: null,
2093 verbose parsed url   slashes: null,
2093 verbose parsed url   auth: null,
2093 verbose parsed url   host: null,
2093 verbose parsed url   port: null,
2093 verbose parsed url   hostname: null,
2093 verbose parsed url   hash: null,
2093 verbose parsed url   search: null,
2093 verbose parsed url   query: null,
2093 verbose parsed url   pathname: '0.2.11',
2093 verbose parsed url   path: '0.2.11',
2093 verbose parsed url   href: '0.2.11' }
2094 verbose addNamed [ 'iconv-lite', '0.2.11' ]
2095 verbose cache add name="underscore.string" spec="2.2.1" args=["underscore.string","2.2.1"]
2096 verbose parsed url { protocol: null,
2096 verbose parsed url   slashes: null,
2096 verbose parsed url   auth: null,
2096 verbose parsed url   host: null,
2096 verbose parsed url   port: null,
2096 verbose parsed url   hostname: null,
2096 verbose parsed url   hash: null,
2096 verbose parsed url   search: null,
2096 verbose parsed url   query: null,
2096 verbose parsed url   pathname: '2.2.1',
2096 verbose parsed url   path: '2.2.1',
2096 verbose parsed url   href: '2.2.1' }
2097 verbose addNamed [ 'underscore.string', '2.2.1' ]
2098 verbose cache add name="async" spec="0.1.22" args=["async","0.1.22"]
2099 verbose parsed url { protocol: null,
2099 verbose parsed url   slashes: null,
2099 verbose parsed url   auth: null,
2099 verbose parsed url   host: null,
2099 verbose parsed url   port: null,
2099 verbose parsed url   hostname: null,
2099 verbose parsed url   hash: null,
2099 verbose parsed url   search: null,
2099 verbose parsed url   query: null,
2099 verbose parsed url   pathname: '0.1.22',
2099 verbose parsed url   path: '0.1.22',
2099 verbose parsed url   href: '0.1.22' }
2100 verbose addNamed [ 'async', '0.1.22' ]
2101 verbose cache add name="lodash" spec="0.9.2" args=["lodash","0.9.2"]
2102 verbose parsed url { protocol: null,
2102 verbose parsed url   slashes: null,
2102 verbose parsed url   auth: null,
2102 verbose parsed url   host: null,
2102 verbose parsed url   port: null,
2102 verbose parsed url   hostname: null,
2102 verbose parsed url   hash: null,
2102 verbose parsed url   search: null,
2102 verbose parsed url   query: null,
2102 verbose parsed url   pathname: '0.9.2',
2102 verbose parsed url   path: '0.9.2',
2102 verbose parsed url   href: '0.9.2' }
2103 verbose addNamed [ 'lodash', '0.9.2' ]
2104 verbose cache add name="underscore.string" spec="2.2.1" args=["underscore.string","2.2.1"]
2105 verbose parsed url { protocol: null,
2105 verbose parsed url   slashes: null,
2105 verbose parsed url   auth: null,
2105 verbose parsed url   host: null,
2105 verbose parsed url   port: null,
2105 verbose parsed url   hostname: null,
2105 verbose parsed url   hash: null,
2105 verbose parsed url   search: null,
2105 verbose parsed url   query: null,
2105 verbose parsed url   pathname: '2.2.1',
2105 verbose parsed url   path: '2.2.1',
2105 verbose parsed url   href: '2.2.1' }
2106 verbose addNamed [ 'underscore.string', '2.2.1' ]
2107 verbose cache add name="js-yaml" spec="2.0.5" args=["js-yaml","2.0.5"]
2108 verbose parsed url { protocol: null,
2108 verbose parsed url   slashes: null,
2108 verbose parsed url   auth: null,
2108 verbose parsed url   host: null,
2108 verbose parsed url   port: null,
2108 verbose parsed url   hostname: null,
2108 verbose parsed url   hash: null,
2108 verbose parsed url   search: null,
2108 verbose parsed url   query: null,
2108 verbose parsed url   pathname: '2.0.5',
2108 verbose parsed url   path: '2.0.5',
2108 verbose parsed url   href: '2.0.5' }
2109 verbose addNamed [ 'js-yaml', '2.0.5' ]
2110 verbose cache add name="glob" spec="3.2.11" args=["glob","3.2.11"]
2111 verbose parsed url { protocol: null,
2111 verbose parsed url   slashes: null,
2111 verbose parsed url   auth: null,
2111 verbose parsed url   host: null,
2111 verbose parsed url   port: null,
2111 verbose parsed url   hostname: null,
2111 verbose parsed url   hash: null,
2111 verbose parsed url   search: null,
2111 verbose parsed url   query: null,
2111 verbose parsed url   pathname: '3.2.11',
2111 verbose parsed url   path: '3.2.11',
2111 verbose parsed url   href: '3.2.11' }
2112 verbose addNamed [ 'glob', '3.2.11' ]
2113 verbose cache add name="forever-monitor" spec="1.2.3" args=["forever-monitor","1.2.3"]
2114 verbose parsed url { protocol: null,
2114 verbose parsed url   slashes: null,
2114 verbose parsed url   auth: null,
2114 verbose parsed url   host: null,
2114 verbose parsed url   port: null,
2114 verbose parsed url   hostname: null,
2114 verbose parsed url   hash: null,
2114 verbose parsed url   search: null,
2114 verbose parsed url   query: null,
2114 verbose parsed url   pathname: '1.2.3',
2114 verbose parsed url   path: '1.2.3',
2114 verbose parsed url   href: '1.2.3' }
2115 verbose addNamed [ 'forever-monitor', '1.2.3' ]
2116 verbose addNamed [ '1.2.3', '1.2.3' ]
2117 verbose cache add name="watch" spec="0.8.0" args=["watch","0.8.0"]
2118 verbose parsed url { protocol: null,
2118 verbose parsed url   slashes: null,
2118 verbose parsed url   auth: null,
2118 verbose parsed url   host: null,
2118 verbose parsed url   port: null,
2118 verbose parsed url   hostname: null,
2118 verbose parsed url   hash: null,
2118 verbose parsed url   search: null,
2118 verbose parsed url   query: null,
2118 verbose parsed url   pathname: '0.8.0',
2118 verbose parsed url   path: '0.8.0',
2118 verbose parsed url   href: '0.8.0' }
2119 verbose addNamed [ 'watch', '0.8.0' ]
2120 verbose addNamed [ '0.8.0', '0.8.0' ]
2121 verbose cache add name="winston" spec="0.6.2" args=["winston","0.6.2"]
2122 verbose parsed url { protocol: null,
2122 verbose parsed url   slashes: null,
2122 verbose parsed url   auth: null,
2122 verbose parsed url   host: null,
2122 verbose parsed url   port: null,
2122 verbose parsed url   hostname: null,
2122 verbose parsed url   hash: null,
2122 verbose parsed url   search: null,
2122 verbose parsed url   query: null,
2122 verbose parsed url   pathname: '0.6.2',
2122 verbose parsed url   path: '0.6.2',
2122 verbose parsed url   href: '0.6.2' }
2123 verbose addNamed [ 'winston', '0.6.2' ]
2124 verbose addNamed [ '0.6.2', '0.6.2' ]
2125 verbose cache add name="async" spec="0.2.9" args=["async","0.2.9"]
2126 verbose parsed url { protocol: null,
2126 verbose parsed url   slashes: null,
2126 verbose parsed url   auth: null,
2126 verbose parsed url   host: null,
2126 verbose parsed url   port: null,
2126 verbose parsed url   hostname: null,
2126 verbose parsed url   hash: null,
2126 verbose parsed url   search: null,
2126 verbose parsed url   query: null,
2126 verbose parsed url   pathname: '0.2.9',
2126 verbose parsed url   path: '0.2.9',
2126 verbose parsed url   href: '0.2.9' }
2127 verbose addNamed [ 'async', '0.2.9' ]
2128 verbose addNamed [ '0.2.9', '0.2.9' ]
2129 verbose cache add name="optimist" spec="0.6.0" args=["optimist","0.6.0"]
2130 verbose parsed url { protocol: null,
2130 verbose parsed url   slashes: null,
2130 verbose parsed url   auth: null,
2130 verbose parsed url   host: null,
2130 verbose parsed url   port: null,
2130 verbose parsed url   hostname: null,
2130 verbose parsed url   hash: null,
2130 verbose parsed url   search: null,
2130 verbose parsed url   query: null,
2130 verbose parsed url   pathname: '0.6.0',
2130 verbose parsed url   path: '0.6.0',
2130 verbose parsed url   href: '0.6.0' }
2131 verbose addNamed [ 'optimist', '0.6.0' ]
2132 verbose addNamed [ '0.6.0', '0.6.0' ]
2133 verbose cache add name="prompt" spec="0.2.11" args=["prompt","0.2.11"]
2134 verbose parsed url { protocol: null,
2134 verbose parsed url   slashes: null,
2134 verbose parsed url   auth: null,
2134 verbose parsed url   host: null,
2134 verbose parsed url   port: null,
2134 verbose parsed url   hostname: null,
2134 verbose parsed url   hash: null,
2134 verbose parsed url   search: null,
2134 verbose parsed url   query: null,
2134 verbose parsed url   pathname: '0.2.11',
2134 verbose parsed url   path: '0.2.11',
2134 verbose parsed url   href: '0.2.11' }
2135 verbose addNamed [ 'prompt', '0.2.11' ]
2136 verbose addNamed [ '0.2.11', '0.2.11' ]
2137 verbose cache add name="eventemitter2" spec="0.4.12" args=["eventemitter2","0.4.12"]
2138 verbose parsed url { protocol: null,
2138 verbose parsed url   slashes: null,
2138 verbose parsed url   auth: null,
2138 verbose parsed url   host: null,
2138 verbose parsed url   port: null,
2138 verbose parsed url   hostname: null,
2138 verbose parsed url   hash: null,
2138 verbose parsed url   search: null,
2138 verbose parsed url   query: null,
2138 verbose parsed url   pathname: '0.4.12',
2138 verbose parsed url   path: '0.4.12',
2138 verbose parsed url   href: '0.4.12' }
2139 verbose addNamed [ 'eventemitter2', '0.4.12' ]
2140 verbose addNamed [ '0.4.12', '0.4.12' ]
2141 verbose cache add name="winston" spec="0.7.2" args=["winston","0.7.2"]
2142 verbose parsed url { protocol: null,
2142 verbose parsed url   slashes: null,
2142 verbose parsed url   auth: null,
2142 verbose parsed url   host: null,
2142 verbose parsed url   port: null,
2142 verbose parsed url   hostname: null,
2142 verbose parsed url   hash: null,
2142 verbose parsed url   search: null,
2142 verbose parsed url   query: null,
2142 verbose parsed url   pathname: '0.7.2',
2142 verbose parsed url   path: '0.7.2',
2142 verbose parsed url   href: '0.7.2' }
2143 verbose addNamed [ 'winston', '0.7.2' ]
2144 verbose addNamed [ '0.7.2', '0.7.2' ]
2145 verbose cache add name="optimist" spec="0.6.0" args=["optimist","0.6.0"]
2146 verbose parsed url { protocol: null,
2146 verbose parsed url   slashes: null,
2146 verbose parsed url   auth: null,
2146 verbose parsed url   host: null,
2146 verbose parsed url   port: null,
2146 verbose parsed url   hostname: null,
2146 verbose parsed url   hash: null,
2146 verbose parsed url   search: null,
2146 verbose parsed url   query: null,
2146 verbose parsed url   pathname: '0.6.0',
2146 verbose parsed url   path: '0.6.0',
2146 verbose parsed url   href: '0.6.0' }
2147 verbose addNamed [ 'optimist', '0.6.0' ]
2148 verbose cache add name="director" spec="1.1.10" args=["director","1.1.10"]
2149 verbose parsed url { protocol: null,
2149 verbose parsed url   slashes: null,
2149 verbose parsed url   auth: null,
2149 verbose parsed url   host: null,
2149 verbose parsed url   port: null,
2149 verbose parsed url   hostname: null,
2149 verbose parsed url   hash: null,
2149 verbose parsed url   search: null,
2149 verbose parsed url   query: null,
2149 verbose parsed url   pathname: '1.1.10',
2149 verbose parsed url   path: '1.1.10',
2149 verbose parsed url   href: '1.1.10' }
2150 verbose addNamed [ 'director', '1.1.10' ]
2151 verbose addNamed [ '1.1.10', '1.1.10' ]
2152 verbose cache add name="minimist" spec="0.0.10" args=["minimist","0.0.10"]
2153 verbose parsed url { protocol: null,
2153 verbose parsed url   slashes: null,
2153 verbose parsed url   auth: null,
2153 verbose parsed url   host: null,
2153 verbose parsed url   port: null,
2153 verbose parsed url   hostname: null,
2153 verbose parsed url   hash: null,
2153 verbose parsed url   search: null,
2153 verbose parsed url   query: null,
2153 verbose parsed url   pathname: '0.0.10',
2153 verbose parsed url   path: '0.0.10',
2153 verbose parsed url   href: '0.0.10' }
2154 verbose addNamed [ 'minimist', '0.0.10' ]
2155 verbose addNamed [ '0.0.10', '0.0.10' ]
2156 verbose cache add name="async" spec="0.2.10" args=["async","0.2.10"]
2157 verbose parsed url { protocol: null,
2157 verbose parsed url   slashes: null,
2157 verbose parsed url   auth: null,
2157 verbose parsed url   host: null,
2157 verbose parsed url   port: null,
2157 verbose parsed url   hostname: null,
2157 verbose parsed url   hash: null,
2157 verbose parsed url   search: null,
2157 verbose parsed url   query: null,
2157 verbose parsed url   pathname: '0.2.10',
2157 verbose parsed url   path: '0.2.10',
2157 verbose parsed url   href: '0.2.10' }
2158 verbose addNamed [ 'async', '0.2.10' ]
2159 verbose cache add name="minimist" spec="0.0.8" args=["minimist","0.0.8"]
2160 verbose parsed url { protocol: null,
2160 verbose parsed url   slashes: null,
2160 verbose parsed url   auth: null,
2160 verbose parsed url   host: null,
2160 verbose parsed url   port: null,
2160 verbose parsed url   hostname: null,
2160 verbose parsed url   hash: null,
2160 verbose parsed url   search: null,
2160 verbose parsed url   query: null,
2160 verbose parsed url   pathname: '0.0.8',
2160 verbose parsed url   path: '0.0.8',
2160 verbose parsed url   href: '0.0.8' }
2161 verbose addNamed [ 'minimist', '0.0.8' ]
2162 verbose addNamed [ '0.0.8', '0.0.8' ]
2163 verbose cache add name="ncp" spec="0.4.2" args=["ncp","0.4.2"]
2164 verbose parsed url { protocol: null,
2164 verbose parsed url   slashes: null,
2164 verbose parsed url   auth: null,
2164 verbose parsed url   host: null,
2164 verbose parsed url   port: null,
2164 verbose parsed url   hostname: null,
2164 verbose parsed url   hash: null,
2164 verbose parsed url   search: null,
2164 verbose parsed url   query: null,
2164 verbose parsed url   pathname: '0.4.2',
2164 verbose parsed url   path: '0.4.2',
2164 verbose parsed url   href: '0.4.2' }
2165 verbose addNamed [ 'ncp', '0.4.2' ]
2166 verbose addNamed [ '0.4.2', '0.4.2' ]
2167 verbose cache add name="async" spec="0.2.10" args=["async","0.2.10"]
2168 verbose parsed url { protocol: null,
2168 verbose parsed url   slashes: null,
2168 verbose parsed url   auth: null,
2168 verbose parsed url   host: null,
2168 verbose parsed url   port: null,
2168 verbose parsed url   hostname: null,
2168 verbose parsed url   hash: null,
2168 verbose parsed url   search: null,
2168 verbose parsed url   query: null,
2168 verbose parsed url   pathname: '0.2.10',
2168 verbose parsed url   path: '0.2.10',
2168 verbose parsed url   href: '0.2.10' }
2169 verbose addNamed [ 'async', '0.2.10' ]
2170 verbose cache add name="request" spec="2.16.6" args=["request","2.16.6"]
2171 verbose parsed url { protocol: null,
2171 verbose parsed url   slashes: null,
2171 verbose parsed url   auth: null,
2171 verbose parsed url   host: null,
2171 verbose parsed url   port: null,
2171 verbose parsed url   hostname: null,
2171 verbose parsed url   hash: null,
2171 verbose parsed url   search: null,
2171 verbose parsed url   query: null,
2171 verbose parsed url   pathname: '2.16.6',
2171 verbose parsed url   path: '2.16.6',
2171 verbose parsed url   href: '2.16.6' }
2172 verbose addNamed [ 'request', '2.16.6' ]
2173 verbose addNamed [ '2.16.6', '2.16.6' ]
2174 verbose cache add name="async" spec="0.8.0" args=["async","0.8.0"]
2175 verbose parsed url { protocol: null,
2175 verbose parsed url   slashes: null,
2175 verbose parsed url   auth: null,
2175 verbose parsed url   host: null,
2175 verbose parsed url   port: null,
2175 verbose parsed url   hostname: null,
2175 verbose parsed url   hash: null,
2175 verbose parsed url   search: null,
2175 verbose parsed url   query: null,
2175 verbose parsed url   pathname: '0.8.0',
2175 verbose parsed url   path: '0.8.0',
2175 verbose parsed url   href: '0.8.0' }
2176 verbose addNamed [ 'async', '0.8.0' ]
2177 verbose addNamed [ '0.8.0', '0.8.0' ]
2178 verbose cache add name="glob" spec="3.2.11" args=["glob","3.2.11"]
2179 verbose parsed url { protocol: null,
2179 verbose parsed url   slashes: null,
2179 verbose parsed url   auth: null,
2179 verbose parsed url   host: null,
2179 verbose parsed url   port: null,
2179 verbose parsed url   hostname: null,
2179 verbose parsed url   hash: null,
2179 verbose parsed url   search: null,
2179 verbose parsed url   query: null,
2179 verbose parsed url   pathname: '3.2.11',
2179 verbose parsed url   path: '3.2.11',
2179 verbose parsed url   href: '3.2.11' }
2180 verbose addNamed [ 'glob', '3.2.11' ]
2181 verbose cache add name="debug" spec="0.8.1" args=["debug","0.8.1"]
2182 verbose parsed url { protocol: null,
2182 verbose parsed url   slashes: null,
2182 verbose parsed url   auth: null,
2182 verbose parsed url   host: null,
2182 verbose parsed url   port: null,
2182 verbose parsed url   hostname: null,
2182 verbose parsed url   hash: null,
2182 verbose parsed url   search: null,
2182 verbose parsed url   query: null,
2182 verbose parsed url   pathname: '0.8.1',
2182 verbose parsed url   path: '0.8.1',
2182 verbose parsed url   href: '0.8.1' }
2183 verbose addNamed [ 'debug', '0.8.1' ]
2184 verbose addNamed [ '0.8.1', '0.8.1' ]
2185 verbose cache add name="rc" spec="0.3.5" args=["rc","0.3.5"]
2186 verbose parsed url { protocol: null,
2186 verbose parsed url   slashes: null,
2186 verbose parsed url   auth: null,
2186 verbose parsed url   host: null,
2186 verbose parsed url   port: null,
2186 verbose parsed url   hostname: null,
2186 verbose parsed url   hash: null,
2186 verbose parsed url   search: null,
2186 verbose parsed url   query: null,
2186 verbose parsed url   pathname: '0.3.5',
2186 verbose parsed url   path: '0.3.5',
2186 verbose parsed url   href: '0.3.5' }
2187 verbose addNamed [ 'rc', '0.3.5' ]
2188 verbose addNamed [ '0.3.5', '0.3.5' ]
2189 verbose cache add name="yargs" spec="1.2.6" args=["yargs","1.2.6"]
2190 verbose parsed url { protocol: null,
2190 verbose parsed url   slashes: null,
2190 verbose parsed url   auth: null,
2190 verbose parsed url   host: null,
2190 verbose parsed url   port: null,
2190 verbose parsed url   hostname: null,
2190 verbose parsed url   hash: null,
2190 verbose parsed url   search: null,
2190 verbose parsed url   query: null,
2190 verbose parsed url   pathname: '1.2.6',
2190 verbose parsed url   path: '1.2.6',
2190 verbose parsed url   href: '1.2.6' }
2191 verbose addNamed [ 'yargs', '1.2.6' ]
2192 verbose addNamed [ '1.2.6', '1.2.6' ]
2193 verbose cache add name="express" spec="4.0.0" args=["express","4.0.0"]
2194 verbose parsed url { protocol: null,
2194 verbose parsed url   slashes: null,
2194 verbose parsed url   auth: null,
2194 verbose parsed url   host: null,
2194 verbose parsed url   port: null,
2194 verbose parsed url   hostname: null,
2194 verbose parsed url   hash: null,
2194 verbose parsed url   search: null,
2194 verbose parsed url   query: null,
2194 verbose parsed url   pathname: '4.0.0',
2194 verbose parsed url   path: '4.0.0',
2194 verbose parsed url   href: '4.0.0' }
2195 verbose addNamed [ 'express', '4.0.0' ]
2196 verbose addNamed [ '4.0.0', '4.0.0' ]
2197 verbose cache add name="commander" spec="0.6.1" args=["commander","0.6.1"]
2198 verbose parsed url { protocol: null,
2198 verbose parsed url   slashes: null,
2198 verbose parsed url   auth: null,
2198 verbose parsed url   host: null,
2198 verbose parsed url   port: null,
2198 verbose parsed url   hostname: null,
2198 verbose parsed url   hash: null,
2198 verbose parsed url   search: null,
2198 verbose parsed url   query: null,
2198 verbose parsed url   pathname: '0.6.1',
2198 verbose parsed url   path: '0.6.1',
2198 verbose parsed url   href: '0.6.1' }
2199 verbose addNamed [ 'commander', '0.6.1' ]
2200 verbose addNamed [ '0.6.1', '0.6.1' ]
2201 verbose cache add name="nan" spec="0.3.2" args=["nan","0.3.2"]
2202 verbose parsed url { protocol: null,
2202 verbose parsed url   slashes: null,
2202 verbose parsed url   auth: null,
2202 verbose parsed url   host: null,
2202 verbose parsed url   port: null,
2202 verbose parsed url   hostname: null,
2202 verbose parsed url   hash: null,
2202 verbose parsed url   search: null,
2202 verbose parsed url   query: null,
2202 verbose parsed url   pathname: '0.3.2',
2202 verbose parsed url   path: '0.3.2',
2202 verbose parsed url   href: '0.3.2' }
2203 verbose addNamed [ 'nan', '0.3.2' ]
2204 verbose addNamed [ '0.3.2', '0.3.2' ]
2205 silly lockFile 3b629890-yeoman-generator-0-15-0 yeoman-generator@0.15.0
2206 verbose lock yeoman-generator@0.15.0 /Users/yanxin/.npm/3b629890-yeoman-generator-0-15-0.lock
2207 silly lockFile 67d2df2a-mkdirp-0-3-5 mkdirp@0.3.5
2208 verbose lock mkdirp@0.3.5 /Users/yanxin/.npm/67d2df2a-mkdirp-0-3-5.lock
2209 silly lockFile 6c38c3a7-chai-1-7-2 chai@1.7.2
2210 verbose lock chai@1.7.2 /Users/yanxin/.npm/6c38c3a7-chai-1-7-2.lock
2211 silly lockFile ba2b3f89-sinon-chai-2-4-0 sinon-chai@2.4.0
2212 verbose lock sinon-chai@2.4.0 /Users/yanxin/.npm/ba2b3f89-sinon-chai-2-4-0.lock
2213 silly lockFile 8416e357-mocha-1-11-0 mocha@1.11.0
2214 verbose lock mocha@1.11.0 /Users/yanxin/.npm/8416e357-mocha-1-11-0.lock
2215 silly lockFile fdae4232-express-3-2-6 express@3.2.6
2216 verbose lock express@3.2.6 /Users/yanxin/.npm/fdae4232-express-3-2-6.lock
2217 silly lockFile 313c9317-tap-0-4-12 tap@0.4.12
2218 verbose lock tap@0.4.12 /Users/yanxin/.npm/313c9317-tap-0-4-12.lock
2219 silly lockFile 8f36e462-socket-io-0-9-13 socket.io@0.9.13
2220 verbose lock socket.io@0.9.13 /Users/yanxin/.npm/8f36e462-socket-io-0-9-13.lock
2221 silly lockFile 5b565c06-pty-js-0-2-3 pty.js@0.2.3
2222 verbose lock pty.js@0.2.3 /Users/yanxin/.npm/5b565c06-pty-js-0-2-3.lock
2223 silly lockFile 3ec67e6d-term-js-0-0-3 term.js@0.0.3
2224 verbose lock term.js@0.0.3 /Users/yanxin/.npm/3ec67e6d-term-js-0-0-3.lock
2225 silly lockFile 0557bc2a-express-3-1-0 express@3.1.0
2226 verbose lock express@3.1.0 /Users/yanxin/.npm/0557bc2a-express-3-1-0.lock
2227 silly lockFile 2016e061-commander-1-3-2 commander@1.3.2
2228 verbose lock commander@1.3.2 /Users/yanxin/.npm/2016e061-commander-1-3-2.lock
2229 silly lockFile cd9b35ef-prompt-0-1-12 prompt@0.1.12
2230 verbose lock prompt@0.1.12 /Users/yanxin/.npm/cd9b35ef-prompt-0-1-12.lock
2231 silly lockFile 01678457-semver-1-0-14 semver@1.0.14
2232 verbose lock semver@1.0.14 /Users/yanxin/.npm/01678457-semver-1-0-14.lock
2233 silly lockFile 098b530d-async-0-2-10 async@0.2.10
2234 verbose lock async@0.2.10 /Users/yanxin/.npm/098b530d-async-0-2-10.lock
2235 silly lockFile 022c8436-coffee-script-1-3-3 coffee-script@1.3.3
2236 verbose lock coffee-script@1.3.3 /Users/yanxin/.npm/022c8436-coffee-script-1-3-3.lock
2237 silly lockFile 09d21715-async-0-1-22 async@0.1.22
2238 verbose lock async@0.1.22 /Users/yanxin/.npm/09d21715-async-0-1-22.lock
2239 silly lockFile 644d6e27-dateformat-1-0-2-1-2-3 dateformat@1.0.2-1.2.3
2240 verbose lock dateformat@1.0.2-1.2.3 /Users/yanxin/.npm/644d6e27-dateformat-1-0-2-1-2-3.lock
2241 silly lockFile 3fffafa6-glob-3-2-11 glob@3.2.11
2242 verbose lock glob@3.2.11 /Users/yanxin/.npm/3fffafa6-glob-3-2-11.lock
2243 silly lockFile 5d877021-iconv-lite-0-2-11 iconv-lite@0.2.11
2244 verbose lock iconv-lite@0.2.11 /Users/yanxin/.npm/5d877021-iconv-lite-0-2-11.lock
2245 silly lockFile 1be903a1-nopt-1-0-10 nopt@1.0.10
2246 verbose lock nopt@1.0.10 /Users/yanxin/.npm/1be903a1-nopt-1-0-10.lock
2247 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
2248 verbose lock minimatch@0.2.14 /Users/yanxin/.npm/a72880d0-minimatch-0-2-14.lock
2249 silly lockFile ab465912-glob-3-1-21 glob@3.1.21
2250 verbose lock glob@3.1.21 /Users/yanxin/.npm/ab465912-glob-3-1-21.lock
2251 silly lockFile 5c083954-underscore-string-2-2-1 underscore.string@2.2.1
2252 verbose lock underscore.string@2.2.1 /Users/yanxin/.npm/5c083954-underscore-string-2-2-1.lock
2253 silly lockFile 9802d919-lodash-0-9-2 lodash@0.9.2
2254 verbose lock lodash@0.9.2 /Users/yanxin/.npm/9802d919-lodash-0-9-2.lock
2255 silly lockFile 0aecb717-js-yaml-2-0-5 js-yaml@2.0.5
2256 verbose lock js-yaml@2.0.5 /Users/yanxin/.npm/0aecb717-js-yaml-2-0-5.lock
2257 silly lockFile 95464470-resolve-0-3-1 resolve@0.3.1
2258 verbose lock resolve@0.3.1 /Users/yanxin/.npm/95464470-resolve-0-3-1.lock
2259 silly lockFile 355c84e8-forever-monitor-1-2-3 forever-monitor@1.2.3
2260 verbose lock forever-monitor@1.2.3 /Users/yanxin/.npm/355c84e8-forever-monitor-1-2-3.lock
2261 silly lockFile 1fd0cbc9-watch-0-8-0 watch@0.8.0
2262 verbose lock watch@0.8.0 /Users/yanxin/.npm/1fd0cbc9-watch-0-8-0.lock
2263 silly lockFile 6b025e09-winston-0-6-2 winston@0.6.2
2264 verbose lock winston@0.6.2 /Users/yanxin/.npm/6b025e09-winston-0-6-2.lock
2265 silly lockFile be62480b-async-0-2-9 async@0.2.9
2266 verbose lock async@0.2.9 /Users/yanxin/.npm/be62480b-async-0-2-9.lock
2267 silly lockFile 6403b4d6-optimist-0-6-0 optimist@0.6.0
2268 verbose lock optimist@0.6.0 /Users/yanxin/.npm/6403b4d6-optimist-0-6-0.lock
2269 silly lockFile 61856ab9-prompt-0-2-11 prompt@0.2.11
2270 verbose lock prompt@0.2.11 /Users/yanxin/.npm/61856ab9-prompt-0-2-11.lock
2271 silly lockFile 1aad4820-eventemitter2-0-4-12 eventemitter2@0.4.12
2272 verbose lock eventemitter2@0.4.12 /Users/yanxin/.npm/1aad4820-eventemitter2-0-4-12.lock
2273 silly lockFile 66ac613a-winston-0-7-2 winston@0.7.2
2274 verbose lock winston@0.7.2 /Users/yanxin/.npm/66ac613a-winston-0-7-2.lock
2275 silly lockFile f33fb291-director-1-1-10 director@1.1.10
2276 verbose lock director@1.1.10 /Users/yanxin/.npm/f33fb291-director-1-1-10.lock
2277 silly lockFile 92f0553b-minimist-0-0-10 minimist@0.0.10
2278 verbose lock minimist@0.0.10 /Users/yanxin/.npm/92f0553b-minimist-0-0-10.lock
2279 silly lockFile 22c6b485-minimist-0-0-8 minimist@0.0.8
2280 verbose lock minimist@0.0.8 /Users/yanxin/.npm/22c6b485-minimist-0-0-8.lock
2281 silly lockFile e43cb36a-ncp-0-4-2 ncp@0.4.2
2282 verbose lock ncp@0.4.2 /Users/yanxin/.npm/e43cb36a-ncp-0-4-2.lock
2283 silly lockFile 9ba6a9aa-request-2-16-6 request@2.16.6
2284 verbose lock request@2.16.6 /Users/yanxin/.npm/9ba6a9aa-request-2-16-6.lock
2285 silly lockFile 3d809785-async-0-8-0 async@0.8.0
2286 verbose lock async@0.8.0 /Users/yanxin/.npm/3d809785-async-0-8-0.lock
2287 silly lockFile a38530e1-debug-0-8-1 debug@0.8.1
2288 verbose lock debug@0.8.1 /Users/yanxin/.npm/a38530e1-debug-0-8-1.lock
2289 silly lockFile 0e486d9c-rc-0-3-5 rc@0.3.5
2290 verbose lock rc@0.3.5 /Users/yanxin/.npm/0e486d9c-rc-0-3-5.lock
2291 silly lockFile 6b8b29b1-yargs-1-2-6 yargs@1.2.6
2292 verbose lock yargs@1.2.6 /Users/yanxin/.npm/6b8b29b1-yargs-1-2-6.lock
2293 silly lockFile 5b69df19-express-4-0-0 express@4.0.0
2294 verbose lock express@4.0.0 /Users/yanxin/.npm/5b69df19-express-4-0-0.lock
2295 silly lockFile fa16a2ce-commander-0-6-1 commander@0.6.1
2296 verbose lock commander@0.6.1 /Users/yanxin/.npm/fa16a2ce-commander-0-6-1.lock
2297 silly lockFile 98ceedb5-nan-0-3-2 nan@0.3.2
2298 verbose lock nan@0.3.2 /Users/yanxin/.npm/98ceedb5-nan-0-3-2.lock
2299 verbose cache add [ 'node-theseus@0.2.5', null ]
2300 verbose cache add name=undefined spec="node-theseus@0.2.5" args=["node-theseus@0.2.5",null]
2301 verbose parsed url { protocol: null,
2301 verbose parsed url   slashes: null,
2301 verbose parsed url   auth: null,
2301 verbose parsed url   host: null,
2301 verbose parsed url   port: null,
2301 verbose parsed url   hostname: null,
2301 verbose parsed url   hash: null,
2301 verbose parsed url   search: null,
2301 verbose parsed url   query: null,
2301 verbose parsed url   pathname: 'node-theseus@0.2.5',
2301 verbose parsed url   path: 'node-theseus@0.2.5',
2301 verbose parsed url   href: 'node-theseus@0.2.5' }
2302 verbose cache add [ 'cnpm@0.5.2', null ]
2303 verbose cache add name=undefined spec="cnpm@0.5.2" args=["cnpm@0.5.2",null]
2304 verbose parsed url { protocol: null,
2304 verbose parsed url   slashes: null,
2304 verbose parsed url   auth: null,
2304 verbose parsed url   host: null,
2304 verbose parsed url   port: null,
2304 verbose parsed url   hostname: null,
2304 verbose parsed url   hash: null,
2304 verbose parsed url   search: null,
2304 verbose parsed url   query: null,
2304 verbose parsed url   pathname: 'cnpm@0.5.2',
2304 verbose parsed url   path: 'cnpm@0.5.2',
2304 verbose parsed url   href: 'cnpm@0.5.2' }
2305 verbose cache add [ 'gulp@3.8.7', null ]
2306 verbose cache add name=undefined spec="gulp@3.8.7" args=["gulp@3.8.7",null]
2307 verbose parsed url { protocol: null,
2307 verbose parsed url   slashes: null,
2307 verbose parsed url   auth: null,
2307 verbose parsed url   host: null,
2307 verbose parsed url   port: null,
2307 verbose parsed url   hostname: null,
2307 verbose parsed url   hash: null,
2307 verbose parsed url   search: null,
2307 verbose parsed url   query: null,
2307 verbose parsed url   pathname: 'gulp@3.8.7',
2307 verbose parsed url   path: 'gulp@3.8.7',
2307 verbose parsed url   href: 'gulp@3.8.7' }
2308 verbose cache add [ 'bower@1.3.8', null ]
2309 verbose cache add name=undefined spec="bower@1.3.8" args=["bower@1.3.8",null]
2310 verbose parsed url { protocol: null,
2310 verbose parsed url   slashes: null,
2310 verbose parsed url   auth: null,
2310 verbose parsed url   host: null,
2310 verbose parsed url   port: null,
2310 verbose parsed url   hostname: null,
2310 verbose parsed url   hash: null,
2310 verbose parsed url   search: null,
2310 verbose parsed url   query: null,
2310 verbose parsed url   pathname: 'bower@1.3.8',
2310 verbose parsed url   path: 'bower@1.3.8',
2310 verbose parsed url   href: 'bower@1.3.8' }
2311 verbose cache add [ 'less@1.7.4', null ]
2312 verbose cache add name=undefined spec="less@1.7.4" args=["less@1.7.4",null]
2313 verbose parsed url { protocol: null,
2313 verbose parsed url   slashes: null,
2313 verbose parsed url   auth: null,
2313 verbose parsed url   host: null,
2313 verbose parsed url   port: null,
2313 verbose parsed url   hostname: null,
2313 verbose parsed url   hash: null,
2313 verbose parsed url   search: null,
2313 verbose parsed url   query: null,
2313 verbose parsed url   pathname: 'less@1.7.4',
2313 verbose parsed url   path: 'less@1.7.4',
2313 verbose parsed url   href: 'less@1.7.4' }
2314 verbose cache add [ 'yo@1.2.1', null ]
2315 verbose cache add name=undefined spec="yo@1.2.1" args=["yo@1.2.1",null]
2316 verbose parsed url { protocol: null,
2316 verbose parsed url   slashes: null,
2316 verbose parsed url   auth: null,
2316 verbose parsed url   host: null,
2316 verbose parsed url   port: null,
2316 verbose parsed url   hostname: null,
2316 verbose parsed url   hash: null,
2316 verbose parsed url   search: null,
2316 verbose parsed url   query: null,
2316 verbose parsed url   pathname: 'yo@1.2.1',
2316 verbose parsed url   path: 'yo@1.2.1',
2316 verbose parsed url   href: 'yo@1.2.1' }
2317 verbose cache add [ 'nodemon@1.2.1', null ]
2318 verbose cache add name=undefined spec="nodemon@1.2.1" args=["nodemon@1.2.1",null]
2319 verbose parsed url { protocol: null,
2319 verbose parsed url   slashes: null,
2319 verbose parsed url   auth: null,
2319 verbose parsed url   host: null,
2319 verbose parsed url   port: null,
2319 verbose parsed url   hostname: null,
2319 verbose parsed url   hash: null,
2319 verbose parsed url   search: null,
2319 verbose parsed url   query: null,
2319 verbose parsed url   pathname: 'nodemon@1.2.1',
2319 verbose parsed url   path: 'nodemon@1.2.1',
2319 verbose parsed url   href: 'nodemon@1.2.1' }
2320 verbose cache add [ 'npm@1.4.23', null ]
2321 verbose cache add name=undefined spec="npm@1.4.23" args=["npm@1.4.23",null]
2322 verbose parsed url { protocol: null,
2322 verbose parsed url   slashes: null,
2322 verbose parsed url   auth: null,
2322 verbose parsed url   host: null,
2322 verbose parsed url   port: null,
2322 verbose parsed url   hostname: null,
2322 verbose parsed url   hash: null,
2322 verbose parsed url   search: null,
2322 verbose parsed url   query: null,
2322 verbose parsed url   pathname: 'npm@1.4.23',
2322 verbose parsed url   path: 'npm@1.4.23',
2322 verbose parsed url   href: 'npm@1.4.23' }
2323 verbose cache add [ 'sails@0.10.1', null ]
2324 verbose cache add name=undefined spec="sails@0.10.1" args=["sails@0.10.1",null]
2325 verbose parsed url { protocol: null,
2325 verbose parsed url   slashes: null,
2325 verbose parsed url   auth: null,
2325 verbose parsed url   host: null,
2325 verbose parsed url   port: null,
2325 verbose parsed url   hostname: null,
2325 verbose parsed url   hash: null,
2325 verbose parsed url   search: null,
2325 verbose parsed url   query: null,
2325 verbose parsed url   pathname: 'sails@0.10.1',
2325 verbose parsed url   path: 'sails@0.10.1',
2325 verbose parsed url   href: 'sails@0.10.1' }
2326 verbose cache add name="node-theseus" spec="0.2.5" args=["node-theseus","0.2.5"]
2327 verbose parsed url { protocol: null,
2327 verbose parsed url   slashes: null,
2327 verbose parsed url   auth: null,
2327 verbose parsed url   host: null,
2327 verbose parsed url   port: null,
2327 verbose parsed url   hostname: null,
2327 verbose parsed url   hash: null,
2327 verbose parsed url   search: null,
2327 verbose parsed url   query: null,
2327 verbose parsed url   pathname: '0.2.5',
2327 verbose parsed url   path: '0.2.5',
2327 verbose parsed url   href: '0.2.5' }
2328 verbose addNamed [ 'node-theseus', '0.2.5' ]
2329 verbose addNamed [ '0.2.5', '0.2.5' ]
2330 silly lockFile 5c4a42b8-node-theseus-0-2-5 node-theseus@0.2.5
2331 verbose lock node-theseus@0.2.5 /Users/yanxin/.npm/5c4a42b8-node-theseus-0-2-5.lock
2332 verbose cache add name="cnpm" spec="0.5.2" args=["cnpm","0.5.2"]
2333 verbose parsed url { protocol: null,
2333 verbose parsed url   slashes: null,
2333 verbose parsed url   auth: null,
2333 verbose parsed url   host: null,
2333 verbose parsed url   port: null,
2333 verbose parsed url   hostname: null,
2333 verbose parsed url   hash: null,
2333 verbose parsed url   search: null,
2333 verbose parsed url   query: null,
2333 verbose parsed url   pathname: '0.5.2',
2333 verbose parsed url   path: '0.5.2',
2333 verbose parsed url   href: '0.5.2' }
2334 verbose addNamed [ 'cnpm', '0.5.2' ]
2335 verbose addNamed [ '0.5.2', '0.5.2' ]
2336 silly lockFile 6a79951f-cnpm-0-5-2 cnpm@0.5.2
2337 verbose lock cnpm@0.5.2 /Users/yanxin/.npm/6a79951f-cnpm-0-5-2.lock
2338 verbose cache add name="gulp" spec="3.8.7" args=["gulp","3.8.7"]
2339 verbose parsed url { protocol: null,
2339 verbose parsed url   slashes: null,
2339 verbose parsed url   auth: null,
2339 verbose parsed url   host: null,
2339 verbose parsed url   port: null,
2339 verbose parsed url   hostname: null,
2339 verbose parsed url   hash: null,
2339 verbose parsed url   search: null,
2339 verbose parsed url   query: null,
2339 verbose parsed url   pathname: '3.8.7',
2339 verbose parsed url   path: '3.8.7',
2339 verbose parsed url   href: '3.8.7' }
2340 verbose addNamed [ 'gulp', '3.8.7' ]
2341 verbose addNamed [ '3.8.7', '3.8.7' ]
2342 silly lockFile 6c754736-gulp-3-8-7 gulp@3.8.7
2343 verbose lock gulp@3.8.7 /Users/yanxin/.npm/6c754736-gulp-3-8-7.lock
2344 verbose cache add name="bower" spec="1.3.8" args=["bower","1.3.8"]
2345 verbose parsed url { protocol: null,
2345 verbose parsed url   slashes: null,
2345 verbose parsed url   auth: null,
2345 verbose parsed url   host: null,
2345 verbose parsed url   port: null,
2345 verbose parsed url   hostname: null,
2345 verbose parsed url   hash: null,
2345 verbose parsed url   search: null,
2345 verbose parsed url   query: null,
2345 verbose parsed url   pathname: '1.3.8',
2345 verbose parsed url   path: '1.3.8',
2345 verbose parsed url   href: '1.3.8' }
2346 verbose addNamed [ 'bower', '1.3.8' ]
2347 verbose addNamed [ '1.3.8', '1.3.8' ]
2348 silly lockFile 7946917f-bower-1-3-8 bower@1.3.8
2349 verbose lock bower@1.3.8 /Users/yanxin/.npm/7946917f-bower-1-3-8.lock
2350 verbose cache add name="less" spec="1.7.4" args=["less","1.7.4"]
2351 verbose parsed url { protocol: null,
2351 verbose parsed url   slashes: null,
2351 verbose parsed url   auth: null,
2351 verbose parsed url   host: null,
2351 verbose parsed url   port: null,
2351 verbose parsed url   hostname: null,
2351 verbose parsed url   hash: null,
2351 verbose parsed url   search: null,
2351 verbose parsed url   query: null,
2351 verbose parsed url   pathname: '1.7.4',
2351 verbose parsed url   path: '1.7.4',
2351 verbose parsed url   href: '1.7.4' }
2352 verbose addNamed [ 'less', '1.7.4' ]
2353 verbose addNamed [ '1.7.4', '1.7.4' ]
2354 silly lockFile 9a844466-less-1-7-4 less@1.7.4
2355 verbose lock less@1.7.4 /Users/yanxin/.npm/9a844466-less-1-7-4.lock
2356 verbose cache add name="yo" spec="1.2.1" args=["yo","1.2.1"]
2357 verbose parsed url { protocol: null,
2357 verbose parsed url   slashes: null,
2357 verbose parsed url   auth: null,
2357 verbose parsed url   host: null,
2357 verbose parsed url   port: null,
2357 verbose parsed url   hostname: null,
2357 verbose parsed url   hash: null,
2357 verbose parsed url   search: null,
2357 verbose parsed url   query: null,
2357 verbose parsed url   pathname: '1.2.1',
2357 verbose parsed url   path: '1.2.1',
2357 verbose parsed url   href: '1.2.1' }
2358 verbose addNamed [ 'yo', '1.2.1' ]
2359 verbose addNamed [ '1.2.1', '1.2.1' ]
2360 silly lockFile d0748f21-yo-1-2-1 yo@1.2.1
2361 verbose lock yo@1.2.1 /Users/yanxin/.npm/d0748f21-yo-1-2-1.lock
2362 verbose cache add name="nodemon" spec="1.2.1" args=["nodemon","1.2.1"]
2363 verbose parsed url { protocol: null,
2363 verbose parsed url   slashes: null,
2363 verbose parsed url   auth: null,
2363 verbose parsed url   host: null,
2363 verbose parsed url   port: null,
2363 verbose parsed url   hostname: null,
2363 verbose parsed url   hash: null,
2363 verbose parsed url   search: null,
2363 verbose parsed url   query: null,
2363 verbose parsed url   pathname: '1.2.1',
2363 verbose parsed url   path: '1.2.1',
2363 verbose parsed url   href: '1.2.1' }
2364 verbose addNamed [ 'nodemon', '1.2.1' ]
2365 verbose addNamed [ '1.2.1', '1.2.1' ]
2366 silly lockFile 891e98f0-nodemon-1-2-1 nodemon@1.2.1
2367 verbose lock nodemon@1.2.1 /Users/yanxin/.npm/891e98f0-nodemon-1-2-1.lock
2368 verbose cache add name="npm" spec="1.4.23" args=["npm","1.4.23"]
2369 verbose parsed url { protocol: null,
2369 verbose parsed url   slashes: null,
2369 verbose parsed url   auth: null,
2369 verbose parsed url   host: null,
2369 verbose parsed url   port: null,
2369 verbose parsed url   hostname: null,
2369 verbose parsed url   hash: null,
2369 verbose parsed url   search: null,
2369 verbose parsed url   query: null,
2369 verbose parsed url   pathname: '1.4.23',
2369 verbose parsed url   path: '1.4.23',
2369 verbose parsed url   href: '1.4.23' }
2370 verbose addNamed [ 'npm', '1.4.23' ]
2371 verbose addNamed [ '1.4.23', '1.4.23' ]
2372 silly lockFile de435cd0-npm-1-4-23 npm@1.4.23
2373 verbose lock npm@1.4.23 /Users/yanxin/.npm/de435cd0-npm-1-4-23.lock
2374 verbose cache add name="sails" spec="0.10.1" args=["sails","0.10.1"]
2375 verbose parsed url { protocol: null,
2375 verbose parsed url   slashes: null,
2375 verbose parsed url   auth: null,
2375 verbose parsed url   host: null,
2375 verbose parsed url   port: null,
2375 verbose parsed url   hostname: null,
2375 verbose parsed url   hash: null,
2375 verbose parsed url   search: null,
2375 verbose parsed url   query: null,
2375 verbose parsed url   pathname: '0.10.1',
2375 verbose parsed url   path: '0.10.1',
2375 verbose parsed url   href: '0.10.1' }
2376 verbose addNamed [ 'sails', '0.10.1' ]
2377 verbose addNamed [ '0.10.1', '0.10.1' ]
2378 silly lockFile 2bc46d85-sails-0-10-1 sails@0.10.1
2379 verbose lock sails@0.10.1 /Users/yanxin/.npm/2bc46d85-sails-0-10-1.lock
2380 verbose registry.get http://registry.npm.taobao.org/yeoman-generator not expired, no request
2381 verbose registry.get http://registry.npm.taobao.org/mkdirp not expired, no request
2382 verbose registry.get http://registry.npm.taobao.org/chai not expired, no request
2383 verbose registry.get http://registry.npm.taobao.org/sinon-chai not expired, no request
2384 verbose registry.get http://registry.npm.taobao.org/tap not expired, no request
2385 verbose registry.get http://registry.npm.taobao.org/term.js not expired, no request
2386 verbose registry.get http://registry.npm.taobao.org/socket.io not expired, no request
2387 verbose registry.get http://registry.npm.taobao.org/express not expired, no request
2388 verbose registry.get http://registry.npm.taobao.org/pty.js not expired, no request
2389 verbose registry.get http://registry.npm.taobao.org/express not expired, no request
2390 verbose registry.get http://registry.npm.taobao.org/commander not expired, no request
2391 verbose registry.get http://registry.npm.taobao.org/semver not expired, no request
2392 verbose registry.get http://registry.npm.taobao.org/coffee-script not expired, no request
2393 verbose registry.get http://registry.npm.taobao.org/async not expired, no request
2394 verbose registry.get http://registry.npm.taobao.org/dateformat not expired, no request
2395 verbose registry.get http://registry.npm.taobao.org/prompt not expired, no request
2396 verbose registry.get http://registry.npm.taobao.org/glob not expired, no request
2397 verbose registry.get http://registry.npm.taobao.org/async not expired, no request
2398 verbose registry.get http://registry.npm.taobao.org/nopt not expired, no request
2399 verbose registry.get http://registry.npm.taobao.org/iconv-lite not expired, no request
2400 verbose registry.get http://registry.npm.taobao.org/glob not expired, no request
2401 verbose registry.get http://registry.npm.taobao.org/underscore.string not expired, no request
2402 verbose registry.get http://registry.npm.taobao.org/watch not expired, no request
2403 verbose registry.get http://registry.npm.taobao.org/mocha not expired, no request
2404 verbose registry.get http://registry.npm.taobao.org/js-yaml not expired, no request
2405 verbose registry.get http://registry.npm.taobao.org/forever-monitor not expired, no request
2406 verbose registry.get http://registry.npm.taobao.org/resolve not expired, no request
2407 verbose registry.get http://registry.npm.taobao.org/lodash not expired, no request
2408 verbose registry.get http://registry.npm.taobao.org/async not expired, no request
2409 verbose registry.get http://registry.npm.taobao.org/minimist not expired, no request
2410 verbose registry.get http://registry.npm.taobao.org/prompt not expired, no request
2411 verbose registry.get http://registry.npm.taobao.org/winston not expired, no request
2412 verbose registry.get http://registry.npm.taobao.org/minimist not expired, no request
2413 verbose registry.get http://registry.npm.taobao.org/optimist not expired, no request
2414 verbose registry.get http://registry.npm.taobao.org/eventemitter2 not expired, no request
2415 verbose registry.get http://registry.npm.taobao.org/director not expired, no request
2416 verbose registry.get http://registry.npm.taobao.org/winston not expired, no request
2417 verbose registry.get http://registry.npm.taobao.org/async not expired, no request
2418 verbose registry.get http://registry.npm.taobao.org/yargs not expired, no request
2419 verbose registry.get http://registry.npm.taobao.org/ncp not expired, no request
2420 verbose registry.get http://registry.npm.taobao.org/debug not expired, no request
2421 verbose registry.get http://registry.npm.taobao.org/rc not expired, no request
2422 verbose registry.get http://registry.npm.taobao.org/minimatch not expired, no request
2423 verbose registry.get http://registry.npm.taobao.org/express not expired, no request
2424 silly lockFile 99e7dc5d--org-tap-download-tap-0-4-12-tgz http://registry.npm.taobao.org/tap/download/tap-0.4.12.tgz
2425 verbose lock http://registry.npm.taobao.org/tap/download/tap-0.4.12.tgz /Users/yanxin/.npm/99e7dc5d--org-tap-download-tap-0-4-12-tgz.lock
2426 verbose registry.get http://registry.npm.taobao.org/request not expired, no request
2427 verbose registry.get http://registry.npm.taobao.org/commander not expired, no request
2428 verbose registry.get http://registry.npm.taobao.org/node-theseus not expired, no request
2429 verbose registry.get http://registry.npm.taobao.org/nan not expired, no request
2430 verbose registry.get http://registry.npm.taobao.org/gulp not expired, no request
2431 verbose registry.get http://registry.npm.taobao.org/cnpm not expired, no request
2432 verbose registry.get http://registry.npm.taobao.org/bower not expired, no request
2433 verbose registry.get http://registry.npm.taobao.org/less not expired, no request
2434 verbose registry.get http://registry.npm.taobao.org/yo not expired, no request
2435 verbose registry.get http://registry.npm.taobao.org/nodemon not expired, no request
2436 silly lockFile 05835dff--download-node-theseus-0-2-5-tgz http://registry.npm.taobao.org/node-theseus/download/node-theseus-0.2.5.tgz
2437 verbose lock http://registry.npm.taobao.org/node-theseus/download/node-theseus-0.2.5.tgz /Users/yanxin/.npm/05835dff--download-node-theseus-0-2-5-tgz.lock
2438 silly lockFile de763c2d-org-gulp-download-gulp-3-8-7-tgz http://registry.npm.taobao.org/gulp/download/gulp-3.8.7.tgz
2439 verbose lock http://registry.npm.taobao.org/gulp/download/gulp-3.8.7.tgz /Users/yanxin/.npm/de763c2d-org-gulp-download-gulp-3-8-7-tgz.lock
2440 silly lockFile 16fb8214-org-cnpm-download-cnpm-0-5-2-tgz http://registry.npm.taobao.org/cnpm/download/cnpm-0.5.2.tgz
2441 verbose lock http://registry.npm.taobao.org/cnpm/download/cnpm-0.5.2.tgz /Users/yanxin/.npm/16fb8214-org-cnpm-download-cnpm-0-5-2-tgz.lock
2442 silly lockFile fe72c027-g-bower-download-bower-1-3-8-tgz http://registry.npm.taobao.org/bower/download/bower-1.3.8.tgz
2443 verbose lock http://registry.npm.taobao.org/bower/download/bower-1.3.8.tgz /Users/yanxin/.npm/fe72c027-g-bower-download-bower-1-3-8-tgz.lock
2444 silly lockFile 4c918853-org-less-download-less-1-7-4-tgz http://registry.npm.taobao.org/less/download/less-1.7.4.tgz
2445 verbose lock http://registry.npm.taobao.org/less/download/less-1.7.4.tgz /Users/yanxin/.npm/4c918853-org-less-download-less-1-7-4-tgz.lock
2446 silly lockFile 7e0069d1-bao-org-yo-download-yo-1-2-1-tgz http://registry.npm.taobao.org/yo/download/yo-1.2.1.tgz
2447 verbose lock http://registry.npm.taobao.org/yo/download/yo-1.2.1.tgz /Users/yanxin/.npm/7e0069d1-bao-org-yo-download-yo-1-2-1-tgz.lock
2448 verbose registry.get http://registry.npm.taobao.org/npm not expired, no request
2449 verbose registry.get http://registry.npm.taobao.org/sails not expired, no request
2450 verbose addRemoteTarball [ 'http://registry.npm.taobao.org/tap/download/tap-0.4.12.tgz',
2450 verbose addRemoteTarball   'e1a274aeec9e46680c59f10d0c51a6804054ebcb' ]
2451 silly lockFile 093aed72-demon-download-nodemon-1-2-1-tgz http://registry.npm.taobao.org/nodemon/download/nodemon-1.2.1.tgz
2452 verbose lock http://registry.npm.taobao.org/nodemon/download/nodemon-1.2.1.tgz /Users/yanxin/.npm/093aed72-demon-download-nodemon-1-2-1-tgz.lock
2453 silly lockFile 6e1adae2--org-npm-download-npm-1-4-23-tgz http://registry.npm.taobao.org/npm/download/npm-1.4.23.tgz
2454 verbose lock http://registry.npm.taobao.org/npm/download/npm-1.4.23.tgz /Users/yanxin/.npm/6e1adae2--org-npm-download-npm-1-4-23-tgz.lock
2455 silly lockFile 108677f1--sails-download-sails-0-10-1-tgz http://registry.npm.taobao.org/sails/download/sails-0.10.1.tgz
2456 verbose lock http://registry.npm.taobao.org/sails/download/sails-0.10.1.tgz /Users/yanxin/.npm/108677f1--sails-download-sails-0-10-1-tgz.lock
2457 verbose addRemoteTarball [ 'http://registry.npm.taobao.org/node-theseus/download/node-theseus-0.2.5.tgz',
2457 verbose addRemoteTarball   '0ca704cfff65683cc8e27bb1a5ed505faac6baaf' ]
2458 verbose addRemoteTarball [ 'http://registry.npm.taobao.org/gulp/download/gulp-3.8.7.tgz',
2458 verbose addRemoteTarball   '187e5316d65aa5188de447b41b3c0ee9bf322be1' ]
2459 verbose addRemoteTarball [ 'http://registry.npm.taobao.org/cnpm/download/cnpm-0.5.2.tgz',
2459 verbose addRemoteTarball   'a0efa4ee1b12f001ff00ccb139db1bd5d7f09bb1' ]
2460 verbose addRemoteTarball [ 'http://registry.npm.taobao.org/bower/download/bower-1.3.8.tgz',
2460 verbose addRemoteTarball   'afa3338a8a88a6e084c38112ea4a15998cbee3e6' ]
2461 verbose addRemoteTarball [ 'http://registry.npm.taobao.org/less/download/less-1.7.4.tgz',
2461 verbose addRemoteTarball   '1db03afd0d1b848d898d10d2690d79ee3834026d' ]
2462 verbose addRemoteTarball [ 'http://registry.npm.taobao.org/yo/download/yo-1.2.1.tgz',
2462 verbose addRemoteTarball   '95ca7731511534c782f5934fa0db6718487d1528' ]
2463 verbose addRemoteTarball [ 'http://registry.npm.taobao.org/nodemon/download/nodemon-1.2.1.tgz',
2463 verbose addRemoteTarball   '02a288045652e92350e7d752a8054472ed2c4824' ]
2464 verbose addRemoteTarball [ 'http://registry.npm.taobao.org/npm/download/npm-1.4.23.tgz',
2464 verbose addRemoteTarball   '3888d9f7168eb0e3371cb8bfa3968b1906441717' ]
2465 silly lockFile 3b629890-yeoman-generator-0-15-0 yeoman-generator@0.15.0
2466 silly lockFile 3b629890-yeoman-generator-0-15-0 yeoman-generator@0.15.0
2467 silly lockFile ba2b3f89-sinon-chai-2-4-0 sinon-chai@2.4.0
2468 silly lockFile ba2b3f89-sinon-chai-2-4-0 sinon-chai@2.4.0
2469 silly lockFile 6c38c3a7-chai-1-7-2 chai@1.7.2
2470 silly lockFile 6c38c3a7-chai-1-7-2 chai@1.7.2
2471 silly lockFile 67d2df2a-mkdirp-0-3-5 mkdirp@0.3.5
2472 silly lockFile 67d2df2a-mkdirp-0-3-5 mkdirp@0.3.5
2473 silly lockFile 8f36e462-socket-io-0-9-13 socket.io@0.9.13
2474 silly lockFile 8f36e462-socket-io-0-9-13 socket.io@0.9.13
2475 silly lockFile 3ec67e6d-term-js-0-0-3 term.js@0.0.3
2476 silly lockFile 3ec67e6d-term-js-0-0-3 term.js@0.0.3
2477 silly lockFile 0557bc2a-express-3-1-0 express@3.1.0
2478 silly lockFile 0557bc2a-express-3-1-0 express@3.1.0
2479 silly lockFile fdae4232-express-3-2-6 express@3.2.6
2480 silly lockFile fdae4232-express-3-2-6 express@3.2.6
2481 silly lockFile 2016e061-commander-1-3-2 commander@1.3.2
2482 silly lockFile 2016e061-commander-1-3-2 commander@1.3.2
2483 silly lockFile 5b565c06-pty-js-0-2-3 pty.js@0.2.3
2484 silly lockFile 5b565c06-pty-js-0-2-3 pty.js@0.2.3
2485 silly lockFile 022c8436-coffee-script-1-3-3 coffee-script@1.3.3
2486 silly lockFile 022c8436-coffee-script-1-3-3 coffee-script@1.3.3
2487 silly lockFile 01678457-semver-1-0-14 semver@1.0.14
2488 silly lockFile 01678457-semver-1-0-14 semver@1.0.14
2489 silly lockFile 644d6e27-dateformat-1-0-2-1-2-3 dateformat@1.0.2-1.2.3
2490 silly lockFile 644d6e27-dateformat-1-0-2-1-2-3 dateformat@1.0.2-1.2.3
2491 silly lockFile 098b530d-async-0-2-10 async@0.2.10
2492 silly lockFile 098b530d-async-0-2-10 async@0.2.10
2493 silly lockFile cd9b35ef-prompt-0-1-12 prompt@0.1.12
2494 silly lockFile cd9b35ef-prompt-0-1-12 prompt@0.1.12
2495 silly lockFile 09d21715-async-0-1-22 async@0.1.22
2496 silly lockFile 09d21715-async-0-1-22 async@0.1.22
2497 silly lockFile 5d877021-iconv-lite-0-2-11 iconv-lite@0.2.11
2498 silly lockFile 5d877021-iconv-lite-0-2-11 iconv-lite@0.2.11
2499 silly lockFile 3fffafa6-glob-3-2-11 glob@3.2.11
2500 silly lockFile 3fffafa6-glob-3-2-11 glob@3.2.11
2501 verbose addRemoteTarball [ 'http://registry.npm.taobao.org/sails/download/sails-0.10.1.tgz',
2501 verbose addRemoteTarball   '0bcb2bee0224d4e73f3b00accf29a6f9c8537b69' ]
2502 silly lockFile 1be903a1-nopt-1-0-10 nopt@1.0.10
2503 silly lockFile 1be903a1-nopt-1-0-10 nopt@1.0.10
2504 silly lockFile 5c083954-underscore-string-2-2-1 underscore.string@2.2.1
2505 silly lockFile 5c083954-underscore-string-2-2-1 underscore.string@2.2.1
2506 silly lockFile ab465912-glob-3-1-21 glob@3.1.21
2507 silly lockFile ab465912-glob-3-1-21 glob@3.1.21
2508 silly lockFile 0aecb717-js-yaml-2-0-5 js-yaml@2.0.5
2509 silly lockFile 0aecb717-js-yaml-2-0-5 js-yaml@2.0.5
2510 silly lockFile 1fd0cbc9-watch-0-8-0 watch@0.8.0
2511 silly lockFile 1fd0cbc9-watch-0-8-0 watch@0.8.0
2512 silly lockFile 8416e357-mocha-1-11-0 mocha@1.11.0
2513 silly lockFile 8416e357-mocha-1-11-0 mocha@1.11.0
2514 silly lockFile 355c84e8-forever-monitor-1-2-3 forever-monitor@1.2.3
2515 silly lockFile 355c84e8-forever-monitor-1-2-3 forever-monitor@1.2.3
2516 silly lockFile 9802d919-lodash-0-9-2 lodash@0.9.2
2517 silly lockFile 9802d919-lodash-0-9-2 lodash@0.9.2
2518 silly lockFile 92f0553b-minimist-0-0-10 minimist@0.0.10
2519 silly lockFile 92f0553b-minimist-0-0-10 minimist@0.0.10
2520 silly lockFile 61856ab9-prompt-0-2-11 prompt@0.2.11
2521 silly lockFile 61856ab9-prompt-0-2-11 prompt@0.2.11
2522 silly lockFile be62480b-async-0-2-9 async@0.2.9
2523 silly lockFile be62480b-async-0-2-9 async@0.2.9
2524 silly lockFile 6403b4d6-optimist-0-6-0 optimist@0.6.0
2525 silly lockFile 6403b4d6-optimist-0-6-0 optimist@0.6.0
2526 silly lockFile 1aad4820-eventemitter2-0-4-12 eventemitter2@0.4.12
2527 silly lockFile 1aad4820-eventemitter2-0-4-12 eventemitter2@0.4.12
2528 silly lockFile 6b025e09-winston-0-6-2 winston@0.6.2
2529 silly lockFile 6b025e09-winston-0-6-2 winston@0.6.2
2530 silly lockFile 95464470-resolve-0-3-1 resolve@0.3.1
2531 silly lockFile 95464470-resolve-0-3-1 resolve@0.3.1
2532 silly lockFile 3d809785-async-0-8-0 async@0.8.0
2533 silly lockFile 3d809785-async-0-8-0 async@0.8.0
2534 silly lockFile 66ac613a-winston-0-7-2 winston@0.7.2
2535 silly lockFile 66ac613a-winston-0-7-2 winston@0.7.2
2536 silly lockFile f33fb291-director-1-1-10 director@1.1.10
2537 silly lockFile f33fb291-director-1-1-10 director@1.1.10
2538 silly lockFile 22c6b485-minimist-0-0-8 minimist@0.0.8
2539 silly lockFile 22c6b485-minimist-0-0-8 minimist@0.0.8
2540 silly lockFile 6b8b29b1-yargs-1-2-6 yargs@1.2.6
2541 silly lockFile 6b8b29b1-yargs-1-2-6 yargs@1.2.6
2542 silly lockFile a38530e1-debug-0-8-1 debug@0.8.1
2543 silly lockFile a38530e1-debug-0-8-1 debug@0.8.1
2544 silly lockFile e43cb36a-ncp-0-4-2 ncp@0.4.2
2545 silly lockFile e43cb36a-ncp-0-4-2 ncp@0.4.2
2546 silly lockFile 0e486d9c-rc-0-3-5 rc@0.3.5
2547 silly lockFile 0e486d9c-rc-0-3-5 rc@0.3.5
2548 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
2549 silly lockFile a72880d0-minimatch-0-2-14 minimatch@0.2.14
2550 silly lockFile 5b69df19-express-4-0-0 express@4.0.0
2551 silly lockFile 5b69df19-express-4-0-0 express@4.0.0
2552 silly lockFile 9ba6a9aa-request-2-16-6 request@2.16.6
2553 silly lockFile 9ba6a9aa-request-2-16-6 request@2.16.6
2554 silly lockFile fa16a2ce-commander-0-6-1 commander@0.6.1
2555 silly lockFile fa16a2ce-commander-0-6-1 commander@0.6.1
2556 silly lockFile 98ceedb5-nan-0-3-2 nan@0.3.2
2557 silly lockFile 98ceedb5-nan-0-3-2 nan@0.3.2
2558 info retry fetch attempt 1 at 15:20:47
2559 verbose fetch to= /var/folders/rw/6g9pzg3n699gzz46j5q6bdpr0000gn/T/npm-41950-emQG1PVC/registry.npm.taobao.org/npm/download/npm-1.4.23.tgz
2560 info retry fetch attempt 1 at 15:20:47
2561 verbose fetch to= /var/folders/rw/6g9pzg3n699gzz46j5q6bdpr0000gn/T/npm-41950-emQG1PVC/registry.npm.taobao.org/sails/download/sails-0.10.1.tgz
2562 info retry fetch attempt 1 at 15:20:47
2563 verbose fetch to= /var/folders/rw/6g9pzg3n699gzz46j5q6bdpr0000gn/T/npm-41950-emQG1PVC/registry.npm.taobao.org/node-theseus/download/node-theseus-0.2.5.tgz
2564 info retry fetch attempt 1 at 15:20:47
2565 verbose fetch to= /var/folders/rw/6g9pzg3n699gzz46j5q6bdpr0000gn/T/npm-41950-emQG1PVC/registry.npm.taobao.org/gulp/download/gulp-3.8.7.tgz
2566 info retry fetch attempt 1 at 15:20:47
2567 verbose fetch to= /var/folders/rw/6g9pzg3n699gzz46j5q6bdpr0000gn/T/npm-41950-emQG1PVC/registry.npm.taobao.org/cnpm/download/cnpm-0.5.2.tgz
2568 info retry fetch attempt 1 at 15:20:47
2569 verbose fetch to= /var/folders/rw/6g9pzg3n699gzz46j5q6bdpr0000gn/T/npm-41950-emQG1PVC/registry.npm.taobao.org/less/download/less-1.7.4.tgz
2570 info retry fetch attempt 1 at 15:20:47
2571 verbose fetch to= /var/folders/rw/6g9pzg3n699gzz46j5q6bdpr0000gn/T/npm-41950-emQG1PVC/registry.npm.taobao.org/bower/download/bower-1.3.8.tgz
2572 info retry fetch attempt 1 at 15:20:47
2573 verbose fetch to= /var/folders/rw/6g9pzg3n699gzz46j5q6bdpr0000gn/T/npm-41950-emQG1PVC/registry.npm.taobao.org/yo/download/yo-1.2.1.tgz
2574 http GET http://registry.npm.taobao.org/npm/download/npm-1.4.23.tgz
2575 info retry fetch attempt 1 at 15:20:47
2576 verbose fetch to= /var/folders/rw/6g9pzg3n699gzz46j5q6bdpr0000gn/T/npm-41950-emQG1PVC/registry.npm.taobao.org/tap/download/tap-0.4.12.tgz
2577 http GET http://registry.npm.taobao.org/sails/download/sails-0.10.1.tgz
2578 info retry fetch attempt 1 at 15:20:47
2579 verbose fetch to= /var/folders/rw/6g9pzg3n699gzz46j5q6bdpr0000gn/T/npm-41950-emQG1PVC/registry.npm.taobao.org/nodemon/download/nodemon-1.2.1.tgz
2580 http GET http://registry.npm.taobao.org/node-theseus/download/node-theseus-0.2.5.tgz
2581 http GET http://registry.npm.taobao.org/gulp/download/gulp-3.8.7.tgz
2582 http GET http://registry.npm.taobao.org/cnpm/download/cnpm-0.5.2.tgz
2583 http GET http://registry.npm.taobao.org/less/download/less-1.7.4.tgz
2584 http GET http://registry.npm.taobao.org/bower/download/bower-1.3.8.tgz
2585 http GET http://registry.npm.taobao.org/yo/download/yo-1.2.1.tgz
2586 http GET http://registry.npm.taobao.org/tap/download/tap-0.4.12.tgz
2587 http GET http://registry.npm.taobao.org/nodemon/download/nodemon-1.2.1.tgz
2588 silly resolved [ { name: 'socket.io',
2588 silly resolved     version: '0.9.13',
2588 silly resolved     description: 'Real-time apps made cross-browser & easy with a WebSocket-like API',
2588 silly resolved     homepage: 'http://socket.io',
2588 silly resolved     keywords: [ 'websocket', 'socket', 'realtime', 'socket.io', 'comet', 'ajax' ],
2588 silly resolved     author: { name: 'Guillermo Rauch', email: 'guillermo@learnboost.com' },
2588 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
2588 silly resolved     repository:
2588 silly resolved      { type: 'git',
2588 silly resolved        url: 'https://github.com/LearnBoost/socket.io.git' },
2588 silly resolved     dependencies:
2588 silly resolved      { 'socket.io-client': '0.9.11',
2588 silly resolved        policyfile: '0.0.4',
2588 silly resolved        base64id: '0.1.0',
2588 silly resolved        redis: '0.7.3' },
2588 silly resolved     devDependencies:
2588 silly resolved      { expresso: '0.9.2',
2588 silly resolved        should: '*',
2588 silly resolved        benchmark: '0.2.2',
2588 silly resolved        microtime: '0.1.3-1',
2588 silly resolved        colors: '0.5.1' },
2588 silly resolved     optionalDependencies: { redis: '0.7.3' },
2588 silly resolved     main: 'index',
2588 silly resolved     engines: { node: '>= 0.4.0' },
2588 silly resolved     scripts: { test: 'make test' },
2588 silly resolved     readme: '# Socket.IO\n\nSocket.IO is a Node.JS project that makes WebSockets and realtime possible in\nall browsers. It also enhances WebSockets by providing built-in multiplexing,\nhorizontal scalability, automatic JSON encoding/decoding, and more.\n\n## How to Install\n\n```bash\nnpm install socket.io\n```\n\n## How to use\n\nFirst, require `socket.io`:\n\n```js\nvar io = require(\'socket.io\');\n```\n\nNext, attach it to a HTTP/HTTPS server. If you\'re using the fantastic `express`\nweb framework:\n\n#### Express 3.x\n\n```js\nvar app = express()\n  , server = require(\'http\').createServer(app)\n  , io = io.listen(server);\n\nserver.listen(80);\n\nio.sockets.on(\'connection\', function (socket) {\n  socket.emit(\'news\', { hello: \'world\' });\n  socket.on(\'my other event\', function (data) {\n    console.log(data);\n  });\n});\n```\n\n#### Express 2.x\n\n```js\nvar app = express.createServer()\n  , io = io.listen(app);\n\napp.listen(80);\n\nio.sockets.on(\'connection\', function (socket) {\n  socket.emit(\'news\', { hello: \'world\' });\n  socket.on(\'my other event\', function (data) {\n    console.log(data);\n  });\n});\n```\n\nFinally, load it from the client side code:\n\n```html\n<script src="/socket.io/socket.io.js"></script>\n<script>\n  var socket = io.connect(\'http://localhost\');\n  socket.on(\'news\', function (data) {\n    console.log(data);\n    socket.emit(\'my other event\', { my: \'data\' });\n  });\n</script>\n```\n\nFor more thorough examples, look at the `examples/` directory.\n\n## Short recipes\n\n### Sending and receiving events.\n\nSocket.IO allows you to emit and receive custom events.\nBesides `connect`, `message` and `disconnect`, you can emit custom events:\n\n```js\n// note, io.listen(<port>) will create a http server for you\nvar io = require(\'socket.io\').listen(80);\n\nio.sockets.on(\'connection\', function (socket) {\n  io.sockets.emit(\'this\', { will: \'be received by everyone\' });\n\n  socket.on(\'private message\', function (from, msg) {\n    console.log(\'I received a private message by \', from, \' saying \', msg);\n  });\n\n  socket.on(\'disconnect\', function () {\n    io.sockets.emit(\'user disconnected\');\n  });\n});\n```\n\n### Storing data associated to a client\n\nSometimes it\'s necessary to store data associated with a client that\'s\nnecessary for the duration of the session.\n\n#### Server side\n\n```js\nvar io = require(\'socket.io\').listen(80);\n\nio.sockets.on(\'connection\', function (socket) {\n  socket.on(\'set nickname\', function (name) {\n    socket.set(\'nickname\', name, function () { socket.emit(\'ready\'); });\n  });\n\n  socket.on(\'msg\', function () {\n    socket.get(\'nickname\', function (err, name) {\n      console.log(\'Chat message by \', name);\n    });\n  });\n});\n```\n\n#### Client side\n\n```html\n<script>\n  var socket = io.connect(\'http://localhost\');\n\n  socket.on(\'connect\', function () {\n    socket.emit(\'set nickname\', prompt(\'What is your nickname?\'));\n    socket.on(\'ready\', function () {\n      console.log(\'Connected !\');\n      socket.emit(\'msg\', prompt(\'What is your message?\'));\n    });\n  });\n</script>\n```\n\n### Restricting yourself to a namespace\n\nIf you have control over all the messages and events emitted for a particular\napplication, using the default `/` namespace works.\n\nIf you want to leverage 3rd-party code, or produce code to share with others,\nsocket.io provides a way of namespacing a `socket`.\n\nThis has the benefit of `multiplexing` a single connection. Instead of\nsocket.io using two `WebSocket` connections, it\'ll use one.\n\nThe following example defines a socket that listens on \'/chat\' and one for\n\'/news\':\n\n#### Server side\n\n```js\nvar io = require(\'socket.io\').listen(80);\n\nvar chat = io\n  .of(\'/chat\')\n  .on(\'connection\', function (socket) {\n    socket.emit(\'a message\', { that: \'only\', \'/chat\': \'will get\' });\n    chat.emit(\'a message\', { everyone: \'in\', \'/chat\': \'will get\' });\n  });\n\nvar news = io\n  .of(\'/news\');\n  .on(\'connection\', function (socket) {\n    socket.emit(\'item\', { news: \'item\' });\n  });\n```\n\n#### Client side:\n\n```html\n<script>\n  var chat = io.connect(\'http://localhost/chat\')\n    , news = io.connect(\'http://localhost/news\');\n\n  chat.on(\'connect\', function () {\n    chat.emit(\'hi!\');\n  });\n\n  news.on(\'news\', function () {\n    news.emit(\'woot\');\n  });\n</script>\n```\n\n### Sending volatile messages.\n\nSometimes certain messages can be dropped. Let\'s say you have an app that\nshows realtime tweets for the keyword `bieber`. \n\nIf a certain client is not ready to receive messages (because of network slowness\nor other issues, or because he\'s connected through long polling and is in the\nmiddle of a request-response cycle), if he doesn\'t receive ALL the tweets related\nto bieber your application won\'t suffer.\n\nIn that case, you might want to send those messages as volatile messages.\n\n#### Server side\n\n```js\nvar io = require(\'socket.io\').listen(80);\n\nio.sockets.on(\'connection\', function (socket) {\n  var tweets = setInterval(function () {\n    getBieberTweet(function (tweet) {\n      socket.volatile.emit(\'bieber tweet\', tweet);\n    });\n  }, 100);\n\n  socket.on(\'disconnect\', function () {\n    clearInterval(tweets);\n  });\n});\n```\n\n#### Client side\n\nIn the client side, messages are received the same way whether they\'re volatile\nor not.\n\n### Getting acknowledgements\n\nSometimes, you might want to get a callback when the client confirmed the message\nreception.\n\nTo do this, simply pass a function as the last parameter of `.send` or `.emit`.\nWhat\'s more, when you use `.emit`, the acknowledgement is done by you, which\nmeans you can also pass data along:\n\n#### Server side\n\n```js\nvar io = require(\'socket.io\').listen(80);\n\nio.sockets.on(\'connection\', function (socket) {\n  socket.on(\'ferret\', function (name, fn) {\n    fn(\'woot\');\n  });\n});\n```\n\n#### Client side\n\n```html\n<script>\n  var socket = io.connect(); // TIP: .connect with no args does auto-discovery\n  socket.on(\'connect\', function () { // TIP: you can avoid listening on `connect` and listen on events directly too!\n    socket.emit(\'ferret\', \'tobi\', function (data) {\n      console.log(data); // data will be \'woot\'\n    });\n  });\n</script>\n```\n\n### Broadcasting messages\n\nTo broadcast, simply add a `broadcast` flag to `emit` and `send` method calls.\nBroadcasting means sending a message to everyone else except for the socket\nthat starts it.\n\n#### Server side\n\n```js\nvar io = require(\'socket.io\').listen(80);\n\nio.sockets.on(\'connection\', function (socket) {\n  socket.broadcast.emit(\'user connected\');\n  socket.broadcast.json.send({ a: \'message\' });\n});\n```\n\n### Rooms\n\nSometimes you want to put certain sockets in the same room, so that it\'s easy\nto broadcast to all of them together.\n\nThink of this as built-in channels for sockets. Sockets `join` and `leave`\nrooms in each socket.\n\n#### Server side\n\n```js\nvar io = require(\'socket.io\').listen(80);\n\nio.sockets.on(\'connection\', function (socket) {\n  socket.join(\'justin bieber fans\');\n  socket.broadcast.to(\'justin bieber fans\').emit(\'new fan\');\n  io.sockets.in(\'rammstein fans\').emit(\'new non-fan\');\n});\n```\n\n### Using it just as a cross-browser WebSocket\n\nIf you just want the WebSocket semantics, you can do that too.\nSimply leverage `send` and listen on the `message` event:\n\n#### Server side\n\n```js\nvar io = require(\'socket.io\').listen(80);\n\nio.sockets.on(\'connection\', function (socket) {\n  socket.on(\'message\', function () { });\n  socket.on(\'disconnect\', function () { });\n});\n```\n\n#### Client side\n\n```html\n<script>\n  var socket = io.connect(\'http://localhost/\');\n  socket.on(\'connect\', function () {\n    socket.send(\'hi\');\n\n    socket.on(\'message\', function (msg) {\n      // my msg\n    });\n  });\n</script>\n```\n\n### Changing configuration\n\nConfiguration in socket.io is TJ-style:\n\n#### Server side\n\n```js\nvar io = require(\'socket.io\').listen(80);\n\nio.configure(function () {\n  io.set(\'transports\', [\'websocket\', \'flashsocket\', \'xhr-polling\']);\n});\n\nio.configure(\'development\', function () {\n  io.set(\'transports\', [\'websocket\', \'xhr-polling\']);\n  io.enable(\'log\');\n});\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
2588 silly resolved     readmeFilename: 'Readme.md',
2588 silly resolved     bugs: { url: 'https://github.com/LearnBoost/socket.io/issues' },
2588 silly resolved     _id: 'socket.io@0.9.13',
2588 silly resolved     _shasum: '3e2a5e71ee47978cb18be4bb90217ad7a5d4f2fb',
2588 silly resolved     _from: 'socket.io@0.9.13',
2588 silly resolved     _resolved: 'http://registry.npm.taobao.org/socket.io/download/socket.io-0.9.13.tgz' } ]
2589 info install socket.io@0.9.13 into /usr/local/lib/node_modules/tty.js
2590 info installOne socket.io@0.9.13
2591 silly resolved [ { name: 'express',
2591 silly resolved     description: 'Sinatra inspired web development framework',
2591 silly resolved     version: '3.1.0',
2591 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
2591 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
2591 silly resolved     dependencies:
2591 silly resolved      { connect: '2.7.2',
2591 silly resolved        commander: '0.6.1',
2591 silly resolved        'range-parser': '0.0.4',
2591 silly resolved        mkdirp: '0.3.3',
2591 silly resolved        cookie: '0.0.5',
2591 silly resolved        'buffer-crc32': '0.1.1',
2591 silly resolved        fresh: '0.1.0',
2591 silly resolved        methods: '0.0.1',
2591 silly resolved        send: '0.1.0',
2591 silly resolved        'cookie-signature': '0.0.1',
2591 silly resolved        debug: '*' },
2591 silly resolved     devDependencies:
2591 silly resolved      { ejs: '*',
2591 silly resolved        mocha: '*',
2591 silly resolved        jade: '*',
2591 silly resolved        hjs: '*',
2591 silly resolved        stylus: '*',
2591 silly resolved        should: '*',
2591 silly resolved        'connect-redis': '*',
2591 silly resolved        'github-flavored-markdown': '*',
2591 silly resolved        supertest: '0.0.1' },
2591 silly resolved     keywords:
2591 silly resolved      [ 'express',
2591 silly resolved        'framework',
2591 silly resolved        'sinatra',
2591 silly resolved        'web',
2591 silly resolved        'rest',
2591 silly resolved        'restful',
2591 silly resolved        'router',
2591 silly resolved        'app',
2591 silly resolved        'api' ],
2591 silly resolved     repository: { type: 'git', url: 'git://github.com/visionmedia/express' },
2591 silly resolved     main: 'index',
2591 silly resolved     bin: { express: './bin/express' },
2591 silly resolved     scripts: { prepublish: 'npm prune', test: 'make test' },
2591 silly resolved     engines: { node: '*' },
2591 silly resolved     readme: '![express logo](http://f.cl.ly/items/0V2S1n0K1i3y1c122g04/Screen%20Shot%202012-04-11%20at%209.59.42%20AM.png)\n\n  Fast, unopinionated, minimalist web framework for [node](http://nodejs.org). [![Build Status](https://secure.travis-ci.org/visionmedia/express.png)](http://travis-ci.org/visionmedia/express)\n\n```js\nvar express = require(\'express\');\nvar app = express();\n\napp.get(\'/\', function(req, res){\n  res.send(\'Hello World\');\n});\n\napp.listen(3000);\n```\n\n## Installation\n\n    $ npm install -g express\n\n## Quick Start\n\n The quickest way to get started with express is to utilize the executable `express(1)` to generate an application as shown below:\n\n Create the app:\n\n    $ npm install -g express\n    $ express /tmp/foo && cd /tmp/foo\n\n Install dependencies:\n\n    $ npm install\n\n Start the server:\n\n    $ node app\n\n## Features\n\n  * Built on [Connect](http://github.com/senchalabs/connect)\n  * Robust routing\n  * HTTP helpers (redirection, caching, etc)\n  * View system supporting 14+ template engines\n  * Content negotiation\n  * Focus on high performance\n  * Environment based configuration\n  * Executable for generating applications quickly\n  * High test coverage\n\n## Philosophy\n\n  The Express philosophy is to provide small, robust tooling for HTTP servers. Making\n  it a great solution for single page applications, web sites, hybrids, or public\n  HTTP APIs.\n  \n  Built on Connect you can use _only_ what you need, and nothing more, applications\n  can be as big or as small as you like, even a single file. Express does\n  not force you to use any specific ORM or template engine. With support for over\n  14 template engines via [Consolidate.js](http://github.com/visionmedia/consolidate.js)\n  you can quickly craft your perfect framework.\n\n## More Information\n\n  * Join #express on freenode\n  * [Google Group](http://groups.google.com/group/express-js) for discussion\n  * Follow [tjholowaychuk](http://twitter.com/tjholowaychuk) on twitter for updates\n  * Visit the [Wiki](http://github.com/visionmedia/express/wiki)\n  * [日本語ドキュメンテーション](http://hideyukisaito.com/doc/expressjs/) by [hideyukisaito](https://github.com/hideyukisaito)\n  * [Русскоязычная документация](http://express-js.ru/)\n\n## Viewing Examples\n\nClone the Express repo, then install the dev dependencies to install all the example / test suite deps:\n\n    $ git clone git://github.com/visionmedia/express.git --depth 1\n    $ cd express\n    $ npm install\n\nthen run whichever tests you want:\n\n    $ node examples/content-negotiation\n\n## Running Tests\n\nTo run the test suite first invoke the following command within the repo, installing the development dependencies:\n\n    $ npm install\n\nthen run the tests:\n\n    $ make test\n\n## Contributors\n\n```\nproject: express\ncommits: 3559\nactive : 468 days\nfiles  : 237\nauthors: \n 1891\tTj Holowaychuk          53.1%\n 1285\tvisionmedia             36.1%\n  182\tTJ Holowaychuk          5.1%\n   54\tAaron Heckmann          1.5%\n   34\tcsausdev                1.0%\n   26\tciaranj                 0.7%\n   21\tRobert Sköld            0.6%\n    6\tGuillermo Rauch         0.2%\n    3\tDav Glass               0.1%\n    3\tNick Poulden            0.1%\n    2\tRandy Merrill           0.1%\n    2\tBenny Wong              0.1%\n    2\tHunter Loftis           0.1%\n    2\tJake Gordon             0.1%\n    2\tBrian McKinney          0.1%\n    2\tRoman Shtylman          0.1%\n    2\tBen Weaver              0.1%\n    2\tDave Hoover             0.1%\n    2\tEivind Fjeldstad        0.1%\n    2\tDaniel Shaw             0.1%\n    1\tMatt Colyer             0.0%\n    1\tPau Ramon               0.0%\n    1\tPero Pejovic            0.0%\n    1\tPeter Rekdal Sunde      0.0%\n    1\tRaynos                  0.0%\n    1\tTeng Siong Ong          0.0%\n    1\tViktor Kelemen          0.0%\n    1\tctide                   0.0%\n    1\t8bitDesigner            0.0%\n    1\tisaacs                  0.0%\n    1\tmgutz                   0.0%\n    1\tpikeas                  0.0%\n    1\tshuwatto                0.0%\n    1\ttstrimple               0.0%\n    1\tewoudj                  0.0%\n    1\tAdam Sanderson          0.0%\n    1\tAndrii Kostenko         0.0%\n    1\tAndy Hiew               0.0%\n    1\tArpad Borsos            0.0%\n    1\tAshwin Purohit          0.0%\n    1\tBenjen                  0.0%\n    1\tDarren Torpey           0.0%\n    1\tGreg Ritter             0.0%\n    1\tGregory Ritter          0.0%\n    1\tJames Herdman           0.0%\n    1\tJim Snodgrass           0.0%\n    1\tJoe McCann              0.0%\n    1\tJonathan Dumaine        0.0%\n    1\tJonathan Palardy        0.0%\n    1\tJonathan Zacsh          0.0%\n    1\tJustin Lilly            0.0%\n    1\tKen Sato                0.0%\n    1\tMaciej Małecki          0.0%\n    1\tMasahiro Hayashi        0.0%\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2009-2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
2591 silly resolved     readmeFilename: 'Readme.md',
2591 silly resolved     bugs: { url: 'https://github.com/visionmedia/express/issues' },
2591 silly resolved     homepage: 'https://github.com/visionmedia/express',
2591 silly resolved     _id: 'express@3.1.0',
2591 silly resolved     _shasum: 'f869b2d92320f5c3dd496c172e06f02b6ad43310',
2591 silly resolved     _from: 'express@3.1.0',
2591 silly resolved     _resolved: 'http://registry.npm.taobao.org/express/download/express-3.1.0.tgz' } ]
2592 info install express@3.1.0 into /usr/local/lib/node_modules/tty.js
2593 info installOne express@3.1.0
2594 silly resolved [ { name: 'express',
2594 silly resolved     description: 'Sinatra inspired web development framework',
2594 silly resolved     version: '3.2.6',
2594 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
2594 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
2594 silly resolved     dependencies:
2594 silly resolved      { connect: '2.7.11',
2594 silly resolved        commander: '0.6.1',
2594 silly resolved        'range-parser': '0.0.4',
2594 silly resolved        mkdirp: '0.3.4',
2594 silly resolved        cookie: '0.1.0',
2594 silly resolved        'buffer-crc32': '0.2.1',
2594 silly resolved        fresh: '0.1.0',
2594 silly resolved        methods: '0.0.1',
2594 silly resolved        send: '0.1.0',
2594 silly resolved        'cookie-signature': '1.0.1',
2594 silly resolved        debug: '*' },
2594 silly resolved     devDependencies:
2594 silly resolved      { ejs: '*',
2594 silly resolved        mocha: '*',
2594 silly resolved        jade: '*',
2594 silly resolved        hjs: '*',
2594 silly resolved        stylus: '*',
2594 silly resolved        should: '*',
2594 silly resolved        'connect-redis': '*',
2594 silly resolved        marked: '*',
2594 silly resolved        supertest: '0.6.0' },
2594 silly resolved     keywords:
2594 silly resolved      [ 'express',
2594 silly resolved        'framework',
2594 silly resolved        'sinatra',
2594 silly resolved        'web',
2594 silly resolved        'rest',
2594 silly resolved        'restful',
2594 silly resolved        'router',
2594 silly resolved        'app',
2594 silly resolved        'api' ],
2594 silly resolved     repository: { type: 'git', url: 'git://github.com/visionmedia/express' },
2594 silly resolved     main: 'index',
2594 silly resolved     bin: { express: './bin/express' },
2594 silly resolved     scripts: { prepublish: 'npm prune', test: 'make test' },
2594 silly resolved     engines: { node: '*' },
2594 silly resolved     readme: '![express logo](http://f.cl.ly/items/0V2S1n0K1i3y1c122g04/Screen%20Shot%202012-04-11%20at%209.59.42%20AM.png)\n\n  Fast, unopinionated, minimalist web framework for [node](http://nodejs.org). [![Build Status](https://secure.travis-ci.org/visionmedia/express.png)](http://travis-ci.org/visionmedia/express) [![Dependency Status](https://gemnasium.com/visionmedia/express.png)](https://gemnasium.com/visionmedia/express)\n\n```js\nvar express = require(\'express\');\nvar app = express();\n\napp.get(\'/\', function(req, res){\n  res.send(\'Hello World\');\n});\n\napp.listen(3000);\n```\n\n## Installation\n\n    $ npm install -g express\n\n## Quick Start\n\n The quickest way to get started with express is to utilize the executable `express(1)` to generate an application as shown below:\n\n Create the app:\n\n    $ npm install -g express\n    $ express /tmp/foo && cd /tmp/foo\n\n Install dependencies:\n\n    $ npm install\n\n Start the server:\n\n    $ node app\n\n## Features\n\n  * Built on [Connect](http://github.com/senchalabs/connect)\n  * Robust routing\n  * HTTP helpers (redirection, caching, etc)\n  * View system supporting 14+ template engines\n  * Content negotiation\n  * Focus on high performance\n  * Environment based configuration\n  * Executable for generating applications quickly\n  * High test coverage\n\n## Philosophy\n\n  The Express philosophy is to provide small, robust tooling for HTTP servers. Making\n  it a great solution for single page applications, web sites, hybrids, or public\n  HTTP APIs.\n\n  Built on Connect you can use _only_ what you need, and nothing more, applications\n  can be as big or as small as you like, even a single file. Express does\n  not force you to use any specific ORM or template engine. With support for over\n  14 template engines via [Consolidate.js](http://github.com/visionmedia/consolidate.js)\n  you can quickly craft your perfect framework.\n\n## More Information\n\n  * Join #express on freenode\n  * [Google Group](http://groups.google.com/group/express-js) for discussion\n  * Follow [tjholowaychuk](http://twitter.com/tjholowaychuk) on twitter for updates\n  * Visit the [Wiki](http://github.com/visionmedia/express/wiki)\n  * [Русскоязычная документация](http://jsman.ru/express/)\n  * Run express examples [online](https://runnable.com/express)\n\n## Viewing Examples\n\nClone the Express repo, then install the dev dependencies to install all the example / test suite deps:\n\n    $ git clone git://github.com/visionmedia/express.git --depth 1\n    $ cd express\n    $ npm install\n\nthen run whichever tests you want:\n\n    $ node examples/content-negotiation\n\n## Running Tests\n\nTo run the test suite first invoke the following command within the repo, installing the development dependencies:\n\n    $ npm install\n\nthen run the tests:\n\n    $ make test\n\n## Contributors\n\n```\nproject: express\ncommits: 3559\nactive : 468 days\nfiles  : 237\nauthors:\n 1891\tTj Holowaychuk          53.1%\n 1285\tvisionmedia             36.1%\n  182\tTJ Holowaychuk          5.1%\n   54\tAaron Heckmann          1.5%\n   34\tcsausdev                1.0%\n   26\tciaranj                 0.7%\n   21\tRobert Sköld            0.6%\n    6\tGuillermo Rauch         0.2%\n    3\tDav Glass               0.1%\n    3\tNick Poulden            0.1%\n    2\tRandy Merrill           0.1%\n    2\tBenny Wong              0.1%\n    2\tHunter Loftis           0.1%\n    2\tJake Gordon             0.1%\n    2\tBrian McKinney          0.1%\n    2\tRoman Shtylman          0.1%\n    2\tBen Weaver              0.1%\n    2\tDave Hoover             0.1%\n    2\tEivind Fjeldstad        0.1%\n    2\tDaniel Shaw             0.1%\n    1\tMatt Colyer             0.0%\n    1\tPau Ramon               0.0%\n    1\tPero Pejovic            0.0%\n    1\tPeter Rekdal Sunde      0.0%\n    1\tRaynos                  0.0%\n    1\tTeng Siong Ong          0.0%\n    1\tViktor Kelemen          0.0%\n    1\tctide                   0.0%\n    1\t8bitDesigner            0.0%\n    1\tisaacs                  0.0%\n    1\tmgutz                   0.0%\n    1\tpikeas                  0.0%\n    1\tshuwatto                0.0%\n    1\ttstrimple               0.0%\n    1\tewoudj                  0.0%\n    1\tAdam Sanderson          0.0%\n    1\tAndrii Kostenko         0.0%\n    1\tAndy Hiew               0.0%\n    1\tArpad Borsos            0.0%\n    1\tAshwin Purohit          0.0%\n    1\tBenjen                  0.0%\n    1\tDarren Torpey           0.0%\n    1\tGreg Ritter             0.0%\n    1\tGregory Ritter          0.0%\n    1\tJames Herdman           0.0%\n    1\tJim Snodgrass           0.0%\n    1\tJoe McCann              0.0%\n    1\tJonathan Dumaine        0.0%\n    1\tJonathan Palardy        0.0%\n    1\tJonathan Zacsh          0.0%\n    1\tJustin Lilly            0.0%\n    1\tKen Sato                0.0%\n    1\tMaciej Małecki          0.0%\n    1\tMasahiro Hayashi        0.0%\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2009-2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
2594 silly resolved     readmeFilename: 'Readme.md',
2594 silly resolved     bugs: { url: 'https://github.com/visionmedia/express/issues' },
2594 silly resolved     homepage: 'https://github.com/visionmedia/express',
2594 silly resolved     _id: 'express@3.2.6',
2594 silly resolved     _from: 'express@3.2.6' } ]
2595 info install express@3.2.6 into /usr/local/lib/node_modules/coffee
2596 info installOne express@3.2.6
2597 silly resolved [ { name: 'yeoman-generator',
2597 silly resolved     version: '0.15.0',
2597 silly resolved     description: 'Rails-inspired generator system that provides scaffolding for your apps',
2597 silly resolved     license: 'BSD',
2597 silly resolved     keywords:
2597 silly resolved      [ 'development',
2597 silly resolved        'dev',
2597 silly resolved        'build',
2597 silly resolved        'tool',
2597 silly resolved        'cli',
2597 silly resolved        'scaffold',
2597 silly resolved        'generate' ],
2597 silly resolved     homepage: 'http://yeoman.io',
2597 silly resolved     bugs: { url: 'https://github.com/yeoman/generator/issues' },
2597 silly resolved     author: { name: 'Chrome Developer Relations' },
2597 silly resolved     main: 'main.js',
2597 silly resolved     repository: { type: 'git', url: 'git://github.com/yeoman/generator.git' },
2597 silly resolved     scripts:
2597 silly resolved      { test: 'gulp',
2597 silly resolved        legacy: 'mocha test/legacy.js --reporter dot --timeout 100000',
2597 silly resolved        'test-generator': 'mocha test/generators/*.js --reporter spec --timeout 100000' },
2597 silly resolved     dependencies:
2597 silly resolved      { cheerio: '~0.13.0',
2597 silly resolved        rimraf: '~2.2.0',
2597 silly resolved        diff: '~1.0.4',
2597 silly resolved        mime: '~1.2.9',
2597 silly resolved        'underscore.string': '~2.3.1',
2597 silly resolved        lodash: '~2.4.1',
2597 silly resolved        mkdirp: '~0.3.5',
2597 silly resolved        glob: '~3.2.0',
2597 silly resolved        debug: '~0.7.2',
2597 silly resolved        isbinaryfile: '~2.0.0',
2597 silly resolved        dargs: '~0.1.0',
2597 silly resolved        async: '~0.2.8',
2597 silly resolved        inquirer: '~0.4.0',
2597 silly resolved        'iconv-lite': '~0.2.10',
2597 silly resolved        shelljs: '~0.2.6',
2597 silly resolved        'findup-sync': '~0.1.2',
2597 silly resolved        chalk: '~0.4.0',
2597 silly resolved        'text-table': '~0.2.0',
2597 silly resolved        download: '~0.1.6',
2597 silly resolved        request: '~2.30.0',
2597 silly resolved        'file-utils': '~0.1.1',
2597 silly resolved        'class-extend': '~0.1.0' },
2597 silly resolved     devDependencies:
2597 silly resolved      { proxyquire: '~0.5.1',
2597 silly resolved        sinon: '~1.7.3',
2597 silly resolved        markdox: '~0.1.2',
2597 silly resolved        coveralls: '~2.6.0',
2597 silly resolved        gulp: '~3.2.1',
2597 silly resolved        'gulp-mocha': '~0.1.1',
2597 silly resolved        'gulp-jshint': '~1.3.2',
2597 silly resolved        'jshint-stylish': '~0.1.4',
2597 silly resolved        'gulp-jscs': '~0.1.1',
2597 silly resolved        'gulp-istanbul': '~0.1.0' },
2597 silly resolved     readme: '# Generator [![Build Status](https://secure.travis-ci.org/yeoman/generator.png?branch=master)](http://travis-ci.org/yeoman/generator) [![Coverage Status](https://coveralls.io/repos/yeoman/generator/badge.png)](https://coveralls.io/r/yeoman/generator)\n\nA Rails-inspired generator system that provides scaffolding for your apps.\n\n![Generator output](https://img.skitch.com/20120923-jxbn2njgk5dp7ttk94i1tx9ek2.png)\n\n![Generator diff](https://img.skitch.com/20120922-kpjs68bgkshtsru4cwnb64fn82.png)\n\n\n## Getting Started\n\nIf you\'re interested in writing your own Yeoman generator we recommend reading the official [documentation](http://yeoman.io/generators.html).\n\nThere are typically two types of generators - simple boilerplate \'copiers\' and more advanced generators which can use custom prompts, remote dependencies, wiring and much more.\n\nThe docs cover how to create generators from scratch as well as recommending command-line generators for making other generators.\n\n\n## Testing generators\n\nThere is currently no formal infrastructure for testing generators, however you may find our [mocha generator](https://github.com/yeoman/generator-mocha) for custom generators useful.\n\n### Debugging\n\nTo debug a generator, you can pass Node.js debug\'s flags by running it like this:\n\n```bash\n# OS X / Linux\nnode --debug `which yo` <generator> [arguments]\n\n# Windows\nnode --debug <path to yo binary> <generator> [arguments]\n```\n\nYeoman generators also use a debug mode to log relevant informations. You can activate it by setting the `DEBUG` environment variable to the desired scope (for the generator system scope is `generators:*`).\n\n```bash\n# OS X / Linux\nDEBUG=generators/*\n\n# Windows\nset DEBUG=generators/*\n```\n\n## Officially maintained generators\n\n* [Web App](https://github.com/yeoman/generator-webapp#readme)\n* [AngularJS](https://github.com/yeoman/generator-angular#readme)\n* [Backbone](https://github.com/yeoman/generator-backbone#readme)\n* [Chrome Apps Basic Boilerplate](https://github.com/yeoman/generator-chromeapp#readme)\n* [Ember](https://github.com/yeoman/generator-ember#readme)\n* [Jasmine](https://github.com/yeoman/generator-jasmine#readme)\n* [Mocha](https://github.com/yeoman/generator-mocha#readme)\n* [Karma](https://github.com/yeoman/generator-karma#readme)\n\n\n## License\n\n[BSD license](http://opensource.org/licenses/bsd-license.php)\nCopyright (c) Google\n',
2597 silly resolved     readmeFilename: 'readme.md',
2597 silly resolved     _id: 'yeoman-generator@0.15.0',
2597 silly resolved     _from: 'yeoman-generator@0.15.0' } ]
2598 info install yeoman-generator@0.15.0 into /usr/local/lib/node_modules/generator-meanstack
2599 info installOne yeoman-generator@0.15.0
2600 silly resolved [ { name: 'pty.js',
2600 silly resolved     description: 'Pseudo terminals for node.',
2600 silly resolved     author: { name: 'Christopher Jeffrey' },
2600 silly resolved     version: '0.2.3',
2600 silly resolved     main: './index.js',
2600 silly resolved     repository: { type: 'git', url: 'git://github.com/chjj/pty.js.git' },
2600 silly resolved     homepage: 'https://github.com/chjj/pty.js',
2600 silly resolved     bugs: { url: 'https://github.com/chjj/pty.js/issues' },
2600 silly resolved     keywords: [ 'pty', 'tty', 'terminal' ],
2600 silly resolved     scripts:
2600 silly resolved      { test: 'NODE_ENV=test mocha -R spec',
2600 silly resolved        install: 'node-gyp rebuild' },
2600 silly resolved     tags: [ 'pty', 'tty', 'terminal' ],
2600 silly resolved     devDependencies: { mocha: '~1.7.1' },
2600 silly resolved     gypfile: true,
2600 silly resolved     readme: '# pty.js\n\n`forkpty(3)` bindings for node.js. This allows you to fork processes with pseudo\nterminal file descriptors. It returns a terminal object which allows reads\nand writes.\n\nThis is useful for:\n\n- Writing a terminal emulator.\n- Getting certain programs to *think* you\'re a terminal. This is useful if\n  you need a program to send you control sequences.\n\n## Example Usage\n\n``` js\nvar pty = require(\'pty.js\');\n\nvar term = pty.spawn(\'bash\', [], {\n  name: \'xterm-color\',\n  cols: 80,\n  rows: 30,\n  cwd: process.env.HOME,\n  env: process.env\n});\n\nterm.on(\'data\', function(data) {\n  console.log(data);\n});\n\nterm.write(\'ls\\r\');\nterm.resize(100, 40);\nterm.write(\'ls /\\r\');\n\nconsole.log(term.process);\n```\n\n## Todo\n\n- Add tcsetattr(3), tcgetattr(3).\n- Add a way of determining the current foreground job for platforms other\n  than Linux and OSX/Darwin.\n\n## License\n\nCopyright (c) 2012, Christopher Jeffrey (MIT License).\n',
2600 silly resolved     readmeFilename: 'README.md',
2600 silly resolved     _id: 'pty.js@0.2.3',
2600 silly resolved     _shasum: 'd3f02209d7ea7b22c723b78f06068e84b7711e42',
2600 silly resolved     _from: 'pty.js@0.2.3',
2600 silly resolved     _resolved: 'http://registry.npm.taobao.org/pty.js/download/pty.js-0.2.3.tgz' } ]
2601 info install pty.js@0.2.3 into /usr/local/lib/node_modules/tty.js
2602 info installOne pty.js@0.2.3
2603 silly resolved [ { name: 'term.js',
2603 silly resolved     description: 'A terminal written in javascript',
2603 silly resolved     author: { name: 'Christopher Jeffrey' },
2603 silly resolved     version: '0.0.3',
2603 silly resolved     main: './index.js',
2603 silly resolved     preferGlobal: false,
2603 silly resolved     repository: { type: 'git', url: 'git://github.com/chjj/term.js.git' },
2603 silly resolved     homepage: 'https://github.com/chjj/term.js',
2603 silly resolved     bugs: { url: 'https://github.com/chjj/term.js/issues' },
2603 silly resolved     keywords: [ 'tty', 'terminal', 'term', 'xterm' ],
2603 silly resolved     tags: [ 'tty', 'terminal', 'term', 'xterm' ],
2603 silly resolved     engines: { node: '>= 0.8.0' },
2603 silly resolved     devDependencies: { express: '3.1.0', 'socket.io': '0.9.13', 'pty.js': '0.2.3' },
2603 silly resolved     readme: '# term.js\n\nA full xterm clone written in javascript. Used by\n[**tty.js**](https://github.com/chjj/tty.js).\n\n## Example\n\nServer:\n\n``` js\nvar term = require(\'term.js\');\napp.use(term.middleware());\n...\n```\n\nClient:\n\n``` js\nwindow.addEventListener(\'load\', function() {\n  var socket = io.connect();\n  socket.on(\'connect\', function() {\n    var term = new Terminal({\n      cols: 80,\n      rows: 24,\n      screenKeys: true\n    });\n\n    term.on(\'data\', function(data) {\n      socket.emit(\'data\', data);\n    });\n\n    term.on(\'title\', function(title) {\n      document.title = title;\n    });\n\n    term.open(document.body);\n\n    term.write(\'\\x1b[31mWelcome to term.js!\\x1b[m\\r\\n\');\n\n    socket.on(\'data\', function(data) {\n      term.write(data);\n    });\n\n    socket.on(\'disconnect\', function() {\n      term.destroy();\n    });\n  });\n}, false);\n```\n\n## Tmux-like\n\nWhile term.js has always supported copy/paste using the mouse, it now also\nsupports several keyboard based solutions for copy/paste.\n\nterm.js includes a tmux-like selection mode (enabled with the `screenKeys`\noption) which makes copy and paste very simple. `Ctrl-A` enters `prefix` mode,\nfrom here you can type `Ctrl-V` to paste. Press `[` in prefix mode to enter\nselection mode. To select text press `v` (or `space`) to enter visual mode, use\n`hjkl` to navigate and create a selection, and press `Ctrl-C` to copy.\n\n`Ctrl-C` (in visual mode) and `Ctrl-V` (in prefix mode) should work in any OS\nfor copy and paste. `y` (in visual mode) will work for copying only on X11\nsystems. It will copy to the primary selection.\n\nNote: `Ctrl-C` will also work in prefix mode for the regular OS/browser\nselection. If you want to select text with your mouse and copy it to the\nclipboard, simply select the text and type `Ctrl-A + Ctrl-C`, and\n`Ctrl-A + Ctrl-V` to paste it.\n\nFor mac users: consider `Ctrl` to be `Command/Apple` above.\n\n## License\n\nCopyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n',
2603 silly resolved     readmeFilename: 'README.md',
2603 silly resolved     _id: 'term.js@0.0.3',
2603 silly resolved     _shasum: '659dd21e05b8e42776faab620388e4bd22075657',
2603 silly resolved     _from: 'term.js@0.0.3',
2603 silly resolved     _resolved: 'http://registry.npm.taobao.org/term.js/download/term.js-0.0.3.tgz' } ]
2604 info install term.js@0.0.3 into /usr/local/lib/node_modules/tty.js
2605 info installOne term.js@0.0.3
2606 silly resolved [ { name: 'commander',
2606 silly resolved     version: '1.3.2',
2606 silly resolved     description: 'the complete solution for node.js command-line programs',
2606 silly resolved     keywords: [ 'command', 'option', 'parser', 'prompt', 'stdin' ],
2606 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
2606 silly resolved     repository:
2606 silly resolved      { type: 'git',
2606 silly resolved        url: 'https://github.com/visionmedia/commander.js.git' },
2606 silly resolved     dependencies: { keypress: '0.1.x' },
2606 silly resolved     devDependencies: { should: '>= 0.0.1' },
2606 silly resolved     scripts: { test: 'make test' },
2606 silly resolved     main: 'index',
2606 silly resolved     engines: { node: '>= 0.6.x' },
2606 silly resolved     readme: '# Commander.js\n\n  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby\'s [commander](https://github.com/visionmedia/commander).\n\n [![Build Status](https://secure.travis-ci.org/visionmedia/commander.js.png)](http://travis-ci.org/visionmedia/commander.js)\n\n## Installation\n\n    $ npm install commander\n\n## Option parsing\n\n Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require(\'commander\');\n\nprogram\n  .version(\'0.0.1\')\n  .option(\'-p, --peppers\', \'Add peppers\')\n  .option(\'-P, --pineapple\', \'Add pineapple\')\n  .option(\'-b, --bbq\', \'Add bbq sauce\')\n  .option(\'-c, --cheese [type]\', \'Add the specified type of cheese [marble]\', \'marble\')\n  .parse(process.argv);\n\nconsole.log(\'you ordered a pizza with:\');\nif (program.peppers) console.log(\'  - peppers\');\nif (program.pineapple) console.log(\'  - pineapple\');\nif (program.bbq) console.log(\'  - bbq\');\nconsole.log(\'  - %s cheese\', program.cheese);\n```\n\n Short flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as "--template-engine" are camel-cased, becoming `program.templateEngine` etc.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```  \n $ ./examples/pizza --help\n\n   Usage: pizza [options]\n\n   Options:\n\n     -V, --version        output the version number\n     -p, --peppers        Add peppers\n     -P, --pineapple      Add pineapple\n     -b, --bbq            Add bbq sauce\n     -c, --cheese <type>  Add the specified type of cheese [marble]\n     -h, --help           output usage information\n\n```\n\n## Coercion\n\n```js\nfunction range(val) {\n  return val.split(\'..\').map(Number);\n}\n\nfunction list(val) {\n  return val.split(\',\');\n}\n\nprogram\n  .version(\'0.0.1\')\n  .usage(\'[options] <file ...>\')\n  .option(\'-i, --integer <n>\', \'An integer argument\', parseInt)\n  .option(\'-f, --float <n>\', \'A float argument\', parseFloat)\n  .option(\'-r, --range <a>..<b>\', \'A range\', range)\n  .option(\'-l, --list <items>\', \'A list\', list)\n  .option(\'-o, --optional [value]\', \'An optional value\')\n  .parse(process.argv);\n\nconsole.log(\' int: %j\', program.integer);\nconsole.log(\' float: %j\', program.float);\nconsole.log(\' optional: %j\', program.optional);\nprogram.range = program.range || [];\nconsole.log(\' range: %j..%j\', program.range[0], program.range[1]);\nconsole.log(\' list: %j\', program.list);\nconsole.log(\' args: %j\', program.args);\n```\n\n## Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for "--help". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviours, for example\n in the following executable "stuff" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require(\'../\');\n\nfunction list(val) {\n  return val.split(\',\').map(Number);\n}\n\nprogram\n  .version(\'0.0.1\')\n  .option(\'-f, --foo\', \'enable some foo\')\n  .option(\'-b, --bar\', \'enable some bar\')\n  .option(\'-B, --baz\', \'enable some baz\');\n\n// must be before .parse() since\n// node\'s emit() is immediate\n\nprogram.on(\'--help\', function(){\n  console.log(\'  Examples:\');\n  console.log(\'\');\n  console.log(\'    $ custom-help --help\');\n  console.log(\'    $ custom-help -h\');\n  console.log(\'\');\n});\n\nprogram.parse(process.argv);\n\nconsole.log(\'stuff\');\n```\n\nyielding the following help output:\n\n```\n\nUsage: custom-help [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n\n  $ custom-help --help\n  $ custom-help -h\n\n```\n\n## .prompt(msg, fn)\n\n Single-line prompt:\n\n```js\nprogram.prompt(\'name: \', function(name){\n  console.log(\'hi %s\', name);\n});\n```\n\n Multi-line prompt:\n\n```js\nprogram.prompt(\'description:\', function(name){\n  console.log(\'hi %s\', name);\n});\n```\n\n Coercion:\n\n```js\nprogram.prompt(\'Age: \', Number, function(age){\n  console.log(\'age: %j\', age);\n});\n```\n\n```js\nprogram.prompt(\'Birthdate: \', Date, function(date){\n  console.log(\'date: %s\', date);\n});\n```\n\n```js\nprogram.prompt(\'Email: \', /^.+@.+\\..+$/, function(email){\n  console.log(\'email: %j\', email);\n});\n```\n\n## .password(msg[, mask], fn)\n\nPrompt for password without echoing:\n\n```js\nprogram.password(\'Password: \', function(pass){\n  console.log(\'got "%s"\', pass);\n  process.stdin.destroy();\n});\n```\n\nPrompt for password with mask char "*":\n\n```js\nprogram.password(\'Password: \', \'*\', function(pass){\n  console.log(\'got "%s"\', pass);\n  process.stdin.destroy();\n});\n```\n\n## .confirm(msg, fn)\n\n Confirm with the given `msg`:\n\n```js\nprogram.confirm(\'continue? \', function(ok){\n  console.log(\' got %j\', ok);\n});\n```\n\n## .choose(list, fn)\n\n Let the user choose from a `list`:\n\n```js\nvar list = [\'tobi\', \'loki\', \'jane\', \'manny\', \'luna\'];\n\nconsole.log(\'Choose the coolest pet:\');\nprogram.choose(list, function(i){\n  console.log(\'you chose %d "%s"\', i, list[i]);\n});\n```\n\n## .outputHelp()\n\n  Output help information without exiting.\n\n## .help()\n\n  Output help information and exit immediately.\n\n## Links\n\n - [API documentation](http://visionmedia.github.com/commander.js/)\n - [ascii tables](https://github.com/LearnBoost/cli-table)\n - [progress bars](https://github.com/visionmedia/node-progress)\n - [more progress bars](https://github.com/substack/node-multimeter)\n - [examples](https://github.com/visionmedia/commander.js/tree/master/examples)\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
2606 silly resolved     readmeFilename: 'Readme.md',
2606 silly resolved     bugs: { url: 'https://github.com/visionmedia/commander.js/issues' },
2606 silly resolved     homepage: 'https://github.com/visionmedia/commander.js',
2606 silly resolved     _id: 'commander@1.3.2',
2606 silly resolved     _from: 'commander@1.3.2' } ]
2607 info install commander@1.3.2 into /usr/local/lib/node_modules/express-generator
2608 info installOne commander@1.3.2
2609 silly resolved [ { name: 'semver',
2609 silly resolved     version: '1.0.14',
2609 silly resolved     description: 'The semantic version parser used by npm.',
2609 silly resolved     main: 'semver.js',
2609 silly resolved     scripts: { test: 'tap test.js' },
2609 silly resolved     devDependencies: { tap: '0.x >=0.0.4' },
2609 silly resolved     license:
2609 silly resolved      { type: 'MIT',
2609 silly resolved        url: 'https://github.com/isaacs/semver/raw/master/LICENSE' },
2609 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/node-semver.git' },
2609 silly resolved     bin: { semver: './bin/semver' },
2609 silly resolved     readme: 'semver(1) -- The semantic versioner for npm\n===========================================\n\n## Usage\n\n    $ npm install semver\n\n    semver.valid(\'1.2.3\') // true\n    semver.valid(\'a.b.c\') // false\n    semver.clean(\'  =v1.2.3   \') // \'1.2.3\'\n    semver.satisfies(\'1.2.3\', \'1.x || >=2.5.0 || 5.0.0 - 7.2.3\') // true\n    semver.gt(\'1.2.3\', \'9.8.7\') // false\n    semver.lt(\'1.2.3\', \'9.8.7\') // true\n\nAs a command-line utility:\n\n    $ semver -h\n\n    Usage: semver -v <version> [-r <range>]\n    Test if version(s) satisfy the supplied range(s),\n    and sort them.\n\n    Multiple versions or ranges may be supplied.\n\n    Program exits successfully if any valid version satisfies\n    all supplied ranges, and prints all satisfying versions.\n\n    If no versions are valid, or ranges are not satisfied,\n    then exits failure.\n\n    Versions are printed in ascending order, so supplying\n    multiple versions to the utility will just sort them.\n\n## Versions\n\nA version is the following things, in this order:\n\n* a number (Major)\n* a period\n* a number (minor)\n* a period\n* a number (patch)\n* OPTIONAL: a hyphen, followed by a number (build)\n* OPTIONAL: a collection of pretty much any non-whitespace characters\n  (tag)\n\nA leading `"="` or `"v"` character is stripped off and ignored.\n\n## Comparisons\n\nThe ordering of versions is done using the following algorithm, given\ntwo versions and asked to find the greater of the two:\n\n* If the majors are numerically different, then take the one\n  with a bigger major number. `2.3.4 > 1.3.4`\n* If the minors are numerically different, then take the one\n  with the bigger minor number. `2.3.4 > 2.2.4`\n* If the patches are numerically different, then take the one with the\n  bigger patch number. `2.3.4 > 2.3.3`\n* If only one of them has a build number, then take the one with the\n  build number.  `2.3.4-0 > 2.3.4`\n* If they both have build numbers, and the build numbers are numerically\n  different, then take the one with the bigger build number.\n  `2.3.4-10 > 2.3.4-9`\n* If only one of them has a tag, then take the one without the tag.\n  `2.3.4 > 2.3.4-beta`\n* If they both have tags, then take the one with the lexicographically\n  larger tag.  `2.3.4-beta > 2.3.4-alpha`\n* At this point, they\'re equal.\n\n## Ranges\n\nThe following range styles are supported:\n\n* `>1.2.3` Greater than a specific version.\n* `<1.2.3` Less than\n* `1.2.3 - 2.3.4` := `>=1.2.3 <=2.3.4`\n* `~1.2.3` := `>=1.2.3 <1.3.0`\n* `~1.2` := `>=1.2.0 <2.0.0`\n* `~1` := `>=1.0.0 <2.0.0`\n* `1.2.x` := `>=1.2.0 <1.3.0`\n* `1.x` := `>=1.0.0 <2.0.0`\n\nRanges can be joined with either a space (which implies "and") or a\n`||` (which implies "or").\n\n## Functions\n\n* valid(v): Return the parsed version, or null if it\'s not valid.\n* inc(v, release): Return the version incremented by the release type\n  (major, minor, patch, or build), or null if it\'s not valid.\n\n### Comparison\n\n* gt(v1, v2): `v1 > v2`\n* gte(v1, v2): `v1 >= v2`\n* lt(v1, v2): `v1 < v2`\n* lte(v1, v2): `v1 <= v2`\n* eq(v1, v2): `v1 == v2` This is true if they\'re logically equivalent,\n  even if they\'re not the exact same string.  You already know how to\n  compare strings.\n* neq(v1, v2): `v1 != v2` The opposite of eq.\n* cmp(v1, comparator, v2): Pass in a comparison string, and it\'ll call\n  the corresponding function above.  `"==="` and `"!=="` do simple\n  string comparison, but are included for completeness.  Throws if an\n  invalid comparison string is provided.\n* compare(v1, v2): Return 0 if v1 == v2, or 1 if v1 is greater, or -1 if\n  v2 is greater.  Sorts in ascending order if passed to Array.sort().\n* rcompare(v1, v2): The reverse of compare.  Sorts an array of versions\n  in descending order when passed to Array.sort().\n\n\n### Ranges\n\n* validRange(range): Return the valid range or null if it\'s not valid\n* satisfies(version, range): Return true if the version satisfies the\n  range.\n* maxSatisfying(versions, range): Return the highest version in the list\n  that satisfies the range, or null if none of them do.\n',
2609 silly resolved     readmeFilename: 'README.md',
2609 silly resolved     bugs: { url: 'https://github.com/isaacs/node-semver/issues' },
2609 silly resolved     homepage: 'https://github.com/isaacs/node-semver',
2609 silly resolved     _id: 'semver@1.0.14',
2609 silly resolved     _from: 'semver@1.0.14' } ]
2610 info install semver@1.0.14 into /usr/local/lib/node_modules/grunt-init
2611 info installOne semver@1.0.14
2612 silly resolved [ { name: 'dateformat',
2612 silly resolved     description: 'A node.js package for Steven Levithan\'s excellent dateFormat() function.',
2612 silly resolved     maintainers: 'Felix Geisendörfer <felix@debuggable.com>',
2612 silly resolved     homepage: 'https://github.com/felixge/node-dateformat',
2612 silly resolved     author: { name: 'Steven Levithan' },
2612 silly resolved     version: '1.0.2-1.2.3',
2612 silly resolved     main: './lib/dateformat',
2612 silly resolved     dependencies: {},
2612 silly resolved     devDependencies: {},
2612 silly resolved     engines: { node: '*' },
2612 silly resolved     readme: '# node-dateformat\n\nA node.js package for Steven Levithan\'s excellent [dateFormat()][dateformat] function.\n\n## Modifications\n\n* Removed the `Date.prototype.format` method. Sorry folks, but extending native prototypes is for suckers.\n* Added a `module.exports = dateFormat;` statement at the bottom\n\n## Usage\n\nAs taken from Steven\'s post, modified to match the Modifications listed above:\n\n    var dateFormat = require(\'dateformat\');\n    var now = new Date();\n\n    // Basic usage\n    dateFormat(now, "dddd, mmmm dS, yyyy, h:MM:ss TT");\n    // Saturday, June 9th, 2007, 5:46:21 PM\n\n    // You can use one of several named masks\n    dateFormat(now, "isoDateTime");\n    // 2007-06-09T17:46:21\n\n    // ...Or add your own\n    dateFormat.masks.hammerTime = \'HH:MM! "Can\\\'t touch this!"\';\n    dateFormat(now, "hammerTime");\n    // 17:46! Can\'t touch this!\n\n    // When using the standalone dateFormat function,\n    // you can also provide the date as a string\n    dateFormat("Jun 9 2007", "fullDate");\n    // Saturday, June 9, 2007\n\n    // Note that if you don\'t include the mask argument,\n    // dateFormat.masks.default is used\n    dateFormat(now);\n    // Sat Jun 09 2007 17:46:21\n\n    // And if you don\'t include the date argument,\n    // the current date and time is used\n    dateFormat();\n    // Sat Jun 09 2007 17:46:22\n\n    // You can also skip the date argument (as long as your mask doesn\'t\n    // contain any numbers), in which case the current date/time is used\n    dateFormat("longTime");\n    // 5:46:22 PM EST\n\n    // And finally, you can convert local time to UTC time. Simply pass in\n    // true as an additional argument (no argument skipping allowed in this case):\n    dateFormat(now, "longTime", true);\n    // 10:46:21 PM UTC\n\n    // ...Or add the prefix "UTC:" to your mask.\n    dateFormat(now, "UTC:h:MM:ss TT Z");\n    // 10:46:21 PM UTC\n\n    // You can also get the ISO 8601 week of the year:\n    dateFormat(now, "W");\n    // 42\n## License\n\n(c) 2007-2009 Steven Levithan [stevenlevithan.com][stevenlevithan], MIT license.\n\n[dateformat]: http://blog.stevenlevithan.com/archives/date-time-format\n[stevenlevithan]: http://stevenlevithan.com/\n',
2612 silly resolved     readmeFilename: 'Readme.md',
2612 silly resolved     _id: 'dateformat@1.0.2-1.2.3',
2612 silly resolved     _shasum: 'b0220c02de98617433b72851cf47de3df2cdbee9',
2612 silly resolved     _from: 'dateformat@1.0.2-1.2.3',
2612 silly resolved     _resolved: 'http://registry.npm.taobao.org/dateformat/download/dateformat-1.0.2-1.2.3.tgz' } ]
2613 info install dateformat@1.0.2-1.2.3 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt
2614 info installOne dateformat@1.0.2-1.2.3
2615 silly resolved [ { name: 'dateformat',
2615 silly resolved     description: 'A node.js package for Steven Levithan\'s excellent dateFormat() function.',
2615 silly resolved     maintainers: 'Felix Geisendörfer <felix@debuggable.com>',
2615 silly resolved     homepage: 'https://github.com/felixge/node-dateformat',
2615 silly resolved     author: { name: 'Steven Levithan' },
2615 silly resolved     version: '1.0.2-1.2.3',
2615 silly resolved     main: './lib/dateformat',
2615 silly resolved     dependencies: {},
2615 silly resolved     devDependencies: {},
2615 silly resolved     engines: { node: '*' },
2615 silly resolved     readme: '# node-dateformat\n\nA node.js package for Steven Levithan\'s excellent [dateFormat()][dateformat] function.\n\n## Modifications\n\n* Removed the `Date.prototype.format` method. Sorry folks, but extending native prototypes is for suckers.\n* Added a `module.exports = dateFormat;` statement at the bottom\n\n## Usage\n\nAs taken from Steven\'s post, modified to match the Modifications listed above:\n\n    var dateFormat = require(\'dateformat\');\n    var now = new Date();\n\n    // Basic usage\n    dateFormat(now, "dddd, mmmm dS, yyyy, h:MM:ss TT");\n    // Saturday, June 9th, 2007, 5:46:21 PM\n\n    // You can use one of several named masks\n    dateFormat(now, "isoDateTime");\n    // 2007-06-09T17:46:21\n\n    // ...Or add your own\n    dateFormat.masks.hammerTime = \'HH:MM! "Can\\\'t touch this!"\';\n    dateFormat(now, "hammerTime");\n    // 17:46! Can\'t touch this!\n\n    // When using the standalone dateFormat function,\n    // you can also provide the date as a string\n    dateFormat("Jun 9 2007", "fullDate");\n    // Saturday, June 9, 2007\n\n    // Note that if you don\'t include the mask argument,\n    // dateFormat.masks.default is used\n    dateFormat(now);\n    // Sat Jun 09 2007 17:46:21\n\n    // And if you don\'t include the date argument,\n    // the current date and time is used\n    dateFormat();\n    // Sat Jun 09 2007 17:46:22\n\n    // You can also skip the date argument (as long as your mask doesn\'t\n    // contain any numbers), in which case the current date/time is used\n    dateFormat("longTime");\n    // 5:46:22 PM EST\n\n    // And finally, you can convert local time to UTC time. Simply pass in\n    // true as an additional argument (no argument skipping allowed in this case):\n    dateFormat(now, "longTime", true);\n    // 10:46:21 PM UTC\n\n    // ...Or add the prefix "UTC:" to your mask.\n    dateFormat(now, "UTC:h:MM:ss TT Z");\n    // 10:46:21 PM UTC\n\n    // You can also get the ISO 8601 week of the year:\n    dateFormat(now, "W");\n    // 42\n## License\n\n(c) 2007-2009 Steven Levithan [stevenlevithan.com][stevenlevithan], MIT license.\n\n[dateformat]: http://blog.stevenlevithan.com/archives/date-time-format\n[stevenlevithan]: http://stevenlevithan.com/\n',
2615 silly resolved     readmeFilename: 'Readme.md',
2615 silly resolved     _id: 'dateformat@1.0.2-1.2.3',
2615 silly resolved     _shasum: 'b0220c02de98617433b72851cf47de3df2cdbee9',
2615 silly resolved     _from: 'dateformat@1.0.2-1.2.3',
2615 silly resolved     _resolved: 'http://registry.npm.taobao.org/dateformat/download/dateformat-1.0.2-1.2.3.tgz' } ]
2616 info install dateformat@1.0.2-1.2.3 into /usr/local/lib/node_modules/grunt
2617 info installOne dateformat@1.0.2-1.2.3
2618 silly resolved [ { author: { name: 'Jake Luer', email: 'jake@alogicalparadox.com' },
2618 silly resolved     name: 'chai',
2618 silly resolved     description: 'BDD/TDD assertion library for node.js and the browser. Test framework agnostic.',
2618 silly resolved     keywords: [ 'test', 'assertion', 'assert', 'testing', 'chai' ],
2618 silly resolved     homepage: 'http://chaijs.com',
2618 silly resolved     license: 'MIT',
2618 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
2618 silly resolved     version: '1.7.2',
2618 silly resolved     repository: { type: 'git', url: 'https://github.com/chaijs/chai' },
2618 silly resolved     bugs: { url: 'https://github.com/chaijs/chai/issues' },
2618 silly resolved     main: './index',
2618 silly resolved     scripts: { test: 'make test' },
2618 silly resolved     engines: { node: '>= 0.4.0' },
2618 silly resolved     dependencies: { 'assertion-error': '1.0.0' },
2618 silly resolved     devDependencies:
2618 silly resolved      { component: '*',
2618 silly resolved        coveralls: '2.0.16',
2618 silly resolved        mocha: '1.8.2',
2618 silly resolved        'mocha-cloud': '*',
2618 silly resolved        'mocha-lcov-reporter': '0.0.1',
2618 silly resolved        'mocha-phantomjs': '2.0.2',
2618 silly resolved        connect: '2.7.x',
2618 silly resolved        jscoverage: '0.3.7' },
2618 silly resolved     readme: '[![Build Status](https://travis-ci.org/chaijs/chai.png?branch=master)](https://travis-ci.org/chaijs/chai) [![Coverage Status](https://coveralls.io/repos/chaijs/chai/badge.png?branch=master)](https://coveralls.io/r/chaijs/chai?branch=master)\n\n[![Chai Documentation](http://chaijs.com/public/img/chai-logo.png)](http://chaijs.com)\n\nChai is a BDD / TDD assertion library for [node](http://nodejs.org) and the browser that\ncan be delightfully paired with any javascript testing framework.\n\nFor more information or to download plugins, view the [documentation](http://chaijs.com).\n\n### Related Projects\n\n- [@chaijs/assertion-error](https://github.com/chaijs/assertion-error): Custom `Error` constructor\nthrown upon an assertion failing.\n\n### Contributors\n\n     project  : chai\n     repo age : 1 year, 7 months\n     active   : 136 days\n     commits  : 678\n     files    : 55\n     authors  :\n       504  Jake Luer               74.3%\n        66  Veselin Todorov         9.7%\n        43  Domenic Denicola        6.3%\n         6  Ruben Verborgh          0.9%\n         5  Juliusz Gonera          0.7%\n         5  George Kats             0.7%\n         5  Scott Nonnenberg        0.7%\n         5  Jo Liss                 0.7%\n         4  John Firebaugh          0.6%\n         4  josher19                0.6%\n         4  Nick Heiner             0.6%\n         3  Jeff Barczewski         0.4%\n         2  Ryunosuke SATO          0.3%\n         2  Bartvds                 0.3%\n         2  Teddy Cross             0.3%\n         2  Edwin Shao              0.3%\n         2  Jakub Nešetřil          0.3%\n         1  piecioshka              0.1%\n         1  Benjamin Horsleben      0.1%\n         1  Brandon Payton          0.1%\n         1  Chris Connelly          0.1%\n         1  Chun-Yi                 0.1%\n         1  DD                      0.1%\n         1  Jeff Welch              0.1%\n         1  Kilian Ciuffolo         0.1%\n         1  Niklas Närhinen         0.1%\n         1  Paul Miller             0.1%\n         1  Sasha Koss              0.1%\n         1  Victor Costan           0.1%\n         1  Vinay Pulim             0.1%\n         1  Anand Patil             0.1%\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011-2013 Jake Luer <jake@alogicalparadox.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n',
2618 silly resolved     readmeFilename: 'README.md',
2618 silly resolved     _id: 'chai@1.7.2',
2618 silly resolved     _from: 'chai@1.7.2' } ]
2619 info install chai@1.7.2 into /usr/local/lib/node_modules/coffee
2620 info installOne chai@1.7.2
2621 silly resolved [ { name: 'prompt',
2621 silly resolved     description: 'A beautiful command-line prompt for node.js',
2621 silly resolved     version: '0.1.12',
2621 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
2621 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
2621 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/prompt.git' },
2621 silly resolved     dependencies:
2621 silly resolved      { async: '0.1.x',
2621 silly resolved        colors: '0.x.x',
2621 silly resolved        pkginfo: '0.x.x',
2621 silly resolved        winston: '0.5.x' },
2621 silly resolved     devDependencies: { vows: '0.6.x' },
2621 silly resolved     main: './lib/prompt',
2621 silly resolved     scripts:
2621 silly resolved      { test: 'vows test/prompt-test.js --spec',
2621 silly resolved        'test-all': 'vows --spec' },
2621 silly resolved     engines: { node: '>= 0.4.0' },
2621 silly resolved     readme: '# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Installation\n\n### Installing npm (node package manager)\n```\ncurl http://npmjs.org/install.sh | sh\n```\n\n### Installing prompt\n```\n[sudo] npm install prompt\n```\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\nvar prompt = require(\'prompt\');\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: username and email\n//\nprompt.get([\'username\', \'email\'], function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log(\'Command-line input received:\');\n  console.log(\'  username: \' + result.username);\n  console.log(\'  email: \' + result.email);\n})\n```\n\nThis will result in the following command-line output:\n\n```\n$ node examples/simple-prompt.js \nprompt: username: some-user\nprompt: email: some-user@some-place.org\nCommand-line input received:\n  username: some-user\n  email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here\'s a quick sample:\n\n``` js\nvar properties = [\n  {\n    name: \'name\', \n    validator: /^[a-zA-Z\\s\\-]+$/,\n    warning: \'Name must be only letters, spaces, or dashes\',\n    empty: false\n  },\n  {\n    name: \'password\',\n    hidden: true\n  }\n];\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: email, password\n//\nprompt.get(properties, function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log(\'Command-line input received:\');\n  console.log(\'  name: \' + result.name);\n  console.log(\'  password: \' + result.password);\n});\n```\n\nPretty easy right? The output from the above script is: \n\n```\n$ node examples/property-prompt.js\nprompt: name: nodejitsu000\nerror:  Invalid input for name\nerror:  Name must be only letters, spaces, or dashes\nprompt: name: Nodejitsu Inc\nprompt: password: \nCommand-line input received:\n  name: Nodejitsu Inc\n  password: some-password  \n```\n\n## Valid Property Settings\n`prompt` uses a simple property system for performing a couple of basic validation operations against input received from the command-line. The motivations here were speed and simplicity of implementation to integration of pseudo-standards like JSON-Schema were not feasible. \n\nLets examine the anatomy of a prompt property:\n\n``` js\n{\n  message: \'Enter your password\',     // Prompt displayed to the user. If not supplied name will be used.\n  name: \'password\'                    // Key in the JSON object returned from `.get()`.\n  validator: /^\\w+$/                  // Regular expression that input must be valid against.\n  warning: \'Password must be letters\' // Warning message to display if validation fails.\n  hidden: true                        // If true, characters entered will not be output to console.\n  default: \'lamepassword\'             // Default value to use if no value is entered.\n  empty: false                        // If false, value entered must be non-empty.\n}\n```\n### skipping prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n//prompt-everride.js\n\nvar prompt = require(\'prompt\'),\n    optimist = require(\'optimist\')\n\n//\n// set the overrides\n//\nprompt.override = optimist.argv\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: username and email\n//\nprompt.get([\'username\', \'email\'], function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log(\'Command-line input received:\');\n  console.log(\'  username: \' + result.username);\n  console.log(\'  email: \' + result.email);\n})\n\n//: node prompt-everride.js --username USER --email EMAIL\n\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\nvar obj = {\n  password: \'lamepassword\',\n  mindset: \'NY\'\n}\n\n//\n// Log the initial object.\n//\nconsole.log(\'Initial object to be extended:\');\nconsole.dir(obj);\n\n//\n// Add two properties to the empty object: username and email\n//\nprompt.addProperties(obj, [\'username\', \'email\'], function (err) {\n  //\n  // Log the results.\n  //\n  console.log(\'Updated object received:\');\n  console.dir(obj);\n});\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is "prompt," the default `prompt.delimiter` is\n": ", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\nvar prompt = require("prompt");\n//\n// The colors module adds color properties to String.prototype\n//\nrequire("colors");\n\n//\n// Setting these properties customizes the prompt.\n//\nprompt.message = "Question!".rainbow;\nprompt.delimiter = "><".green;\n\nprompt.start();\n\nprompt.get([{ name: "name",\n              message: "What is your name?".magenta }], function (err, result) {\n  console.log("You said your name is: ".cyan + result.name.cyan);\n});\n```\n\n## Running tests\n```\nvows test/*-test.js --spec\n```\n\n#### Author: [Charlie Robbins][1]\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n[1]: http://nodejitsu.com\n',
2621 silly resolved     readmeFilename: 'README.md',
2621 silly resolved     bugs: { url: 'https://github.com/flatiron/prompt/issues' },
2621 silly resolved     homepage: 'https://github.com/flatiron/prompt',
2621 silly resolved     _id: 'prompt@0.1.12',
2621 silly resolved     _from: 'prompt@0.1.12' } ]
2622 info install prompt@0.1.12 into /usr/local/lib/node_modules/grunt-init
2623 info installOne prompt@0.1.12
2624 silly resolved [ { name: 'mkdirp',
2624 silly resolved     description: 'Recursively mkdir, like `mkdir -p`',
2624 silly resolved     version: '0.3.5',
2624 silly resolved     author:
2624 silly resolved      { name: 'James Halliday',
2624 silly resolved        email: 'mail@substack.net',
2624 silly resolved        url: 'http://substack.net' },
2624 silly resolved     main: './index',
2624 silly resolved     keywords: [ 'mkdir', 'directory' ],
2624 silly resolved     repository:
2624 silly resolved      { type: 'git',
2624 silly resolved        url: 'http://github.com/substack/node-mkdirp.git' },
2624 silly resolved     scripts: { test: 'tap test/*.js' },
2624 silly resolved     devDependencies: { tap: '~0.4.0' },
2624 silly resolved     license: 'MIT',
2624 silly resolved     _id: 'mkdirp@0.3.5',
2624 silly resolved     dist:
2624 silly resolved      { shasum: 'de3e5f8961c88c787ee1368df849ac4413eca8d7',
2624 silly resolved        size: 4162,
2624 silly resolved        noattachment: false,
2624 silly resolved        tarball: 'http://registry.npm.taobao.org/mkdirp/download/mkdirp-0.3.5.tgz' },
2624 silly resolved     _from: 'mkdirp@0.3.5',
2624 silly resolved     _npmVersion: '1.2.2',
2624 silly resolved     _npmUser: { name: 'substack', email: 'mail@substack.net' },
2624 silly resolved     maintainers: [ [Object] ],
2624 silly resolved     directories: {},
2624 silly resolved     publish_time: 1361533465486,
2624 silly resolved     _cnpm_publish_time: 1361533465486,
2624 silly resolved     _shasum: 'de3e5f8961c88c787ee1368df849ac4413eca8d7',
2624 silly resolved     _resolved: 'http://registry.npm.taobao.org/mkdirp/download/mkdirp-0.3.5.tgz',
2624 silly resolved     readme: '# mkdirp\n\nLike `mkdir -p`, but in node.js!\n\n[![build status](https://secure.travis-ci.org/substack/node-mkdirp.png)](http://travis-ci.org/substack/node-mkdirp)\n\n# example\n\n## pow.js\n\n```js\nvar mkdirp = require(\'mkdirp\');\n    \nmkdirp(\'/tmp/foo/bar/baz\', function (err) {\n    if (err) console.error(err)\n    else console.log(\'pow!\')\n});\n```\n\nOutput\n\n```\npow!\n```\n\nAnd now /tmp/foo/bar/baz exists, huzzah!\n\n# methods\n\n```js\nvar mkdirp = require(\'mkdirp\');\n```\n\n## mkdirp(dir, mode, cb)\n\nCreate a new directory and any necessary subdirectories at `dir` with octal\npermission string `mode`.\n\nIf `mode` isn\'t specified, it defaults to `0777 & (~process.umask())`.\n\n`cb(err, made)` fires with the error or the first directory `made`\nthat had to be created, if any.\n\n## mkdirp.sync(dir, mode)\n\nSynchronously create a new directory and any necessary subdirectories at `dir`\nwith octal permission string `mode`.\n\nIf `mode` isn\'t specified, it defaults to `0777 & (~process.umask())`.\n\nReturns the first directory that had to be created, if any.\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install mkdirp\n```\n\n# license\n\nMIT\n',
2624 silly resolved     readmeFilename: 'readme.markdown',
2624 silly resolved     bugs: { url: 'https://github.com/substack/node-mkdirp/issues' },
2624 silly resolved     homepage: 'https://github.com/substack/node-mkdirp' } ]
2625 info install mkdirp@0.3.5 into /usr/local/lib/node_modules/coffee-script
2626 info installOne mkdirp@0.3.5
2627 silly resolved [ { name: 'mkdirp',
2627 silly resolved     description: 'Recursively mkdir, like `mkdir -p`',
2627 silly resolved     version: '0.3.5',
2627 silly resolved     author:
2627 silly resolved      { name: 'James Halliday',
2627 silly resolved        email: 'mail@substack.net',
2627 silly resolved        url: 'http://substack.net' },
2627 silly resolved     main: './index',
2627 silly resolved     keywords: [ 'mkdir', 'directory' ],
2627 silly resolved     repository:
2627 silly resolved      { type: 'git',
2627 silly resolved        url: 'http://github.com/substack/node-mkdirp.git' },
2627 silly resolved     scripts: { test: 'tap test/*.js' },
2627 silly resolved     devDependencies: { tap: '~0.4.0' },
2627 silly resolved     license: 'MIT',
2627 silly resolved     _id: 'mkdirp@0.3.5',
2627 silly resolved     dist:
2627 silly resolved      { shasum: 'de3e5f8961c88c787ee1368df849ac4413eca8d7',
2627 silly resolved        size: 4162,
2627 silly resolved        noattachment: false,
2627 silly resolved        tarball: 'http://registry.npm.taobao.org/mkdirp/download/mkdirp-0.3.5.tgz' },
2627 silly resolved     _from: 'mkdirp@0.3.5',
2627 silly resolved     _npmVersion: '1.2.2',
2627 silly resolved     _npmUser: { name: 'substack', email: 'mail@substack.net' },
2627 silly resolved     maintainers: [ [Object] ],
2627 silly resolved     directories: {},
2627 silly resolved     publish_time: 1361533465486,
2627 silly resolved     _cnpm_publish_time: 1361533465486,
2627 silly resolved     _shasum: 'de3e5f8961c88c787ee1368df849ac4413eca8d7',
2627 silly resolved     _resolved: 'http://registry.npm.taobao.org/mkdirp/download/mkdirp-0.3.5.tgz',
2627 silly resolved     readme: '# mkdirp\n\nLike `mkdir -p`, but in node.js!\n\n[![build status](https://secure.travis-ci.org/substack/node-mkdirp.png)](http://travis-ci.org/substack/node-mkdirp)\n\n# example\n\n## pow.js\n\n```js\nvar mkdirp = require(\'mkdirp\');\n    \nmkdirp(\'/tmp/foo/bar/baz\', function (err) {\n    if (err) console.error(err)\n    else console.log(\'pow!\')\n});\n```\n\nOutput\n\n```\npow!\n```\n\nAnd now /tmp/foo/bar/baz exists, huzzah!\n\n# methods\n\n```js\nvar mkdirp = require(\'mkdirp\');\n```\n\n## mkdirp(dir, mode, cb)\n\nCreate a new directory and any necessary subdirectories at `dir` with octal\npermission string `mode`.\n\nIf `mode` isn\'t specified, it defaults to `0777 & (~process.umask())`.\n\n`cb(err, made)` fires with the error or the first directory `made`\nthat had to be created, if any.\n\n## mkdirp.sync(dir, mode)\n\nSynchronously create a new directory and any necessary subdirectories at `dir`\nwith octal permission string `mode`.\n\nIf `mode` isn\'t specified, it defaults to `0777 & (~process.umask())`.\n\nReturns the first directory that had to be created, if any.\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install mkdirp\n```\n\n# license\n\nMIT\n',
2627 silly resolved     readmeFilename: 'readme.markdown',
2627 silly resolved     bugs: { url: 'https://github.com/substack/node-mkdirp/issues' },
2627 silly resolved     homepage: 'https://github.com/substack/node-mkdirp' } ]
2628 info install mkdirp@0.3.5 into /usr/local/lib/node_modules/express-generator
2629 info installOne mkdirp@0.3.5
2630 silly resolved [ { name: 'async',
2630 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
2630 silly resolved     main: './index',
2630 silly resolved     author: { name: 'Caolan McMahon' },
2630 silly resolved     version: '0.1.22',
2630 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
2630 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
2630 silly resolved     licenses: [ [Object] ],
2630 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
2630 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
2630 silly resolved     readmeFilename: 'README.md',
2630 silly resolved     homepage: 'https://github.com/caolan/async',
2630 silly resolved     _id: 'async@0.1.22',
2630 silly resolved     _from: 'async@0.1.22',
2630 silly resolved     scripts: {} } ]
2631 info install async@0.1.22 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt
2632 info installOne async@0.1.22
2633 silly resolved [ { name: 'async',
2633 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
2633 silly resolved     main: './index',
2633 silly resolved     author: { name: 'Caolan McMahon' },
2633 silly resolved     version: '0.1.22',
2633 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
2633 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
2633 silly resolved     licenses: [ [Object] ],
2633 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
2633 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
2633 silly resolved     readmeFilename: 'README.md',
2633 silly resolved     homepage: 'https://github.com/caolan/async',
2633 silly resolved     _id: 'async@0.1.22',
2633 silly resolved     _from: 'async@0.1.22',
2633 silly resolved     scripts: {} } ]
2634 info install async@0.1.22 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util
2635 info installOne async@0.1.22
2636 silly resolved [ { name: 'async',
2636 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
2636 silly resolved     main: './index',
2636 silly resolved     author: { name: 'Caolan McMahon' },
2636 silly resolved     version: '0.1.22',
2636 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
2636 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
2636 silly resolved     licenses: [ [Object] ],
2636 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
2636 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
2636 silly resolved     readmeFilename: 'README.md',
2636 silly resolved     homepage: 'https://github.com/caolan/async',
2636 silly resolved     _id: 'async@0.1.22',
2636 silly resolved     _from: 'async@0.1.22',
2636 silly resolved     scripts: {} } ]
2637 info install async@0.1.22 into /usr/local/lib/node_modules/grunt
2638 info installOne async@0.1.22
2639 silly resolved [ { name: 'async',
2639 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
2639 silly resolved     main: './index',
2639 silly resolved     author: { name: 'Caolan McMahon' },
2639 silly resolved     version: '0.1.22',
2639 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
2639 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
2639 silly resolved     licenses: [ [Object] ],
2639 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
2639 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
2639 silly resolved     readmeFilename: 'README.md',
2639 silly resolved     homepage: 'https://github.com/caolan/async',
2639 silly resolved     _id: 'async@0.1.22',
2639 silly resolved     _from: 'async@0.1.22',
2639 silly resolved     scripts: {} } ]
2640 info install async@0.1.22 into /usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util
2641 info installOne async@0.1.22
2642 silly resolved [ { name: 'async',
2642 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
2642 silly resolved     main: './lib/async',
2642 silly resolved     author: { name: 'Caolan McMahon' },
2642 silly resolved     version: '0.2.10',
2642 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
2642 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
2642 silly resolved     licenses: [ [Object] ],
2642 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
2642 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
2642 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
2642 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [eachSeries](#eachSeries)\n* [eachLimit](#eachLimit)\n* [map](#map)\n* [mapSeries](#mapSeries)\n* [mapLimit](#mapLimit)\n* [filter](#filter)\n* [filterSeries](#filterSeries)\n* [reject](#reject)\n* [rejectSeries](#rejectSeries)\n* [reduce](#reduce)\n* [reduceRight](#reduceRight)\n* [detect](#detect)\n* [detectSeries](#detectSeries)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n* [concatSeries](#concatSeries)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [parallelLimit](#parallellimittasks-limit-callback)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [applyEachSeries](#applyEachSeries)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.mapLimit([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\')\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
2642 silly resolved     readmeFilename: 'README.md',
2642 silly resolved     homepage: 'https://github.com/caolan/async',
2642 silly resolved     _id: 'async@0.2.10',
2642 silly resolved     _from: 'async@0.2.10' } ]
2643 info install async@0.2.10 into /usr/local/lib/node_modules/grunt-init
2644 info installOne async@0.2.10
2645 silly resolved [ { name: 'async',
2645 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
2645 silly resolved     main: './lib/async',
2645 silly resolved     author: { name: 'Caolan McMahon' },
2645 silly resolved     version: '0.2.10',
2645 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
2645 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
2645 silly resolved     licenses: [ [Object] ],
2645 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
2645 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
2645 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
2645 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [eachSeries](#eachSeries)\n* [eachLimit](#eachLimit)\n* [map](#map)\n* [mapSeries](#mapSeries)\n* [mapLimit](#mapLimit)\n* [filter](#filter)\n* [filterSeries](#filterSeries)\n* [reject](#reject)\n* [rejectSeries](#rejectSeries)\n* [reduce](#reduce)\n* [reduceRight](#reduceRight)\n* [detect](#detect)\n* [detectSeries](#detectSeries)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n* [concatSeries](#concatSeries)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [parallelLimit](#parallellimittasks-limit-callback)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [applyEachSeries](#applyEachSeries)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.mapLimit([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\')\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
2645 silly resolved     readmeFilename: 'README.md',
2645 silly resolved     homepage: 'https://github.com/caolan/async',
2645 silly resolved     _id: 'async@0.2.10',
2645 silly resolved     _from: 'async@0.2.10' } ]
2646 info install async@0.2.10 into /usr/local/lib/node_modules/forever/node_modules/utile
2647 info installOne async@0.2.10
2648 silly resolved [ { name: 'async',
2648 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
2648 silly resolved     main: './lib/async',
2648 silly resolved     author: { name: 'Caolan McMahon' },
2648 silly resolved     version: '0.2.10',
2648 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
2648 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
2648 silly resolved     licenses: [ [Object] ],
2648 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
2648 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
2648 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
2648 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [eachSeries](#eachSeries)\n* [eachLimit](#eachLimit)\n* [map](#map)\n* [mapSeries](#mapSeries)\n* [mapLimit](#mapLimit)\n* [filter](#filter)\n* [filterSeries](#filterSeries)\n* [reject](#reject)\n* [rejectSeries](#rejectSeries)\n* [reduce](#reduce)\n* [reduceRight](#reduceRight)\n* [detect](#detect)\n* [detectSeries](#detectSeries)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n* [concatSeries](#concatSeries)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [parallelLimit](#parallellimittasks-limit-callback)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [applyEachSeries](#applyEachSeries)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.mapLimit([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\')\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
2648 silly resolved     readmeFilename: 'README.md',
2648 silly resolved     homepage: 'https://github.com/caolan/async',
2648 silly resolved     _id: 'async@0.2.10',
2648 silly resolved     _from: 'async@0.2.10' } ]
2649 info install async@0.2.10 into /usr/local/lib/node_modules/forever/node_modules/winston
2650 info installOne async@0.2.10
2651 silly resolved [ { name: 'underscore.string',
2651 silly resolved     version: '2.2.1',
2651 silly resolved     description: 'String manipulation extensions for Underscore.js javascript library.',
2651 silly resolved     homepage: 'http://epeli.github.com/underscore.string/',
2651 silly resolved     contributors:
2651 silly resolved      [ [Object],
2651 silly resolved        [Object],
2651 silly resolved        [Object],
2651 silly resolved        [Object],
2651 silly resolved        [Object],
2651 silly resolved        [Object],
2651 silly resolved        [Object],
2651 silly resolved        [Object] ],
2651 silly resolved     keywords: [ 'underscore', 'string' ],
2651 silly resolved     main: './lib/underscore.string',
2651 silly resolved     directories: { lib: './lib' },
2651 silly resolved     engines: { node: '*' },
2651 silly resolved     repository:
2651 silly resolved      { type: 'git',
2651 silly resolved        url: 'https://github.com/epeli/underscore.string.git' },
2651 silly resolved     bugs: { url: 'https://github.com/epeli/underscore.string/issues' },
2651 silly resolved     licenses: [ [Object] ],
2651 silly resolved     readme: '# Underscore.string [![Build Status](https://secure.travis-ci.org/epeli/underscore.string.png?branch=master)](http://travis-ci.org/epeli/underscore.string) #\n\n\n\nJavascript lacks complete string manipulation operations.\nThis an attempt to fill that gap. List of build-in methods can be found\nfor example from [Dive Into JavaScript][d].\n\n[d]: http://www.diveintojavascript.com/core-javascript-reference/the-string-object\n\n\nAs name states this an extension for [Underscore.js][u], but it can be used\nindependently from **_s**-global variable. But with Underscore.js you can\nuse Object-Oriented style and chaining:\n\n[u]: http://documentcloud.github.com/underscore/\n\n```javascript\n_("   epeli  ").chain().trim().capitalize().value()\n=> "Epeli"\n```\n\n## Download ##\n\n  * [Development version](https://raw.github.com/epeli/underscore.string/master/lib/underscore.string.js) *Uncompressed with Comments 18kb*\n  * [Production version](https://github.com/epeli/underscore.string/raw/master/dist/underscore.string.min.js) *Minified 7kb*\n\n\n## Node.js installation ##\n\n**npm package**\n\n    npm install underscore.string\n\n**Standalone usage**:\n\n```javascript\nvar _s = require(\'underscore.string\');\n```\n\n**Integrate with Underscore.js**:\n\n```javascript\nvar _  = require(\'underscore\');\n\n// Import Underscore.string to separate object, because there are conflict functions (include, reverse, contains)\n_.str = require(\'underscore.string\');\n\n// Mix in non-conflict functions to Underscore namespace if you want\n_.mixin(_.str.exports());\n\n// All functions, include conflict, will be available through _.str object\n_.str.include(\'Underscore.string\', \'string\'); // => true\n```\n\n## String Functions ##\n\nFor availability of functions in this way you need to mix in Underscore.string functions:\n\n```javascript\n_.mixin(_.string.exports());\n```\n\notherwise functions from examples will be available through _.string or _.str objects:\n\n```javascript\n_.str.capitalize(\'epeli\')\n=> "Epeli"\n```\n\n**capitalize** _.capitalize(string)\n\nConverts first letter of the string to uppercase.\n\n```javascript\n_.capitalize("foo Bar")\n=> "Foo Bar"\n```\n\n**chop** _.chop(string, step)\n\n```javascript\n_.chop(\'whitespace\', 3)\n=> [\'whi\',\'tes\',\'pac\',\'e\']\n```\n\n**clean** _.clean(str)\n\nCompress some whitespaces to one.\n\n```javascript\n_.clean(" foo    bar   ")\n=> \'foo bar\'\n```\n\n**chars** _.chars(str)\n\n```javascript\n_.chars(\'Hello\')\n=> [\'H\',\'e\',\'l\',\'l\',\'o\']\n```\n\n**includes** _.includes(string, substring)\n\nTests if string contains a substring.\n\n```javascript\n_.includes("foobar", "ob")\n=> true\n```\n\n**include** available only through _.str object, because Underscore has function with the same name.\n\n```javascript\n_.str.include("foobar", "ob")\n=> true\n```\n\n**includes** function was removed\n\nBut you can create it in this way, for compatibility with previous versions:\n\n```javascript\n_.includes = _.str.include\n```\n\n**count** _.count(string, substring)\n\n```javascript\n_(\'Hello world\').count(\'l\')\n=> 3\n```\n\n**escapeHTML** _.escapeHTML(string)\n\nConverts HTML special characters to their entity equivalents.\n\n```javascript\n_(\'<div>Blah blah blah</div>\').escapeHTML();\n=> \'&lt;div&gt;Blah blah blah&lt;/div&gt;\'\n```\n\n**unescapeHTML** _.unescapeHTML(string)\n\nConverts entity characters to HTML equivalents.\n\n```javascript\n_(\'&lt;div&gt;Blah blah blah&lt;/div&gt;\').unescapeHTML();\n=> \'<div>Blah blah blah</div>\'\n```\n\n**insert** _.insert(string, index, substing)\n\n```javascript\n_(\'Hello \').insert(6, \'world\')\n=> \'Hello world\'\n```\n\n**isBlank** _.isBlank(string)\n\n```javascript\n_(\'\').isBlank(); // => true\n_(\'\\n\').isBlank(); // => true\n_(\' \').isBlank(); // => true\n_(\'a\').isBlank(); // => false\n```\n\n**join** _.join(separator, *strings)\n\nJoins strings together with given separator\n\n```javascript\n_.join(" ", "foo", "bar")\n=> "foo bar"\n```\n\n**lines** _.lines(str)\n\n```javascript\n_.lines("Hello\\nWorld")\n=> ["Hello", "World"]\n```\n\n**reverse** available only through _.str object, because Underscore has function with the same name.\n\nReturn reversed string:\n\n```javascript\n_.str.reverse("foobar")\n=> \'raboof\'\n```\n\n**splice**  _.splice(string, index, howmany, substring)\n\nLike a array splice.\n\n```javascript\n_(\'https://edtsech@bitbucket.org/edtsech/underscore.strings\').splice(30, 7, \'epeli\')\n=> \'https://edtsech@bitbucket.org/epeli/underscore.strings\'\n```\n\n**startsWith** _.startsWith(string, starts)\n\nThis method checks whether string starts with starts.\n\n```javascript\n_("image.gif").startsWith("image")\n=> true\n```\n\n**endsWith** _.endsWith(string, ends)\n\nThis method checks whether string ends with ends.\n\n```javascript\n_("image.gif").endsWith("gif")\n=> true\n```\n\n**succ**  _.succ(str)\n\nReturns the successor to str.\n\n```javascript\n_(\'a\').succ()\n=> \'b\'\n\n_(\'A\').succ()\n=> \'B\'\n```\n\n**supplant**\n\nSupplant function was removed, use Underscore.js [template function][p].\n\n[p]: http://documentcloud.github.com/underscore/#template\n\n**strip** alias for *trim*\n\n**lstrip** alias for *ltrim*\n\n**rstrip** alias for *rtrim*\n\n**titleize** _.titleize(string)\n\n```javascript\n_(\'my name is epeli\').titleize()\n=> \'My Name Is Epeli\'\n```\n\n**camelize** _.camelize(string)\n\nConverts underscored or dasherized string to a camelized one\n\n```javascript\n_(\'-moz-transform\').camelize()\n=> \'MozTransform\'\n```\n\n**classify** _.classify(string)\n\nConverts string to camelized class name\n\n```javascript\n_(\'some_class_name\').classify()\n=> \'SomeClassName\'\n```\n\n**underscored** _.underscored(string)\n\nConverts a camelized or dasherized string into an underscored one\n\n```javascript\n_(\'MozTransform\').underscored()\n=> \'moz_transform\'\n```\n\n**dasherize** _.dasherize(string)\n\nConverts a underscored or camelized string into an dasherized one\n\n```javascript\n_(\'MozTransform\').dasherize()\n=> \'-moz-transform\'\n```\n\n**humanize** _.humanize(string)\n\nConverts an underscored, camelized, or dasherized string into a humanized one.\nAlso removes beginning and ending whitespace, and removes the postfix \'_id\'.\n\n```javascript\n_(\'  capitalize dash-CamelCase_underscore trim  \').humanize()\n=> \'Capitalize dash camel case underscore trim\'\n```\n\n**trim** _.trim(string, [characters])\n\ntrims defined characters from begining and ending of the string.\nDefaults to whitespace characters.\n\n```javascript\n_.trim("  foobar   ")\n=> "foobar"\n\n_.trim("_-foobar-_", "_-")\n=> "foobar"\n```\n\n\n**ltrim** _.ltrim(string, [characters])\n\nLeft trim. Similar to trim, but only for left side.\n\n\n**rtrim** _.rtrim(string, [characters])\n\nRight trim. Similar to trim, but only for right side.\n\n**truncate** _.truncate(string, length, truncateString)\n\n```javascript\n_(\'Hello world\').truncate(5)\n=> \'Hello...\'\n\n_(\'Hello\').truncate(10)\n=> \'Hello\'\n```\n\n**prune** _.prune(string, length, pruneString)\n\nElegant version of truncate.\nMakes sure the pruned string does not exceed the original length.\nAvoid half-chopped words when truncating.\n\n```javascript\n_(\'Hello, world\').prune(5)\n=> \'Hello...\'\n\n_(\'Hello, world\').prune(8)\n=> \'Hello...\'\n\n_(\'Hello, world\').prune(5, \' (read a lot more)\')\n=> \'Hello, world\' (as adding "(read a lot more)" would be longer than the original string)\n\n_(\'Hello, cruel world\').prune(15)\n=> \'Hello, cruel...\'\n\n_(\'Hello\').prune(10)\n=> \'Hello\'\n```\n\n**words** _.words(str, delimiter=" ")\n\nSplit string by delimiter (String or RegExp), \' \' by default.\n\n```javascript\n_.words("I love you")\n=> ["I","love","you"]\n\n_.words("I_love_you", "_")\n=> ["I","love","you"]\n\n_.words("I-love-you", /-/)\n=> ["I","love","you"]\n```\n\n**sprintf** _.sprintf(string format, *arguments)\n\nC like string formatting.\nCredits goes to [Alexandru Marasteanu][o].\nFor more detailed documentation, see the [original page][o].\n\n[o]: http://www.diveintojavascript.com/projects/sprintf-for-javascript\n\n```javascript\n_.sprintf("%.1f", 1.17)\n"1.2"\n```\n\n**pad** _.pad(str, length, [padStr, type])\n\npads the `str` with characters until the total string length is equal to the passed `length` parameter. By default, pads on the **left** with the space char (`" "`). `padStr` is truncated to a single character if necessary.\n\n```javascript\n_.pad("1", 8)\n-> "       1";\n\n_.pad("1", 8, \'0\')\n-> "00000001";\n\n_.pad("1", 8, \'0\', \'right\')\n-> "10000000";\n\n_.pad("1", 8, \'0\', \'both\')\n-> "00001000";\n\n_.pad("1", 8, \'bleepblorp\', \'both\')\n-> "bbbb1bbb";\n```\n\n**lpad** _.lpad(str, length, [padStr])\n\nleft-pad a string. Alias for `pad(str, length, padStr, \'left\')`\n\n```javascript\n_.lpad("1", 8, \'0\')\n-> "00000001";\n```\n\n**rpad** _.rpad(str, length, [padStr])\n\nright-pad a string. Alias for `pad(str, length, padStr, \'right\')`\n\n```javascript\n_.rpad("1", 8, \'0\')\n-> "10000000";\n```\n\n**lrpad** _.lrpad(str, length, [padStr])\n\nleft/right-pad a string. Alias for `pad(str, length, padStr, \'both\')`\n\n```javascript\n_.lrpad("1", 8, \'0\')\n-> "00001000";\n```\n\n**center** alias for **lrpad**\n\n**ljust** alias for *rpad*\n\n**rjust** alias for *lpad*\n\n**toNumber**  _.toNumber(string, [decimals])\n\nParse string to number. Returns NaN if string can\'t be parsed to number.\n\n```javascript\n_(\'2.556\').toNumber()\n=> 3\n\n_(\'2.556\').toNumber(1)\n=> 2.6\n```\n\n**strRight**  _.strRight(string, pattern)\n\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strRight(\'_\')\n=> "is_a_test_string";\n```\n\n**strRightBack**  _.strRightBack(string, pattern)\n\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strRightBack(\'_\')\n=> "string";\n```\n\n**strLeft**  _.strLeft(string, pattern)\n\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strLeft(\'_\')\n=> "This";\n```\n\n**strLeftBack**  _.strLeftBack(string, pattern)\n\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strLeftBack(\'_\')\n=> "This_is_a_test";\n```\n\n**stripTags**\n\nRemoves all html tags from string.\n\n```javascript\n_(\'a <a href="#">link</a>\').stripTags()\n=> \'a link\'\n\n_(\'a <a href="#">link</a><script>alert("hello world!")</script>\').stripTags()\n=> \'a linkalert("hello world!")\'\n```\n\n**toSentence**  _.toSentence(array, [delimiter, lastDelimiter])\n\nJoin an array into a human readable sentence.\n\n```javascript\n_.toSentence([\'jQuery\', \'Mootools\', \'Prototype\'])\n=> \'jQuery, Mootools and Prototype\';\n\n_.toSentence([\'jQuery\', \'Mootools\', \'Prototype\'], \', \', \' unt \')\n=> \'jQuery, Mootools unt Prototype\';\n```\n\n**repeat** _.repeat(string, count, [separator])\n\nRepeats a string count times.\n\n```javascript\n_.repeat("foo", 3)\n=> \'foofoofoo\';\n\n_.repeat("foo", 3, "bar")\n=> \'foobarfoobarfoo\'\n```\n\n**slugify** _.slugify(string)\n\nTransform text into a URL slug. Replaces whitespaces, accentuated, and special characters with a dash.\n\n```javascript\n_.slugify("Un éléphant à l\'orée du bois")\n=> \'un-elephant-a-loree-du-bois\';\n```\n\n***Caution: this function is charset dependent***\n\n## Roadmap ##\n\nAny suggestions or bug reports are welcome. Just email me or more preferably open an issue.\n\n## Changelog ##\n\n### 2.0.0 ###\n\n* Added prune, humanize functions\n* Added _.string (_.str) namespace for Underscore.string library\n* Removed includes function\n\n#### Problems\n\nWe lose two things for `include` and `reverse` methods from `_.string`:\n\n* Calls like `_(\'foobar\').include(\'bar\')` aren\'t available;\n* Chaining isn\'t available too.\n\nBut if you need this functionality you can create aliases for conflict functions which will be convenient for you:\n\n```javascript\n_.mixin({\n    includeString: _.str.include,\n    reverseString: _.str.reverse\n})\n\n// Now wrapper calls and chaining are available.\n_(\'foobar\').chain().reverseString().includeString(\'rab\').value()\n```\n\n#### Standalone Usage\n\nIf you are using Underscore.string without Underscore. You also have `_.string` namespace for it and `_.str` alias\nBut of course you can just reassign `_` variable with `_.string`\n\n```javascript\n_ = _.string\n```\n### 2.2.0 ###\n\n* Capitalize method behavior changed\n* Various perfomance tweaks\n\n### 2.1.1###\n\n* Fixed words method bug\n* Added classify method\n\n### 2.1.0 ###\n\n* AMD support\n* Added toSentence method\n* Added slugify method\n* Lots of speed optimizations\n\n### 2.0.0 ###\n\nFor upgrading to this version you need to mix in Underscore.string library to Underscore object:\n\n```javascript\n_.mixin(_.string.exports());\n```\n\nand all non-conflict Underscore.string functions will be available through Underscore object.\nAlso function `includes` has been removed, you should replace this function by `_.str.include`\nor create alias `_.includes = _.str.include` and all your code will work fine.\n\n### 1.1.6 ###\n\n* Fixed reverse and truncate\n* Added isBlank, stripTags, inlude(alias for includes)\n* Added uglifier compression\n\n### 1.1.5 ###\n\n* Added strRight, strRightBack, strLeft, strLeftBack\n\n### 1.1.4 ###\n\n* Added pad, lpad, rpad, lrpad methods and aliases center, ljust, rjust\n* Integration with Underscore 1.1.6\n\n### 1.1.3 ###\n\n* Added methods: underscored, camelize, dasherize\n* Support newer version of npm\n\n### 1.1.2 ###\n\n* Created functions: lines, chars, words functions\n\n### 1.0.2 ###\n\n* Created integration test suite with underscore.js 1.1.4 (now it\'s absolutely compatible)\n* Removed \'reverse\' function, because this function override underscore.js \'reverse\'\n\n## Contribute ##\n\n* Fork & pull request. Don\'t forget about tests.\n* If you planning add some feature please create issue before.\n\nOtherwise changes will be rejected.\n\n## Contributors list ##\n\n*  Esa-Matti Suuronen <esa-matti@suuronen.org> (<http://esa-matti.suuronen.org/>),\n*  Edward Tsech <edtsech@gmail.com>,\n*  Sasha Koss <kossnocorp@gmail.com> (<http://koss.nocorp.me/>),\n*  Vladimir Dronnikov <dronnikov@gmail.com>,\n*  Pete Kruckenberg (<https://github.com/kruckenb>),\n*  Paul Chavard <paul@chavard.net> (<http://tchak.net>),\n*  Ed Finkler <coj@funkatron.com> (<http://funkatron.com>)\n*  Pavel Pravosud <rwz@duckroll.ru>\n*  Anton Lindqvist <anton@qvister.se> (<http://qvister.se>)\n\n## Licence ##\n\nThe MIT License\n\nCopyright (c) 2011 Esa-Matti Suuronen esa-matti@suuronen.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n',
2651 silly resolved     readmeFilename: 'README.markdown',
2651 silly resolved     _id: 'underscore.string@2.2.1',
2651 silly resolved     _from: 'underscore.string@2.2.1',
2651 silly resolved     scripts: {} } ]
2652 info install underscore.string@2.2.1 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt
2653 info installOne underscore.string@2.2.1
2654 silly resolved [ { name: 'underscore.string',
2654 silly resolved     version: '2.2.1',
2654 silly resolved     description: 'String manipulation extensions for Underscore.js javascript library.',
2654 silly resolved     homepage: 'http://epeli.github.com/underscore.string/',
2654 silly resolved     contributors:
2654 silly resolved      [ [Object],
2654 silly resolved        [Object],
2654 silly resolved        [Object],
2654 silly resolved        [Object],
2654 silly resolved        [Object],
2654 silly resolved        [Object],
2654 silly resolved        [Object],
2654 silly resolved        [Object] ],
2654 silly resolved     keywords: [ 'underscore', 'string' ],
2654 silly resolved     main: './lib/underscore.string',
2654 silly resolved     directories: { lib: './lib' },
2654 silly resolved     engines: { node: '*' },
2654 silly resolved     repository:
2654 silly resolved      { type: 'git',
2654 silly resolved        url: 'https://github.com/epeli/underscore.string.git' },
2654 silly resolved     bugs: { url: 'https://github.com/epeli/underscore.string/issues' },
2654 silly resolved     licenses: [ [Object] ],
2654 silly resolved     readme: '# Underscore.string [![Build Status](https://secure.travis-ci.org/epeli/underscore.string.png?branch=master)](http://travis-ci.org/epeli/underscore.string) #\n\n\n\nJavascript lacks complete string manipulation operations.\nThis an attempt to fill that gap. List of build-in methods can be found\nfor example from [Dive Into JavaScript][d].\n\n[d]: http://www.diveintojavascript.com/core-javascript-reference/the-string-object\n\n\nAs name states this an extension for [Underscore.js][u], but it can be used\nindependently from **_s**-global variable. But with Underscore.js you can\nuse Object-Oriented style and chaining:\n\n[u]: http://documentcloud.github.com/underscore/\n\n```javascript\n_("   epeli  ").chain().trim().capitalize().value()\n=> "Epeli"\n```\n\n## Download ##\n\n  * [Development version](https://raw.github.com/epeli/underscore.string/master/lib/underscore.string.js) *Uncompressed with Comments 18kb*\n  * [Production version](https://github.com/epeli/underscore.string/raw/master/dist/underscore.string.min.js) *Minified 7kb*\n\n\n## Node.js installation ##\n\n**npm package**\n\n    npm install underscore.string\n\n**Standalone usage**:\n\n```javascript\nvar _s = require(\'underscore.string\');\n```\n\n**Integrate with Underscore.js**:\n\n```javascript\nvar _  = require(\'underscore\');\n\n// Import Underscore.string to separate object, because there are conflict functions (include, reverse, contains)\n_.str = require(\'underscore.string\');\n\n// Mix in non-conflict functions to Underscore namespace if you want\n_.mixin(_.str.exports());\n\n// All functions, include conflict, will be available through _.str object\n_.str.include(\'Underscore.string\', \'string\'); // => true\n```\n\n## String Functions ##\n\nFor availability of functions in this way you need to mix in Underscore.string functions:\n\n```javascript\n_.mixin(_.string.exports());\n```\n\notherwise functions from examples will be available through _.string or _.str objects:\n\n```javascript\n_.str.capitalize(\'epeli\')\n=> "Epeli"\n```\n\n**capitalize** _.capitalize(string)\n\nConverts first letter of the string to uppercase.\n\n```javascript\n_.capitalize("foo Bar")\n=> "Foo Bar"\n```\n\n**chop** _.chop(string, step)\n\n```javascript\n_.chop(\'whitespace\', 3)\n=> [\'whi\',\'tes\',\'pac\',\'e\']\n```\n\n**clean** _.clean(str)\n\nCompress some whitespaces to one.\n\n```javascript\n_.clean(" foo    bar   ")\n=> \'foo bar\'\n```\n\n**chars** _.chars(str)\n\n```javascript\n_.chars(\'Hello\')\n=> [\'H\',\'e\',\'l\',\'l\',\'o\']\n```\n\n**includes** _.includes(string, substring)\n\nTests if string contains a substring.\n\n```javascript\n_.includes("foobar", "ob")\n=> true\n```\n\n**include** available only through _.str object, because Underscore has function with the same name.\n\n```javascript\n_.str.include("foobar", "ob")\n=> true\n```\n\n**includes** function was removed\n\nBut you can create it in this way, for compatibility with previous versions:\n\n```javascript\n_.includes = _.str.include\n```\n\n**count** _.count(string, substring)\n\n```javascript\n_(\'Hello world\').count(\'l\')\n=> 3\n```\n\n**escapeHTML** _.escapeHTML(string)\n\nConverts HTML special characters to their entity equivalents.\n\n```javascript\n_(\'<div>Blah blah blah</div>\').escapeHTML();\n=> \'&lt;div&gt;Blah blah blah&lt;/div&gt;\'\n```\n\n**unescapeHTML** _.unescapeHTML(string)\n\nConverts entity characters to HTML equivalents.\n\n```javascript\n_(\'&lt;div&gt;Blah blah blah&lt;/div&gt;\').unescapeHTML();\n=> \'<div>Blah blah blah</div>\'\n```\n\n**insert** _.insert(string, index, substing)\n\n```javascript\n_(\'Hello \').insert(6, \'world\')\n=> \'Hello world\'\n```\n\n**isBlank** _.isBlank(string)\n\n```javascript\n_(\'\').isBlank(); // => true\n_(\'\\n\').isBlank(); // => true\n_(\' \').isBlank(); // => true\n_(\'a\').isBlank(); // => false\n```\n\n**join** _.join(separator, *strings)\n\nJoins strings together with given separator\n\n```javascript\n_.join(" ", "foo", "bar")\n=> "foo bar"\n```\n\n**lines** _.lines(str)\n\n```javascript\n_.lines("Hello\\nWorld")\n=> ["Hello", "World"]\n```\n\n**reverse** available only through _.str object, because Underscore has function with the same name.\n\nReturn reversed string:\n\n```javascript\n_.str.reverse("foobar")\n=> \'raboof\'\n```\n\n**splice**  _.splice(string, index, howmany, substring)\n\nLike a array splice.\n\n```javascript\n_(\'https://edtsech@bitbucket.org/edtsech/underscore.strings\').splice(30, 7, \'epeli\')\n=> \'https://edtsech@bitbucket.org/epeli/underscore.strings\'\n```\n\n**startsWith** _.startsWith(string, starts)\n\nThis method checks whether string starts with starts.\n\n```javascript\n_("image.gif").startsWith("image")\n=> true\n```\n\n**endsWith** _.endsWith(string, ends)\n\nThis method checks whether string ends with ends.\n\n```javascript\n_("image.gif").endsWith("gif")\n=> true\n```\n\n**succ**  _.succ(str)\n\nReturns the successor to str.\n\n```javascript\n_(\'a\').succ()\n=> \'b\'\n\n_(\'A\').succ()\n=> \'B\'\n```\n\n**supplant**\n\nSupplant function was removed, use Underscore.js [template function][p].\n\n[p]: http://documentcloud.github.com/underscore/#template\n\n**strip** alias for *trim*\n\n**lstrip** alias for *ltrim*\n\n**rstrip** alias for *rtrim*\n\n**titleize** _.titleize(string)\n\n```javascript\n_(\'my name is epeli\').titleize()\n=> \'My Name Is Epeli\'\n```\n\n**camelize** _.camelize(string)\n\nConverts underscored or dasherized string to a camelized one\n\n```javascript\n_(\'-moz-transform\').camelize()\n=> \'MozTransform\'\n```\n\n**classify** _.classify(string)\n\nConverts string to camelized class name\n\n```javascript\n_(\'some_class_name\').classify()\n=> \'SomeClassName\'\n```\n\n**underscored** _.underscored(string)\n\nConverts a camelized or dasherized string into an underscored one\n\n```javascript\n_(\'MozTransform\').underscored()\n=> \'moz_transform\'\n```\n\n**dasherize** _.dasherize(string)\n\nConverts a underscored or camelized string into an dasherized one\n\n```javascript\n_(\'MozTransform\').dasherize()\n=> \'-moz-transform\'\n```\n\n**humanize** _.humanize(string)\n\nConverts an underscored, camelized, or dasherized string into a humanized one.\nAlso removes beginning and ending whitespace, and removes the postfix \'_id\'.\n\n```javascript\n_(\'  capitalize dash-CamelCase_underscore trim  \').humanize()\n=> \'Capitalize dash camel case underscore trim\'\n```\n\n**trim** _.trim(string, [characters])\n\ntrims defined characters from begining and ending of the string.\nDefaults to whitespace characters.\n\n```javascript\n_.trim("  foobar   ")\n=> "foobar"\n\n_.trim("_-foobar-_", "_-")\n=> "foobar"\n```\n\n\n**ltrim** _.ltrim(string, [characters])\n\nLeft trim. Similar to trim, but only for left side.\n\n\n**rtrim** _.rtrim(string, [characters])\n\nRight trim. Similar to trim, but only for right side.\n\n**truncate** _.truncate(string, length, truncateString)\n\n```javascript\n_(\'Hello world\').truncate(5)\n=> \'Hello...\'\n\n_(\'Hello\').truncate(10)\n=> \'Hello\'\n```\n\n**prune** _.prune(string, length, pruneString)\n\nElegant version of truncate.\nMakes sure the pruned string does not exceed the original length.\nAvoid half-chopped words when truncating.\n\n```javascript\n_(\'Hello, world\').prune(5)\n=> \'Hello...\'\n\n_(\'Hello, world\').prune(8)\n=> \'Hello...\'\n\n_(\'Hello, world\').prune(5, \' (read a lot more)\')\n=> \'Hello, world\' (as adding "(read a lot more)" would be longer than the original string)\n\n_(\'Hello, cruel world\').prune(15)\n=> \'Hello, cruel...\'\n\n_(\'Hello\').prune(10)\n=> \'Hello\'\n```\n\n**words** _.words(str, delimiter=" ")\n\nSplit string by delimiter (String or RegExp), \' \' by default.\n\n```javascript\n_.words("I love you")\n=> ["I","love","you"]\n\n_.words("I_love_you", "_")\n=> ["I","love","you"]\n\n_.words("I-love-you", /-/)\n=> ["I","love","you"]\n```\n\n**sprintf** _.sprintf(string format, *arguments)\n\nC like string formatting.\nCredits goes to [Alexandru Marasteanu][o].\nFor more detailed documentation, see the [original page][o].\n\n[o]: http://www.diveintojavascript.com/projects/sprintf-for-javascript\n\n```javascript\n_.sprintf("%.1f", 1.17)\n"1.2"\n```\n\n**pad** _.pad(str, length, [padStr, type])\n\npads the `str` with characters until the total string length is equal to the passed `length` parameter. By default, pads on the **left** with the space char (`" "`). `padStr` is truncated to a single character if necessary.\n\n```javascript\n_.pad("1", 8)\n-> "       1";\n\n_.pad("1", 8, \'0\')\n-> "00000001";\n\n_.pad("1", 8, \'0\', \'right\')\n-> "10000000";\n\n_.pad("1", 8, \'0\', \'both\')\n-> "00001000";\n\n_.pad("1", 8, \'bleepblorp\', \'both\')\n-> "bbbb1bbb";\n```\n\n**lpad** _.lpad(str, length, [padStr])\n\nleft-pad a string. Alias for `pad(str, length, padStr, \'left\')`\n\n```javascript\n_.lpad("1", 8, \'0\')\n-> "00000001";\n```\n\n**rpad** _.rpad(str, length, [padStr])\n\nright-pad a string. Alias for `pad(str, length, padStr, \'right\')`\n\n```javascript\n_.rpad("1", 8, \'0\')\n-> "10000000";\n```\n\n**lrpad** _.lrpad(str, length, [padStr])\n\nleft/right-pad a string. Alias for `pad(str, length, padStr, \'both\')`\n\n```javascript\n_.lrpad("1", 8, \'0\')\n-> "00001000";\n```\n\n**center** alias for **lrpad**\n\n**ljust** alias for *rpad*\n\n**rjust** alias for *lpad*\n\n**toNumber**  _.toNumber(string, [decimals])\n\nParse string to number. Returns NaN if string can\'t be parsed to number.\n\n```javascript\n_(\'2.556\').toNumber()\n=> 3\n\n_(\'2.556\').toNumber(1)\n=> 2.6\n```\n\n**strRight**  _.strRight(string, pattern)\n\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strRight(\'_\')\n=> "is_a_test_string";\n```\n\n**strRightBack**  _.strRightBack(string, pattern)\n\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strRightBack(\'_\')\n=> "string";\n```\n\n**strLeft**  _.strLeft(string, pattern)\n\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strLeft(\'_\')\n=> "This";\n```\n\n**strLeftBack**  _.strLeftBack(string, pattern)\n\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strLeftBack(\'_\')\n=> "This_is_a_test";\n```\n\n**stripTags**\n\nRemoves all html tags from string.\n\n```javascript\n_(\'a <a href="#">link</a>\').stripTags()\n=> \'a link\'\n\n_(\'a <a href="#">link</a><script>alert("hello world!")</script>\').stripTags()\n=> \'a linkalert("hello world!")\'\n```\n\n**toSentence**  _.toSentence(array, [delimiter, lastDelimiter])\n\nJoin an array into a human readable sentence.\n\n```javascript\n_.toSentence([\'jQuery\', \'Mootools\', \'Prototype\'])\n=> \'jQuery, Mootools and Prototype\';\n\n_.toSentence([\'jQuery\', \'Mootools\', \'Prototype\'], \', \', \' unt \')\n=> \'jQuery, Mootools unt Prototype\';\n```\n\n**repeat** _.repeat(string, count, [separator])\n\nRepeats a string count times.\n\n```javascript\n_.repeat("foo", 3)\n=> \'foofoofoo\';\n\n_.repeat("foo", 3, "bar")\n=> \'foobarfoobarfoo\'\n```\n\n**slugify** _.slugify(string)\n\nTransform text into a URL slug. Replaces whitespaces, accentuated, and special characters with a dash.\n\n```javascript\n_.slugify("Un éléphant à l\'orée du bois")\n=> \'un-elephant-a-loree-du-bois\';\n```\n\n***Caution: this function is charset dependent***\n\n## Roadmap ##\n\nAny suggestions or bug reports are welcome. Just email me or more preferably open an issue.\n\n## Changelog ##\n\n### 2.0.0 ###\n\n* Added prune, humanize functions\n* Added _.string (_.str) namespace for Underscore.string library\n* Removed includes function\n\n#### Problems\n\nWe lose two things for `include` and `reverse` methods from `_.string`:\n\n* Calls like `_(\'foobar\').include(\'bar\')` aren\'t available;\n* Chaining isn\'t available too.\n\nBut if you need this functionality you can create aliases for conflict functions which will be convenient for you:\n\n```javascript\n_.mixin({\n    includeString: _.str.include,\n    reverseString: _.str.reverse\n})\n\n// Now wrapper calls and chaining are available.\n_(\'foobar\').chain().reverseString().includeString(\'rab\').value()\n```\n\n#### Standalone Usage\n\nIf you are using Underscore.string without Underscore. You also have `_.string` namespace for it and `_.str` alias\nBut of course you can just reassign `_` variable with `_.string`\n\n```javascript\n_ = _.string\n```\n### 2.2.0 ###\n\n* Capitalize method behavior changed\n* Various perfomance tweaks\n\n### 2.1.1###\n\n* Fixed words method bug\n* Added classify method\n\n### 2.1.0 ###\n\n* AMD support\n* Added toSentence method\n* Added slugify method\n* Lots of speed optimizations\n\n### 2.0.0 ###\n\nFor upgrading to this version you need to mix in Underscore.string library to Underscore object:\n\n```javascript\n_.mixin(_.string.exports());\n```\n\nand all non-conflict Underscore.string functions will be available through Underscore object.\nAlso function `includes` has been removed, you should replace this function by `_.str.include`\nor create alias `_.includes = _.str.include` and all your code will work fine.\n\n### 1.1.6 ###\n\n* Fixed reverse and truncate\n* Added isBlank, stripTags, inlude(alias for includes)\n* Added uglifier compression\n\n### 1.1.5 ###\n\n* Added strRight, strRightBack, strLeft, strLeftBack\n\n### 1.1.4 ###\n\n* Added pad, lpad, rpad, lrpad methods and aliases center, ljust, rjust\n* Integration with Underscore 1.1.6\n\n### 1.1.3 ###\n\n* Added methods: underscored, camelize, dasherize\n* Support newer version of npm\n\n### 1.1.2 ###\n\n* Created functions: lines, chars, words functions\n\n### 1.0.2 ###\n\n* Created integration test suite with underscore.js 1.1.4 (now it\'s absolutely compatible)\n* Removed \'reverse\' function, because this function override underscore.js \'reverse\'\n\n## Contribute ##\n\n* Fork & pull request. Don\'t forget about tests.\n* If you planning add some feature please create issue before.\n\nOtherwise changes will be rejected.\n\n## Contributors list ##\n\n*  Esa-Matti Suuronen <esa-matti@suuronen.org> (<http://esa-matti.suuronen.org/>),\n*  Edward Tsech <edtsech@gmail.com>,\n*  Sasha Koss <kossnocorp@gmail.com> (<http://koss.nocorp.me/>),\n*  Vladimir Dronnikov <dronnikov@gmail.com>,\n*  Pete Kruckenberg (<https://github.com/kruckenb>),\n*  Paul Chavard <paul@chavard.net> (<http://tchak.net>),\n*  Ed Finkler <coj@funkatron.com> (<http://funkatron.com>)\n*  Pavel Pravosud <rwz@duckroll.ru>\n*  Anton Lindqvist <anton@qvister.se> (<http://qvister.se>)\n\n## Licence ##\n\nThe MIT License\n\nCopyright (c) 2011 Esa-Matti Suuronen esa-matti@suuronen.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n',
2654 silly resolved     readmeFilename: 'README.markdown',
2654 silly resolved     _id: 'underscore.string@2.2.1',
2654 silly resolved     _from: 'underscore.string@2.2.1',
2654 silly resolved     scripts: {} } ]
2655 info install underscore.string@2.2.1 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util
2656 info installOne underscore.string@2.2.1
2657 silly resolved [ { name: 'underscore.string',
2657 silly resolved     version: '2.2.1',
2657 silly resolved     description: 'String manipulation extensions for Underscore.js javascript library.',
2657 silly resolved     homepage: 'http://epeli.github.com/underscore.string/',
2657 silly resolved     contributors:
2657 silly resolved      [ [Object],
2657 silly resolved        [Object],
2657 silly resolved        [Object],
2657 silly resolved        [Object],
2657 silly resolved        [Object],
2657 silly resolved        [Object],
2657 silly resolved        [Object],
2657 silly resolved        [Object] ],
2657 silly resolved     keywords: [ 'underscore', 'string' ],
2657 silly resolved     main: './lib/underscore.string',
2657 silly resolved     directories: { lib: './lib' },
2657 silly resolved     engines: { node: '*' },
2657 silly resolved     repository:
2657 silly resolved      { type: 'git',
2657 silly resolved        url: 'https://github.com/epeli/underscore.string.git' },
2657 silly resolved     bugs: { url: 'https://github.com/epeli/underscore.string/issues' },
2657 silly resolved     licenses: [ [Object] ],
2657 silly resolved     readme: '# Underscore.string [![Build Status](https://secure.travis-ci.org/epeli/underscore.string.png?branch=master)](http://travis-ci.org/epeli/underscore.string) #\n\n\n\nJavascript lacks complete string manipulation operations.\nThis an attempt to fill that gap. List of build-in methods can be found\nfor example from [Dive Into JavaScript][d].\n\n[d]: http://www.diveintojavascript.com/core-javascript-reference/the-string-object\n\n\nAs name states this an extension for [Underscore.js][u], but it can be used\nindependently from **_s**-global variable. But with Underscore.js you can\nuse Object-Oriented style and chaining:\n\n[u]: http://documentcloud.github.com/underscore/\n\n```javascript\n_("   epeli  ").chain().trim().capitalize().value()\n=> "Epeli"\n```\n\n## Download ##\n\n  * [Development version](https://raw.github.com/epeli/underscore.string/master/lib/underscore.string.js) *Uncompressed with Comments 18kb*\n  * [Production version](https://github.com/epeli/underscore.string/raw/master/dist/underscore.string.min.js) *Minified 7kb*\n\n\n## Node.js installation ##\n\n**npm package**\n\n    npm install underscore.string\n\n**Standalone usage**:\n\n```javascript\nvar _s = require(\'underscore.string\');\n```\n\n**Integrate with Underscore.js**:\n\n```javascript\nvar _  = require(\'underscore\');\n\n// Import Underscore.string to separate object, because there are conflict functions (include, reverse, contains)\n_.str = require(\'underscore.string\');\n\n// Mix in non-conflict functions to Underscore namespace if you want\n_.mixin(_.str.exports());\n\n// All functions, include conflict, will be available through _.str object\n_.str.include(\'Underscore.string\', \'string\'); // => true\n```\n\n## String Functions ##\n\nFor availability of functions in this way you need to mix in Underscore.string functions:\n\n```javascript\n_.mixin(_.string.exports());\n```\n\notherwise functions from examples will be available through _.string or _.str objects:\n\n```javascript\n_.str.capitalize(\'epeli\')\n=> "Epeli"\n```\n\n**capitalize** _.capitalize(string)\n\nConverts first letter of the string to uppercase.\n\n```javascript\n_.capitalize("foo Bar")\n=> "Foo Bar"\n```\n\n**chop** _.chop(string, step)\n\n```javascript\n_.chop(\'whitespace\', 3)\n=> [\'whi\',\'tes\',\'pac\',\'e\']\n```\n\n**clean** _.clean(str)\n\nCompress some whitespaces to one.\n\n```javascript\n_.clean(" foo    bar   ")\n=> \'foo bar\'\n```\n\n**chars** _.chars(str)\n\n```javascript\n_.chars(\'Hello\')\n=> [\'H\',\'e\',\'l\',\'l\',\'o\']\n```\n\n**includes** _.includes(string, substring)\n\nTests if string contains a substring.\n\n```javascript\n_.includes("foobar", "ob")\n=> true\n```\n\n**include** available only through _.str object, because Underscore has function with the same name.\n\n```javascript\n_.str.include("foobar", "ob")\n=> true\n```\n\n**includes** function was removed\n\nBut you can create it in this way, for compatibility with previous versions:\n\n```javascript\n_.includes = _.str.include\n```\n\n**count** _.count(string, substring)\n\n```javascript\n_(\'Hello world\').count(\'l\')\n=> 3\n```\n\n**escapeHTML** _.escapeHTML(string)\n\nConverts HTML special characters to their entity equivalents.\n\n```javascript\n_(\'<div>Blah blah blah</div>\').escapeHTML();\n=> \'&lt;div&gt;Blah blah blah&lt;/div&gt;\'\n```\n\n**unescapeHTML** _.unescapeHTML(string)\n\nConverts entity characters to HTML equivalents.\n\n```javascript\n_(\'&lt;div&gt;Blah blah blah&lt;/div&gt;\').unescapeHTML();\n=> \'<div>Blah blah blah</div>\'\n```\n\n**insert** _.insert(string, index, substing)\n\n```javascript\n_(\'Hello \').insert(6, \'world\')\n=> \'Hello world\'\n```\n\n**isBlank** _.isBlank(string)\n\n```javascript\n_(\'\').isBlank(); // => true\n_(\'\\n\').isBlank(); // => true\n_(\' \').isBlank(); // => true\n_(\'a\').isBlank(); // => false\n```\n\n**join** _.join(separator, *strings)\n\nJoins strings together with given separator\n\n```javascript\n_.join(" ", "foo", "bar")\n=> "foo bar"\n```\n\n**lines** _.lines(str)\n\n```javascript\n_.lines("Hello\\nWorld")\n=> ["Hello", "World"]\n```\n\n**reverse** available only through _.str object, because Underscore has function with the same name.\n\nReturn reversed string:\n\n```javascript\n_.str.reverse("foobar")\n=> \'raboof\'\n```\n\n**splice**  _.splice(string, index, howmany, substring)\n\nLike a array splice.\n\n```javascript\n_(\'https://edtsech@bitbucket.org/edtsech/underscore.strings\').splice(30, 7, \'epeli\')\n=> \'https://edtsech@bitbucket.org/epeli/underscore.strings\'\n```\n\n**startsWith** _.startsWith(string, starts)\n\nThis method checks whether string starts with starts.\n\n```javascript\n_("image.gif").startsWith("image")\n=> true\n```\n\n**endsWith** _.endsWith(string, ends)\n\nThis method checks whether string ends with ends.\n\n```javascript\n_("image.gif").endsWith("gif")\n=> true\n```\n\n**succ**  _.succ(str)\n\nReturns the successor to str.\n\n```javascript\n_(\'a\').succ()\n=> \'b\'\n\n_(\'A\').succ()\n=> \'B\'\n```\n\n**supplant**\n\nSupplant function was removed, use Underscore.js [template function][p].\n\n[p]: http://documentcloud.github.com/underscore/#template\n\n**strip** alias for *trim*\n\n**lstrip** alias for *ltrim*\n\n**rstrip** alias for *rtrim*\n\n**titleize** _.titleize(string)\n\n```javascript\n_(\'my name is epeli\').titleize()\n=> \'My Name Is Epeli\'\n```\n\n**camelize** _.camelize(string)\n\nConverts underscored or dasherized string to a camelized one\n\n```javascript\n_(\'-moz-transform\').camelize()\n=> \'MozTransform\'\n```\n\n**classify** _.classify(string)\n\nConverts string to camelized class name\n\n```javascript\n_(\'some_class_name\').classify()\n=> \'SomeClassName\'\n```\n\n**underscored** _.underscored(string)\n\nConverts a camelized or dasherized string into an underscored one\n\n```javascript\n_(\'MozTransform\').underscored()\n=> \'moz_transform\'\n```\n\n**dasherize** _.dasherize(string)\n\nConverts a underscored or camelized string into an dasherized one\n\n```javascript\n_(\'MozTransform\').dasherize()\n=> \'-moz-transform\'\n```\n\n**humanize** _.humanize(string)\n\nConverts an underscored, camelized, or dasherized string into a humanized one.\nAlso removes beginning and ending whitespace, and removes the postfix \'_id\'.\n\n```javascript\n_(\'  capitalize dash-CamelCase_underscore trim  \').humanize()\n=> \'Capitalize dash camel case underscore trim\'\n```\n\n**trim** _.trim(string, [characters])\n\ntrims defined characters from begining and ending of the string.\nDefaults to whitespace characters.\n\n```javascript\n_.trim("  foobar   ")\n=> "foobar"\n\n_.trim("_-foobar-_", "_-")\n=> "foobar"\n```\n\n\n**ltrim** _.ltrim(string, [characters])\n\nLeft trim. Similar to trim, but only for left side.\n\n\n**rtrim** _.rtrim(string, [characters])\n\nRight trim. Similar to trim, but only for right side.\n\n**truncate** _.truncate(string, length, truncateString)\n\n```javascript\n_(\'Hello world\').truncate(5)\n=> \'Hello...\'\n\n_(\'Hello\').truncate(10)\n=> \'Hello\'\n```\n\n**prune** _.prune(string, length, pruneString)\n\nElegant version of truncate.\nMakes sure the pruned string does not exceed the original length.\nAvoid half-chopped words when truncating.\n\n```javascript\n_(\'Hello, world\').prune(5)\n=> \'Hello...\'\n\n_(\'Hello, world\').prune(8)\n=> \'Hello...\'\n\n_(\'Hello, world\').prune(5, \' (read a lot more)\')\n=> \'Hello, world\' (as adding "(read a lot more)" would be longer than the original string)\n\n_(\'Hello, cruel world\').prune(15)\n=> \'Hello, cruel...\'\n\n_(\'Hello\').prune(10)\n=> \'Hello\'\n```\n\n**words** _.words(str, delimiter=" ")\n\nSplit string by delimiter (String or RegExp), \' \' by default.\n\n```javascript\n_.words("I love you")\n=> ["I","love","you"]\n\n_.words("I_love_you", "_")\n=> ["I","love","you"]\n\n_.words("I-love-you", /-/)\n=> ["I","love","you"]\n```\n\n**sprintf** _.sprintf(string format, *arguments)\n\nC like string formatting.\nCredits goes to [Alexandru Marasteanu][o].\nFor more detailed documentation, see the [original page][o].\n\n[o]: http://www.diveintojavascript.com/projects/sprintf-for-javascript\n\n```javascript\n_.sprintf("%.1f", 1.17)\n"1.2"\n```\n\n**pad** _.pad(str, length, [padStr, type])\n\npads the `str` with characters until the total string length is equal to the passed `length` parameter. By default, pads on the **left** with the space char (`" "`). `padStr` is truncated to a single character if necessary.\n\n```javascript\n_.pad("1", 8)\n-> "       1";\n\n_.pad("1", 8, \'0\')\n-> "00000001";\n\n_.pad("1", 8, \'0\', \'right\')\n-> "10000000";\n\n_.pad("1", 8, \'0\', \'both\')\n-> "00001000";\n\n_.pad("1", 8, \'bleepblorp\', \'both\')\n-> "bbbb1bbb";\n```\n\n**lpad** _.lpad(str, length, [padStr])\n\nleft-pad a string. Alias for `pad(str, length, padStr, \'left\')`\n\n```javascript\n_.lpad("1", 8, \'0\')\n-> "00000001";\n```\n\n**rpad** _.rpad(str, length, [padStr])\n\nright-pad a string. Alias for `pad(str, length, padStr, \'right\')`\n\n```javascript\n_.rpad("1", 8, \'0\')\n-> "10000000";\n```\n\n**lrpad** _.lrpad(str, length, [padStr])\n\nleft/right-pad a string. Alias for `pad(str, length, padStr, \'both\')`\n\n```javascript\n_.lrpad("1", 8, \'0\')\n-> "00001000";\n```\n\n**center** alias for **lrpad**\n\n**ljust** alias for *rpad*\n\n**rjust** alias for *lpad*\n\n**toNumber**  _.toNumber(string, [decimals])\n\nParse string to number. Returns NaN if string can\'t be parsed to number.\n\n```javascript\n_(\'2.556\').toNumber()\n=> 3\n\n_(\'2.556\').toNumber(1)\n=> 2.6\n```\n\n**strRight**  _.strRight(string, pattern)\n\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strRight(\'_\')\n=> "is_a_test_string";\n```\n\n**strRightBack**  _.strRightBack(string, pattern)\n\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strRightBack(\'_\')\n=> "string";\n```\n\n**strLeft**  _.strLeft(string, pattern)\n\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strLeft(\'_\')\n=> "This";\n```\n\n**strLeftBack**  _.strLeftBack(string, pattern)\n\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strLeftBack(\'_\')\n=> "This_is_a_test";\n```\n\n**stripTags**\n\nRemoves all html tags from string.\n\n```javascript\n_(\'a <a href="#">link</a>\').stripTags()\n=> \'a link\'\n\n_(\'a <a href="#">link</a><script>alert("hello world!")</script>\').stripTags()\n=> \'a linkalert("hello world!")\'\n```\n\n**toSentence**  _.toSentence(array, [delimiter, lastDelimiter])\n\nJoin an array into a human readable sentence.\n\n```javascript\n_.toSentence([\'jQuery\', \'Mootools\', \'Prototype\'])\n=> \'jQuery, Mootools and Prototype\';\n\n_.toSentence([\'jQuery\', \'Mootools\', \'Prototype\'], \', \', \' unt \')\n=> \'jQuery, Mootools unt Prototype\';\n```\n\n**repeat** _.repeat(string, count, [separator])\n\nRepeats a string count times.\n\n```javascript\n_.repeat("foo", 3)\n=> \'foofoofoo\';\n\n_.repeat("foo", 3, "bar")\n=> \'foobarfoobarfoo\'\n```\n\n**slugify** _.slugify(string)\n\nTransform text into a URL slug. Replaces whitespaces, accentuated, and special characters with a dash.\n\n```javascript\n_.slugify("Un éléphant à l\'orée du bois")\n=> \'un-elephant-a-loree-du-bois\';\n```\n\n***Caution: this function is charset dependent***\n\n## Roadmap ##\n\nAny suggestions or bug reports are welcome. Just email me or more preferably open an issue.\n\n## Changelog ##\n\n### 2.0.0 ###\n\n* Added prune, humanize functions\n* Added _.string (_.str) namespace for Underscore.string library\n* Removed includes function\n\n#### Problems\n\nWe lose two things for `include` and `reverse` methods from `_.string`:\n\n* Calls like `_(\'foobar\').include(\'bar\')` aren\'t available;\n* Chaining isn\'t available too.\n\nBut if you need this functionality you can create aliases for conflict functions which will be convenient for you:\n\n```javascript\n_.mixin({\n    includeString: _.str.include,\n    reverseString: _.str.reverse\n})\n\n// Now wrapper calls and chaining are available.\n_(\'foobar\').chain().reverseString().includeString(\'rab\').value()\n```\n\n#### Standalone Usage\n\nIf you are using Underscore.string without Underscore. You also have `_.string` namespace for it and `_.str` alias\nBut of course you can just reassign `_` variable with `_.string`\n\n```javascript\n_ = _.string\n```\n### 2.2.0 ###\n\n* Capitalize method behavior changed\n* Various perfomance tweaks\n\n### 2.1.1###\n\n* Fixed words method bug\n* Added classify method\n\n### 2.1.0 ###\n\n* AMD support\n* Added toSentence method\n* Added slugify method\n* Lots of speed optimizations\n\n### 2.0.0 ###\n\nFor upgrading to this version you need to mix in Underscore.string library to Underscore object:\n\n```javascript\n_.mixin(_.string.exports());\n```\n\nand all non-conflict Underscore.string functions will be available through Underscore object.\nAlso function `includes` has been removed, you should replace this function by `_.str.include`\nor create alias `_.includes = _.str.include` and all your code will work fine.\n\n### 1.1.6 ###\n\n* Fixed reverse and truncate\n* Added isBlank, stripTags, inlude(alias for includes)\n* Added uglifier compression\n\n### 1.1.5 ###\n\n* Added strRight, strRightBack, strLeft, strLeftBack\n\n### 1.1.4 ###\n\n* Added pad, lpad, rpad, lrpad methods and aliases center, ljust, rjust\n* Integration with Underscore 1.1.6\n\n### 1.1.3 ###\n\n* Added methods: underscored, camelize, dasherize\n* Support newer version of npm\n\n### 1.1.2 ###\n\n* Created functions: lines, chars, words functions\n\n### 1.0.2 ###\n\n* Created integration test suite with underscore.js 1.1.4 (now it\'s absolutely compatible)\n* Removed \'reverse\' function, because this function override underscore.js \'reverse\'\n\n## Contribute ##\n\n* Fork & pull request. Don\'t forget about tests.\n* If you planning add some feature please create issue before.\n\nOtherwise changes will be rejected.\n\n## Contributors list ##\n\n*  Esa-Matti Suuronen <esa-matti@suuronen.org> (<http://esa-matti.suuronen.org/>),\n*  Edward Tsech <edtsech@gmail.com>,\n*  Sasha Koss <kossnocorp@gmail.com> (<http://koss.nocorp.me/>),\n*  Vladimir Dronnikov <dronnikov@gmail.com>,\n*  Pete Kruckenberg (<https://github.com/kruckenb>),\n*  Paul Chavard <paul@chavard.net> (<http://tchak.net>),\n*  Ed Finkler <coj@funkatron.com> (<http://funkatron.com>)\n*  Pavel Pravosud <rwz@duckroll.ru>\n*  Anton Lindqvist <anton@qvister.se> (<http://qvister.se>)\n\n## Licence ##\n\nThe MIT License\n\nCopyright (c) 2011 Esa-Matti Suuronen esa-matti@suuronen.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n',
2657 silly resolved     readmeFilename: 'README.markdown',
2657 silly resolved     _id: 'underscore.string@2.2.1',
2657 silly resolved     _from: 'underscore.string@2.2.1',
2657 silly resolved     scripts: {} } ]
2658 info install underscore.string@2.2.1 into /usr/local/lib/node_modules/grunt
2659 info installOne underscore.string@2.2.1
2660 silly resolved [ { name: 'underscore.string',
2660 silly resolved     version: '2.2.1',
2660 silly resolved     description: 'String manipulation extensions for Underscore.js javascript library.',
2660 silly resolved     homepage: 'http://epeli.github.com/underscore.string/',
2660 silly resolved     contributors:
2660 silly resolved      [ [Object],
2660 silly resolved        [Object],
2660 silly resolved        [Object],
2660 silly resolved        [Object],
2660 silly resolved        [Object],
2660 silly resolved        [Object],
2660 silly resolved        [Object],
2660 silly resolved        [Object] ],
2660 silly resolved     keywords: [ 'underscore', 'string' ],
2660 silly resolved     main: './lib/underscore.string',
2660 silly resolved     directories: { lib: './lib' },
2660 silly resolved     engines: { node: '*' },
2660 silly resolved     repository:
2660 silly resolved      { type: 'git',
2660 silly resolved        url: 'https://github.com/epeli/underscore.string.git' },
2660 silly resolved     bugs: { url: 'https://github.com/epeli/underscore.string/issues' },
2660 silly resolved     licenses: [ [Object] ],
2660 silly resolved     readme: '# Underscore.string [![Build Status](https://secure.travis-ci.org/epeli/underscore.string.png?branch=master)](http://travis-ci.org/epeli/underscore.string) #\n\n\n\nJavascript lacks complete string manipulation operations.\nThis an attempt to fill that gap. List of build-in methods can be found\nfor example from [Dive Into JavaScript][d].\n\n[d]: http://www.diveintojavascript.com/core-javascript-reference/the-string-object\n\n\nAs name states this an extension for [Underscore.js][u], but it can be used\nindependently from **_s**-global variable. But with Underscore.js you can\nuse Object-Oriented style and chaining:\n\n[u]: http://documentcloud.github.com/underscore/\n\n```javascript\n_("   epeli  ").chain().trim().capitalize().value()\n=> "Epeli"\n```\n\n## Download ##\n\n  * [Development version](https://raw.github.com/epeli/underscore.string/master/lib/underscore.string.js) *Uncompressed with Comments 18kb*\n  * [Production version](https://github.com/epeli/underscore.string/raw/master/dist/underscore.string.min.js) *Minified 7kb*\n\n\n## Node.js installation ##\n\n**npm package**\n\n    npm install underscore.string\n\n**Standalone usage**:\n\n```javascript\nvar _s = require(\'underscore.string\');\n```\n\n**Integrate with Underscore.js**:\n\n```javascript\nvar _  = require(\'underscore\');\n\n// Import Underscore.string to separate object, because there are conflict functions (include, reverse, contains)\n_.str = require(\'underscore.string\');\n\n// Mix in non-conflict functions to Underscore namespace if you want\n_.mixin(_.str.exports());\n\n// All functions, include conflict, will be available through _.str object\n_.str.include(\'Underscore.string\', \'string\'); // => true\n```\n\n## String Functions ##\n\nFor availability of functions in this way you need to mix in Underscore.string functions:\n\n```javascript\n_.mixin(_.string.exports());\n```\n\notherwise functions from examples will be available through _.string or _.str objects:\n\n```javascript\n_.str.capitalize(\'epeli\')\n=> "Epeli"\n```\n\n**capitalize** _.capitalize(string)\n\nConverts first letter of the string to uppercase.\n\n```javascript\n_.capitalize("foo Bar")\n=> "Foo Bar"\n```\n\n**chop** _.chop(string, step)\n\n```javascript\n_.chop(\'whitespace\', 3)\n=> [\'whi\',\'tes\',\'pac\',\'e\']\n```\n\n**clean** _.clean(str)\n\nCompress some whitespaces to one.\n\n```javascript\n_.clean(" foo    bar   ")\n=> \'foo bar\'\n```\n\n**chars** _.chars(str)\n\n```javascript\n_.chars(\'Hello\')\n=> [\'H\',\'e\',\'l\',\'l\',\'o\']\n```\n\n**includes** _.includes(string, substring)\n\nTests if string contains a substring.\n\n```javascript\n_.includes("foobar", "ob")\n=> true\n```\n\n**include** available only through _.str object, because Underscore has function with the same name.\n\n```javascript\n_.str.include("foobar", "ob")\n=> true\n```\n\n**includes** function was removed\n\nBut you can create it in this way, for compatibility with previous versions:\n\n```javascript\n_.includes = _.str.include\n```\n\n**count** _.count(string, substring)\n\n```javascript\n_(\'Hello world\').count(\'l\')\n=> 3\n```\n\n**escapeHTML** _.escapeHTML(string)\n\nConverts HTML special characters to their entity equivalents.\n\n```javascript\n_(\'<div>Blah blah blah</div>\').escapeHTML();\n=> \'&lt;div&gt;Blah blah blah&lt;/div&gt;\'\n```\n\n**unescapeHTML** _.unescapeHTML(string)\n\nConverts entity characters to HTML equivalents.\n\n```javascript\n_(\'&lt;div&gt;Blah blah blah&lt;/div&gt;\').unescapeHTML();\n=> \'<div>Blah blah blah</div>\'\n```\n\n**insert** _.insert(string, index, substing)\n\n```javascript\n_(\'Hello \').insert(6, \'world\')\n=> \'Hello world\'\n```\n\n**isBlank** _.isBlank(string)\n\n```javascript\n_(\'\').isBlank(); // => true\n_(\'\\n\').isBlank(); // => true\n_(\' \').isBlank(); // => true\n_(\'a\').isBlank(); // => false\n```\n\n**join** _.join(separator, *strings)\n\nJoins strings together with given separator\n\n```javascript\n_.join(" ", "foo", "bar")\n=> "foo bar"\n```\n\n**lines** _.lines(str)\n\n```javascript\n_.lines("Hello\\nWorld")\n=> ["Hello", "World"]\n```\n\n**reverse** available only through _.str object, because Underscore has function with the same name.\n\nReturn reversed string:\n\n```javascript\n_.str.reverse("foobar")\n=> \'raboof\'\n```\n\n**splice**  _.splice(string, index, howmany, substring)\n\nLike a array splice.\n\n```javascript\n_(\'https://edtsech@bitbucket.org/edtsech/underscore.strings\').splice(30, 7, \'epeli\')\n=> \'https://edtsech@bitbucket.org/epeli/underscore.strings\'\n```\n\n**startsWith** _.startsWith(string, starts)\n\nThis method checks whether string starts with starts.\n\n```javascript\n_("image.gif").startsWith("image")\n=> true\n```\n\n**endsWith** _.endsWith(string, ends)\n\nThis method checks whether string ends with ends.\n\n```javascript\n_("image.gif").endsWith("gif")\n=> true\n```\n\n**succ**  _.succ(str)\n\nReturns the successor to str.\n\n```javascript\n_(\'a\').succ()\n=> \'b\'\n\n_(\'A\').succ()\n=> \'B\'\n```\n\n**supplant**\n\nSupplant function was removed, use Underscore.js [template function][p].\n\n[p]: http://documentcloud.github.com/underscore/#template\n\n**strip** alias for *trim*\n\n**lstrip** alias for *ltrim*\n\n**rstrip** alias for *rtrim*\n\n**titleize** _.titleize(string)\n\n```javascript\n_(\'my name is epeli\').titleize()\n=> \'My Name Is Epeli\'\n```\n\n**camelize** _.camelize(string)\n\nConverts underscored or dasherized string to a camelized one\n\n```javascript\n_(\'-moz-transform\').camelize()\n=> \'MozTransform\'\n```\n\n**classify** _.classify(string)\n\nConverts string to camelized class name\n\n```javascript\n_(\'some_class_name\').classify()\n=> \'SomeClassName\'\n```\n\n**underscored** _.underscored(string)\n\nConverts a camelized or dasherized string into an underscored one\n\n```javascript\n_(\'MozTransform\').underscored()\n=> \'moz_transform\'\n```\n\n**dasherize** _.dasherize(string)\n\nConverts a underscored or camelized string into an dasherized one\n\n```javascript\n_(\'MozTransform\').dasherize()\n=> \'-moz-transform\'\n```\n\n**humanize** _.humanize(string)\n\nConverts an underscored, camelized, or dasherized string into a humanized one.\nAlso removes beginning and ending whitespace, and removes the postfix \'_id\'.\n\n```javascript\n_(\'  capitalize dash-CamelCase_underscore trim  \').humanize()\n=> \'Capitalize dash camel case underscore trim\'\n```\n\n**trim** _.trim(string, [characters])\n\ntrims defined characters from begining and ending of the string.\nDefaults to whitespace characters.\n\n```javascript\n_.trim("  foobar   ")\n=> "foobar"\n\n_.trim("_-foobar-_", "_-")\n=> "foobar"\n```\n\n\n**ltrim** _.ltrim(string, [characters])\n\nLeft trim. Similar to trim, but only for left side.\n\n\n**rtrim** _.rtrim(string, [characters])\n\nRight trim. Similar to trim, but only for right side.\n\n**truncate** _.truncate(string, length, truncateString)\n\n```javascript\n_(\'Hello world\').truncate(5)\n=> \'Hello...\'\n\n_(\'Hello\').truncate(10)\n=> \'Hello\'\n```\n\n**prune** _.prune(string, length, pruneString)\n\nElegant version of truncate.\nMakes sure the pruned string does not exceed the original length.\nAvoid half-chopped words when truncating.\n\n```javascript\n_(\'Hello, world\').prune(5)\n=> \'Hello...\'\n\n_(\'Hello, world\').prune(8)\n=> \'Hello...\'\n\n_(\'Hello, world\').prune(5, \' (read a lot more)\')\n=> \'Hello, world\' (as adding "(read a lot more)" would be longer than the original string)\n\n_(\'Hello, cruel world\').prune(15)\n=> \'Hello, cruel...\'\n\n_(\'Hello\').prune(10)\n=> \'Hello\'\n```\n\n**words** _.words(str, delimiter=" ")\n\nSplit string by delimiter (String or RegExp), \' \' by default.\n\n```javascript\n_.words("I love you")\n=> ["I","love","you"]\n\n_.words("I_love_you", "_")\n=> ["I","love","you"]\n\n_.words("I-love-you", /-/)\n=> ["I","love","you"]\n```\n\n**sprintf** _.sprintf(string format, *arguments)\n\nC like string formatting.\nCredits goes to [Alexandru Marasteanu][o].\nFor more detailed documentation, see the [original page][o].\n\n[o]: http://www.diveintojavascript.com/projects/sprintf-for-javascript\n\n```javascript\n_.sprintf("%.1f", 1.17)\n"1.2"\n```\n\n**pad** _.pad(str, length, [padStr, type])\n\npads the `str` with characters until the total string length is equal to the passed `length` parameter. By default, pads on the **left** with the space char (`" "`). `padStr` is truncated to a single character if necessary.\n\n```javascript\n_.pad("1", 8)\n-> "       1";\n\n_.pad("1", 8, \'0\')\n-> "00000001";\n\n_.pad("1", 8, \'0\', \'right\')\n-> "10000000";\n\n_.pad("1", 8, \'0\', \'both\')\n-> "00001000";\n\n_.pad("1", 8, \'bleepblorp\', \'both\')\n-> "bbbb1bbb";\n```\n\n**lpad** _.lpad(str, length, [padStr])\n\nleft-pad a string. Alias for `pad(str, length, padStr, \'left\')`\n\n```javascript\n_.lpad("1", 8, \'0\')\n-> "00000001";\n```\n\n**rpad** _.rpad(str, length, [padStr])\n\nright-pad a string. Alias for `pad(str, length, padStr, \'right\')`\n\n```javascript\n_.rpad("1", 8, \'0\')\n-> "10000000";\n```\n\n**lrpad** _.lrpad(str, length, [padStr])\n\nleft/right-pad a string. Alias for `pad(str, length, padStr, \'both\')`\n\n```javascript\n_.lrpad("1", 8, \'0\')\n-> "00001000";\n```\n\n**center** alias for **lrpad**\n\n**ljust** alias for *rpad*\n\n**rjust** alias for *lpad*\n\n**toNumber**  _.toNumber(string, [decimals])\n\nParse string to number. Returns NaN if string can\'t be parsed to number.\n\n```javascript\n_(\'2.556\').toNumber()\n=> 3\n\n_(\'2.556\').toNumber(1)\n=> 2.6\n```\n\n**strRight**  _.strRight(string, pattern)\n\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strRight(\'_\')\n=> "is_a_test_string";\n```\n\n**strRightBack**  _.strRightBack(string, pattern)\n\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strRightBack(\'_\')\n=> "string";\n```\n\n**strLeft**  _.strLeft(string, pattern)\n\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strLeft(\'_\')\n=> "This";\n```\n\n**strLeftBack**  _.strLeftBack(string, pattern)\n\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\n\n```javascript\n_(\'This_is_a_test_string\').strLeftBack(\'_\')\n=> "This_is_a_test";\n```\n\n**stripTags**\n\nRemoves all html tags from string.\n\n```javascript\n_(\'a <a href="#">link</a>\').stripTags()\n=> \'a link\'\n\n_(\'a <a href="#">link</a><script>alert("hello world!")</script>\').stripTags()\n=> \'a linkalert("hello world!")\'\n```\n\n**toSentence**  _.toSentence(array, [delimiter, lastDelimiter])\n\nJoin an array into a human readable sentence.\n\n```javascript\n_.toSentence([\'jQuery\', \'Mootools\', \'Prototype\'])\n=> \'jQuery, Mootools and Prototype\';\n\n_.toSentence([\'jQuery\', \'Mootools\', \'Prototype\'], \', \', \' unt \')\n=> \'jQuery, Mootools unt Prototype\';\n```\n\n**repeat** _.repeat(string, count, [separator])\n\nRepeats a string count times.\n\n```javascript\n_.repeat("foo", 3)\n=> \'foofoofoo\';\n\n_.repeat("foo", 3, "bar")\n=> \'foobarfoobarfoo\'\n```\n\n**slugify** _.slugify(string)\n\nTransform text into a URL slug. Replaces whitespaces, accentuated, and special characters with a dash.\n\n```javascript\n_.slugify("Un éléphant à l\'orée du bois")\n=> \'un-elephant-a-loree-du-bois\';\n```\n\n***Caution: this function is charset dependent***\n\n## Roadmap ##\n\nAny suggestions or bug reports are welcome. Just email me or more preferably open an issue.\n\n## Changelog ##\n\n### 2.0.0 ###\n\n* Added prune, humanize functions\n* Added _.string (_.str) namespace for Underscore.string library\n* Removed includes function\n\n#### Problems\n\nWe lose two things for `include` and `reverse` methods from `_.string`:\n\n* Calls like `_(\'foobar\').include(\'bar\')` aren\'t available;\n* Chaining isn\'t available too.\n\nBut if you need this functionality you can create aliases for conflict functions which will be convenient for you:\n\n```javascript\n_.mixin({\n    includeString: _.str.include,\n    reverseString: _.str.reverse\n})\n\n// Now wrapper calls and chaining are available.\n_(\'foobar\').chain().reverseString().includeString(\'rab\').value()\n```\n\n#### Standalone Usage\n\nIf you are using Underscore.string without Underscore. You also have `_.string` namespace for it and `_.str` alias\nBut of course you can just reassign `_` variable with `_.string`\n\n```javascript\n_ = _.string\n```\n### 2.2.0 ###\n\n* Capitalize method behavior changed\n* Various perfomance tweaks\n\n### 2.1.1###\n\n* Fixed words method bug\n* Added classify method\n\n### 2.1.0 ###\n\n* AMD support\n* Added toSentence method\n* Added slugify method\n* Lots of speed optimizations\n\n### 2.0.0 ###\n\nFor upgrading to this version you need to mix in Underscore.string library to Underscore object:\n\n```javascript\n_.mixin(_.string.exports());\n```\n\nand all non-conflict Underscore.string functions will be available through Underscore object.\nAlso function `includes` has been removed, you should replace this function by `_.str.include`\nor create alias `_.includes = _.str.include` and all your code will work fine.\n\n### 1.1.6 ###\n\n* Fixed reverse and truncate\n* Added isBlank, stripTags, inlude(alias for includes)\n* Added uglifier compression\n\n### 1.1.5 ###\n\n* Added strRight, strRightBack, strLeft, strLeftBack\n\n### 1.1.4 ###\n\n* Added pad, lpad, rpad, lrpad methods and aliases center, ljust, rjust\n* Integration with Underscore 1.1.6\n\n### 1.1.3 ###\n\n* Added methods: underscored, camelize, dasherize\n* Support newer version of npm\n\n### 1.1.2 ###\n\n* Created functions: lines, chars, words functions\n\n### 1.0.2 ###\n\n* Created integration test suite with underscore.js 1.1.4 (now it\'s absolutely compatible)\n* Removed \'reverse\' function, because this function override underscore.js \'reverse\'\n\n## Contribute ##\n\n* Fork & pull request. Don\'t forget about tests.\n* If you planning add some feature please create issue before.\n\nOtherwise changes will be rejected.\n\n## Contributors list ##\n\n*  Esa-Matti Suuronen <esa-matti@suuronen.org> (<http://esa-matti.suuronen.org/>),\n*  Edward Tsech <edtsech@gmail.com>,\n*  Sasha Koss <kossnocorp@gmail.com> (<http://koss.nocorp.me/>),\n*  Vladimir Dronnikov <dronnikov@gmail.com>,\n*  Pete Kruckenberg (<https://github.com/kruckenb>),\n*  Paul Chavard <paul@chavard.net> (<http://tchak.net>),\n*  Ed Finkler <coj@funkatron.com> (<http://funkatron.com>)\n*  Pavel Pravosud <rwz@duckroll.ru>\n*  Anton Lindqvist <anton@qvister.se> (<http://qvister.se>)\n\n## Licence ##\n\nThe MIT License\n\nCopyright (c) 2011 Esa-Matti Suuronen esa-matti@suuronen.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n',
2660 silly resolved     readmeFilename: 'README.markdown',
2660 silly resolved     _id: 'underscore.string@2.2.1',
2660 silly resolved     _from: 'underscore.string@2.2.1',
2660 silly resolved     scripts: {} } ]
2661 info install underscore.string@2.2.1 into /usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util
2662 info installOne underscore.string@2.2.1
2663 silly resolved [ { name: 'coffee-script',
2663 silly resolved     description: 'Unfancy JavaScript',
2663 silly resolved     keywords: [ 'javascript', 'language', 'coffeescript', 'compiler' ],
2663 silly resolved     author: { name: 'Jeremy Ashkenas' },
2663 silly resolved     version: '1.3.3',
2663 silly resolved     licenses: [ [Object] ],
2663 silly resolved     engines: { node: '>=0.4.0' },
2663 silly resolved     directories: { lib: './lib/coffee-script' },
2663 silly resolved     main: './lib/coffee-script/coffee-script',
2663 silly resolved     bin: { coffee: './bin/coffee', cake: './bin/cake' },
2663 silly resolved     homepage: 'http://coffeescript.org',
2663 silly resolved     bugs: { url: 'https://github.com/jashkenas/coffee-script/issues' },
2663 silly resolved     repository:
2663 silly resolved      { type: 'git',
2663 silly resolved        url: 'git://github.com/jashkenas/coffee-script.git' },
2663 silly resolved     devDependencies: { 'uglify-js': '>=1.0.0', jison: '>=0.2.0' },
2663 silly resolved     readme: '\n            {\n         }   }   {\n        {   {  }  }\n         }   }{  {\n        {  }{  }  }                    _____       __  __\n       ( }{ }{  { )                   / ____|     / _|/ _|\n     .- { { }  { }} -.               | |     ___ | |_| |_ ___  ___\n    (  ( } { } { } }  )              | |    / _ \\|  _|  _/ _ \\/ _ \\\n    |`-..________ ..-\'|              | |___| (_) | | | ||  __/  __/\n    |                 |               \\_____\\___/|_| |_| \\___|\\___|\n    |                 ;--.\n    |                (__  \\            _____           _       _\n    |                 | )  )          / ____|         (_)     | |\n    |                 |/  /          | (___   ___ _ __ _ _ __ | |_\n    |                 (  /            \\___ \\ / __| \'__| | \'_ \\| __|\n    |                 |/              ____) | (__| |  | | |_) | |_\n    |                 |              |_____/ \\___|_|  |_| .__/ \\__|\n     `-.._________..-\'                                  | |\n                                                        |_|\n\n\n  CoffeeScript is a little language that compiles into JavaScript.\n\n  Install Node.js, and then the CoffeeScript compiler:\n  sudo bin/cake install\n\n  Or, if you have the Node Package Manager installed:\n  npm install -g coffee-script\n  (Leave off the -g if you don\'t wish to install globally.)\n\n  Execute a script:\n  coffee /path/to/script.coffee\n\n  Compile a script:\n  coffee -c /path/to/script.coffee\n\n  For documentation, usage, and examples, see:\n  http://coffeescript.org/\n\n  To suggest a feature, report a bug, or general discussion:\n  http://github.com/jashkenas/coffee-script/issues/\n\n  If you\'d like to chat, drop by #coffeescript on Freenode IRC,\n  or on webchat.freenode.net.\n\n  The source repository:\n  git://github.com/jashkenas/coffee-script.git\n\n  All contributors are listed here:\n  http://github.com/jashkenas/coffee-script/contributors\n',
2663 silly resolved     readmeFilename: 'README',
2663 silly resolved     _id: 'coffee-script@1.3.3',
2663 silly resolved     _from: 'coffee-script@1.3.3',
2663 silly resolved     scripts: {} } ]
2664 info install coffee-script@1.3.3 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt
2665 info installOne coffee-script@1.3.3
2666 silly resolved [ { name: 'coffee-script',
2666 silly resolved     description: 'Unfancy JavaScript',
2666 silly resolved     keywords: [ 'javascript', 'language', 'coffeescript', 'compiler' ],
2666 silly resolved     author: { name: 'Jeremy Ashkenas' },
2666 silly resolved     version: '1.3.3',
2666 silly resolved     licenses: [ [Object] ],
2666 silly resolved     engines: { node: '>=0.4.0' },
2666 silly resolved     directories: { lib: './lib/coffee-script' },
2666 silly resolved     main: './lib/coffee-script/coffee-script',
2666 silly resolved     bin: { coffee: './bin/coffee', cake: './bin/cake' },
2666 silly resolved     homepage: 'http://coffeescript.org',
2666 silly resolved     bugs: { url: 'https://github.com/jashkenas/coffee-script/issues' },
2666 silly resolved     repository:
2666 silly resolved      { type: 'git',
2666 silly resolved        url: 'git://github.com/jashkenas/coffee-script.git' },
2666 silly resolved     devDependencies: { 'uglify-js': '>=1.0.0', jison: '>=0.2.0' },
2666 silly resolved     readme: '\n            {\n         }   }   {\n        {   {  }  }\n         }   }{  {\n        {  }{  }  }                    _____       __  __\n       ( }{ }{  { )                   / ____|     / _|/ _|\n     .- { { }  { }} -.               | |     ___ | |_| |_ ___  ___\n    (  ( } { } { } }  )              | |    / _ \\|  _|  _/ _ \\/ _ \\\n    |`-..________ ..-\'|              | |___| (_) | | | ||  __/  __/\n    |                 |               \\_____\\___/|_| |_| \\___|\\___|\n    |                 ;--.\n    |                (__  \\            _____           _       _\n    |                 | )  )          / ____|         (_)     | |\n    |                 |/  /          | (___   ___ _ __ _ _ __ | |_\n    |                 (  /            \\___ \\ / __| \'__| | \'_ \\| __|\n    |                 |/              ____) | (__| |  | | |_) | |_\n    |                 |              |_____/ \\___|_|  |_| .__/ \\__|\n     `-.._________..-\'                                  | |\n                                                        |_|\n\n\n  CoffeeScript is a little language that compiles into JavaScript.\n\n  Install Node.js, and then the CoffeeScript compiler:\n  sudo bin/cake install\n\n  Or, if you have the Node Package Manager installed:\n  npm install -g coffee-script\n  (Leave off the -g if you don\'t wish to install globally.)\n\n  Execute a script:\n  coffee /path/to/script.coffee\n\n  Compile a script:\n  coffee -c /path/to/script.coffee\n\n  For documentation, usage, and examples, see:\n  http://coffeescript.org/\n\n  To suggest a feature, report a bug, or general discussion:\n  http://github.com/jashkenas/coffee-script/issues/\n\n  If you\'d like to chat, drop by #coffeescript on Freenode IRC,\n  or on webchat.freenode.net.\n\n  The source repository:\n  git://github.com/jashkenas/coffee-script.git\n\n  All contributors are listed here:\n  http://github.com/jashkenas/coffee-script/contributors\n',
2666 silly resolved     readmeFilename: 'README',
2666 silly resolved     _id: 'coffee-script@1.3.3',
2666 silly resolved     _from: 'coffee-script@1.3.3',
2666 silly resolved     scripts: {} } ]
2667 info install coffee-script@1.3.3 into /usr/local/lib/node_modules/grunt
2668 info installOne coffee-script@1.3.3
2669 silly resolved [ { name: 'lodash',
2669 silly resolved     version: '0.9.2',
2669 silly resolved     description: 'A utility library delivering consistency, customization, performance, and extras.',
2669 silly resolved     homepage: 'http://lodash.com',
2669 silly resolved     license: 'MIT',
2669 silly resolved     main: './lodash.js',
2669 silly resolved     keywords:
2669 silly resolved      [ 'browser',
2669 silly resolved        'client',
2669 silly resolved        'functional',
2669 silly resolved        'performance',
2669 silly resolved        'server',
2669 silly resolved        'speed',
2669 silly resolved        'util' ],
2669 silly resolved     author:
2669 silly resolved      { name: 'John-David Dalton',
2669 silly resolved        email: 'john.david.dalton@gmail.com',
2669 silly resolved        url: 'http://allyoucanleet.com/' },
2669 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
2669 silly resolved     bugs: { url: 'https://github.com/lodash/lodash/issues' },
2669 silly resolved     repository: { type: 'git', url: 'https://github.com/lodash/lodash.git' },
2669 silly resolved     engines: [ 'node', 'rhino' ],
2669 silly resolved     jam: { main: './lodash.js' },
2669 silly resolved     readme: '# Lo-Dash v0.9.2\n\nA utility library delivering consistency, [customization](http://lodash.com/custom-builds), [performance](http://lodash.com/benchmarks), & [extras](http://lodash.com/#features).\n\n## Download\n\n * [Development build](https://raw.github.com/lodash/lodash/0.9.2/lodash.js)\n * [Production build](https://raw.github.com/lodash/lodash/0.9.2/lodash.min.js)\n * [Underscore build](https://raw.github.com/lodash/lodash/0.9.2/lodash.underscore.min.js) tailored for projects already using Underscore\n * CDN copies of ≤ v0.9.2’s [Production](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.min.js), [Underscore](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.underscore.min.js), and [Development](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.js) builds are available on [cdnjs](http://cdnjs.com/) thanks to [CloudFlare](http://www.cloudflare.com/)\n * For optimal file size, [create a custom build](http://lodash.com/custom-builds) with only the features you need\n\n## Dive in\n\nWe’ve got [API docs](http://lodash.com/docs), [benchmarks](http://lodash.com/benchmarks), and [unit tests](http://lodash.com/tests).\n\nCreate your own benchmarks at [jsPerf](http://jsperf.com), or [search](http://jsperf.com/search?q=lodash) for existing ones.\n\nFor a list of upcoming features, check out our [roadmap](https://github.com/lodash/lodash/wiki/Roadmap).\n\n## Screencasts\n\nFor more information check out these screencasts over Lo-Dash:\n\n * [Introducing Lo-Dash](https://vimeo.com/44154599)\n * [Lo-Dash optimizations and custom builds](https://vimeo.com/44154601)\n * [Lo-Dash’s origin and why it’s a better utility belt](https://vimeo.com/44154600)\n * [Unit testing in Lo-Dash](https://vimeo.com/45865290)\n * [Lo-Dash’s approach to native method use](https://vimeo.com/48576012)\n\n## Features\n\n * AMD loader support ([RequireJS](http://requirejs.org/), [curl.js](https://github.com/cujojs/curl), etc.)\n * [_.clone](http://lodash.com/docs#clone) supports *“deep”* cloning\n * [_.contains](http://lodash.com/docs#contains) accepts a `fromIndex` argument\n * [_.forEach](http://lodash.com/docs#forEach) is chainable and supports exiting iteration early\n * [_.forIn](http://lodash.com/docs#forIn) for iterating over an object’s own and inherited properties\n * [_.forOwn](http://lodash.com/docs#forOwn) for iterating over an object’s own properties\n * [_.isPlainObject](http://lodash.com/docs#isPlainObject) checks if values are created by the `Object` constructor\n * [_.lateBind](http://lodash.com/docs#lateBind) for late binding\n * [_.merge](http://lodash.com/docs#merge) for a *“deep”* [_.extend](http://lodash.com/docs#extend)\n * [_.partial](http://lodash.com/docs#partial) for partial application without `this` binding\n * [_.pick](http://lodash.com/docs#pick) and [_.omit](http://lodash.com/docs#omit) accepts `callback` and `thisArg` arguments\n * [_.template](http://lodash.com/docs#template) supports [ES6 delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6) and utilizes [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl) for easier debugging\n * [_.contains](http://lodash.com/docs#contains), [_.size](http://lodash.com/docs#size), [_.toArray](http://lodash.com/docs#toArray),\n   [and more…](http://lodash.com/docs "_.countBy, _.every, _.filter, _.find, _.forEach, _.groupBy, _.invoke, _.map, _.max, _.min, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.some, _.sortBy, _.where") accept strings\n\n## Support\n\nLo-Dash has been tested in at least Chrome 5~23, Firefox 1~16, IE 6-10, Opera 9.25-12, Safari 3-6, Node.js 0.4.8-0.8.14, Narwhal 0.3.2, RingoJS 0.8, and Rhino 1.7RC5.\n\n## Installation and usage\n\nIn browsers:\n\n```html\n<script src="lodash.js"></script>\n```\n\nUsing [npm](http://npmjs.org/):\n\n```bash\nnpm install lodash\n\nnpm install -g lodash\nnpm link lodash\n```\n\nIn [Node.js](http://nodejs.org/) and [RingoJS v0.8.0+](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\');\n```\n\n**Note:** If Lo-Dash is installed globally, [run `npm link lodash`](http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/) in your project’s root directory before requiring it.\n\nIn [RingoJS v0.7.0-](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\')._;\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload(\'lodash.js\');\n```\n\nIn an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire({\n  \'paths\': {\n    \'underscore\': \'path/to/lodash\'\n  }\n},\n[\'underscore\'], function(_) {\n  console.log(_.VERSION);\n});\n```\n\n## Resolved Underscore.js issues\n\n * Allow iteration of objects with a `length` property [[#799](https://github.com/documentcloud/underscore/pull/799), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L545-551)]\n * Fix cross-browser object iteration bugs [[#60](https://github.com/documentcloud/underscore/issues/60), [#376](https://github.com/documentcloud/underscore/issues/376), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L558-582)]\n * Methods should work on pages with incorrectly shimmed native methods [[#7](https://github.com/documentcloud/underscore/issues/7), [#742](https://github.com/documentcloud/underscore/issues/742), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L140-146)]\n * `_.isEmpty` should support jQuery/MooTools DOM query collections [[#690](https://github.com/documentcloud/underscore/pull/690), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L747-752)]\n * `_.isObject` should avoid V8 bug [#2291](http://code.google.com/p/8/issues/detail?id=2291) [[#605](https://github.com/documentcloud/underscore/issues/605), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L828-840)]\n * `_.keys` should work with `arguments` objects cross-browser [[#396](https://github.com/documentcloud/underscore/issues/396), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L921-923)]\n * `_.range` should coerce arguments to numbers [[#634](https://github.com/documentcloud/underscore/issues/634), [#683](https://github.com/documentcloud/underscore/issues/683), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L1337-1340)]\n\n## Release Notes\n\n### <sup>v0.9.2</sup>\n\n * Added `fromIndex` argument to `_.contains`\n * Added `moduleId` build option\n * Added Closure Compiler *“simple”* optimizations to the build process\n * Added support for strings in `_.max` and `_.min`\n * Added support for ES6 template delimiters to `_.template`\n * Ensured re-minification of Lo-Dash by third parties avoids Closure Compiler bugs\n * Optimized `_.every`, `_.find`, `_.some`, and `_.uniq`\n\nThe full changelog is available [here](https://github.com/lodash/lodash/wiki/Changelog).\n\n## BestieJS\n\nLo-Dash is part of the [BestieJS](https://github.com/bestiejs)  *“Best in Class”* module collection. This means we promote solid browser/environment support, ES5 precedents, unit testing, and plenty of documentation.\n\n## Author\n\n| [![twitter/jdalton](http://gravatar.com/avatar/299a3d891ff1920b69c364d061007043?s=70)](http://twitter.com/jdalton "Follow @jdalton on Twitter") |\n|---|\n| [John-David Dalton](http://allyoucanleet.com/) |\n\n## Contributors\n\n| [![twitter/blainebublitz](http://gravatar.com/avatar/ac1c67fd906c9fecd823ce302283b4c1?s=70)](http://twitter.com/blainebublitz "Follow @BlaineBublitz on Twitter") | [![twitter/kitcambridge](http://gravatar.com/avatar/6662a1d02f351b5ef2f8b4d815804661?s=70)](https://twitter.com/kitcambridge "Follow @kitcambridge on Twitter") | [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias "Follow @mathias on Twitter") |\n|---|---|---|\n| [Blaine Bublitz](http://iceddev.com/) | [Kit Cambridge](http://kitcambridge.github.io/) | [Mathias Bynens](http://mathiasbynens.be/) |\n',
2669 silly resolved     readmeFilename: 'README.md',
2669 silly resolved     _id: 'lodash@0.9.2',
2669 silly resolved     _from: 'lodash@0.9.2',
2669 silly resolved     scripts: {} } ]
2670 info install lodash@0.9.2 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt
2671 info installOne lodash@0.9.2
2672 silly resolved [ { name: 'lodash',
2672 silly resolved     version: '0.9.2',
2672 silly resolved     description: 'A utility library delivering consistency, customization, performance, and extras.',
2672 silly resolved     homepage: 'http://lodash.com',
2672 silly resolved     license: 'MIT',
2672 silly resolved     main: './lodash.js',
2672 silly resolved     keywords:
2672 silly resolved      [ 'browser',
2672 silly resolved        'client',
2672 silly resolved        'functional',
2672 silly resolved        'performance',
2672 silly resolved        'server',
2672 silly resolved        'speed',
2672 silly resolved        'util' ],
2672 silly resolved     author:
2672 silly resolved      { name: 'John-David Dalton',
2672 silly resolved        email: 'john.david.dalton@gmail.com',
2672 silly resolved        url: 'http://allyoucanleet.com/' },
2672 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
2672 silly resolved     bugs: { url: 'https://github.com/lodash/lodash/issues' },
2672 silly resolved     repository: { type: 'git', url: 'https://github.com/lodash/lodash.git' },
2672 silly resolved     engines: [ 'node', 'rhino' ],
2672 silly resolved     jam: { main: './lodash.js' },
2672 silly resolved     readme: '# Lo-Dash v0.9.2\n\nA utility library delivering consistency, [customization](http://lodash.com/custom-builds), [performance](http://lodash.com/benchmarks), & [extras](http://lodash.com/#features).\n\n## Download\n\n * [Development build](https://raw.github.com/lodash/lodash/0.9.2/lodash.js)\n * [Production build](https://raw.github.com/lodash/lodash/0.9.2/lodash.min.js)\n * [Underscore build](https://raw.github.com/lodash/lodash/0.9.2/lodash.underscore.min.js) tailored for projects already using Underscore\n * CDN copies of ≤ v0.9.2’s [Production](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.min.js), [Underscore](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.underscore.min.js), and [Development](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.js) builds are available on [cdnjs](http://cdnjs.com/) thanks to [CloudFlare](http://www.cloudflare.com/)\n * For optimal file size, [create a custom build](http://lodash.com/custom-builds) with only the features you need\n\n## Dive in\n\nWe’ve got [API docs](http://lodash.com/docs), [benchmarks](http://lodash.com/benchmarks), and [unit tests](http://lodash.com/tests).\n\nCreate your own benchmarks at [jsPerf](http://jsperf.com), or [search](http://jsperf.com/search?q=lodash) for existing ones.\n\nFor a list of upcoming features, check out our [roadmap](https://github.com/lodash/lodash/wiki/Roadmap).\n\n## Screencasts\n\nFor more information check out these screencasts over Lo-Dash:\n\n * [Introducing Lo-Dash](https://vimeo.com/44154599)\n * [Lo-Dash optimizations and custom builds](https://vimeo.com/44154601)\n * [Lo-Dash’s origin and why it’s a better utility belt](https://vimeo.com/44154600)\n * [Unit testing in Lo-Dash](https://vimeo.com/45865290)\n * [Lo-Dash’s approach to native method use](https://vimeo.com/48576012)\n\n## Features\n\n * AMD loader support ([RequireJS](http://requirejs.org/), [curl.js](https://github.com/cujojs/curl), etc.)\n * [_.clone](http://lodash.com/docs#clone) supports *“deep”* cloning\n * [_.contains](http://lodash.com/docs#contains) accepts a `fromIndex` argument\n * [_.forEach](http://lodash.com/docs#forEach) is chainable and supports exiting iteration early\n * [_.forIn](http://lodash.com/docs#forIn) for iterating over an object’s own and inherited properties\n * [_.forOwn](http://lodash.com/docs#forOwn) for iterating over an object’s own properties\n * [_.isPlainObject](http://lodash.com/docs#isPlainObject) checks if values are created by the `Object` constructor\n * [_.lateBind](http://lodash.com/docs#lateBind) for late binding\n * [_.merge](http://lodash.com/docs#merge) for a *“deep”* [_.extend](http://lodash.com/docs#extend)\n * [_.partial](http://lodash.com/docs#partial) for partial application without `this` binding\n * [_.pick](http://lodash.com/docs#pick) and [_.omit](http://lodash.com/docs#omit) accepts `callback` and `thisArg` arguments\n * [_.template](http://lodash.com/docs#template) supports [ES6 delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6) and utilizes [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl) for easier debugging\n * [_.contains](http://lodash.com/docs#contains), [_.size](http://lodash.com/docs#size), [_.toArray](http://lodash.com/docs#toArray),\n   [and more…](http://lodash.com/docs "_.countBy, _.every, _.filter, _.find, _.forEach, _.groupBy, _.invoke, _.map, _.max, _.min, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.some, _.sortBy, _.where") accept strings\n\n## Support\n\nLo-Dash has been tested in at least Chrome 5~23, Firefox 1~16, IE 6-10, Opera 9.25-12, Safari 3-6, Node.js 0.4.8-0.8.14, Narwhal 0.3.2, RingoJS 0.8, and Rhino 1.7RC5.\n\n## Installation and usage\n\nIn browsers:\n\n```html\n<script src="lodash.js"></script>\n```\n\nUsing [npm](http://npmjs.org/):\n\n```bash\nnpm install lodash\n\nnpm install -g lodash\nnpm link lodash\n```\n\nIn [Node.js](http://nodejs.org/) and [RingoJS v0.8.0+](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\');\n```\n\n**Note:** If Lo-Dash is installed globally, [run `npm link lodash`](http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/) in your project’s root directory before requiring it.\n\nIn [RingoJS v0.7.0-](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\')._;\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload(\'lodash.js\');\n```\n\nIn an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire({\n  \'paths\': {\n    \'underscore\': \'path/to/lodash\'\n  }\n},\n[\'underscore\'], function(_) {\n  console.log(_.VERSION);\n});\n```\n\n## Resolved Underscore.js issues\n\n * Allow iteration of objects with a `length` property [[#799](https://github.com/documentcloud/underscore/pull/799), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L545-551)]\n * Fix cross-browser object iteration bugs [[#60](https://github.com/documentcloud/underscore/issues/60), [#376](https://github.com/documentcloud/underscore/issues/376), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L558-582)]\n * Methods should work on pages with incorrectly shimmed native methods [[#7](https://github.com/documentcloud/underscore/issues/7), [#742](https://github.com/documentcloud/underscore/issues/742), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L140-146)]\n * `_.isEmpty` should support jQuery/MooTools DOM query collections [[#690](https://github.com/documentcloud/underscore/pull/690), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L747-752)]\n * `_.isObject` should avoid V8 bug [#2291](http://code.google.com/p/8/issues/detail?id=2291) [[#605](https://github.com/documentcloud/underscore/issues/605), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L828-840)]\n * `_.keys` should work with `arguments` objects cross-browser [[#396](https://github.com/documentcloud/underscore/issues/396), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L921-923)]\n * `_.range` should coerce arguments to numbers [[#634](https://github.com/documentcloud/underscore/issues/634), [#683](https://github.com/documentcloud/underscore/issues/683), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L1337-1340)]\n\n## Release Notes\n\n### <sup>v0.9.2</sup>\n\n * Added `fromIndex` argument to `_.contains`\n * Added `moduleId` build option\n * Added Closure Compiler *“simple”* optimizations to the build process\n * Added support for strings in `_.max` and `_.min`\n * Added support for ES6 template delimiters to `_.template`\n * Ensured re-minification of Lo-Dash by third parties avoids Closure Compiler bugs\n * Optimized `_.every`, `_.find`, `_.some`, and `_.uniq`\n\nThe full changelog is available [here](https://github.com/lodash/lodash/wiki/Changelog).\n\n## BestieJS\n\nLo-Dash is part of the [BestieJS](https://github.com/bestiejs)  *“Best in Class”* module collection. This means we promote solid browser/environment support, ES5 precedents, unit testing, and plenty of documentation.\n\n## Author\n\n| [![twitter/jdalton](http://gravatar.com/avatar/299a3d891ff1920b69c364d061007043?s=70)](http://twitter.com/jdalton "Follow @jdalton on Twitter") |\n|---|\n| [John-David Dalton](http://allyoucanleet.com/) |\n\n## Contributors\n\n| [![twitter/blainebublitz](http://gravatar.com/avatar/ac1c67fd906c9fecd823ce302283b4c1?s=70)](http://twitter.com/blainebublitz "Follow @BlaineBublitz on Twitter") | [![twitter/kitcambridge](http://gravatar.com/avatar/6662a1d02f351b5ef2f8b4d815804661?s=70)](https://twitter.com/kitcambridge "Follow @kitcambridge on Twitter") | [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias "Follow @mathias on Twitter") |\n|---|---|---|\n| [Blaine Bublitz](http://iceddev.com/) | [Kit Cambridge](http://kitcambridge.github.io/) | [Mathias Bynens](http://mathiasbynens.be/) |\n',
2672 silly resolved     readmeFilename: 'README.md',
2672 silly resolved     _id: 'lodash@0.9.2',
2672 silly resolved     _from: 'lodash@0.9.2',
2672 silly resolved     scripts: {} } ]
2673 info install lodash@0.9.2 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util
2674 info installOne lodash@0.9.2
2675 silly resolved [ { name: 'lodash',
2675 silly resolved     version: '0.9.2',
2675 silly resolved     description: 'A utility library delivering consistency, customization, performance, and extras.',
2675 silly resolved     homepage: 'http://lodash.com',
2675 silly resolved     license: 'MIT',
2675 silly resolved     main: './lodash.js',
2675 silly resolved     keywords:
2675 silly resolved      [ 'browser',
2675 silly resolved        'client',
2675 silly resolved        'functional',
2675 silly resolved        'performance',
2675 silly resolved        'server',
2675 silly resolved        'speed',
2675 silly resolved        'util' ],
2675 silly resolved     author:
2675 silly resolved      { name: 'John-David Dalton',
2675 silly resolved        email: 'john.david.dalton@gmail.com',
2675 silly resolved        url: 'http://allyoucanleet.com/' },
2675 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
2675 silly resolved     bugs: { url: 'https://github.com/lodash/lodash/issues' },
2675 silly resolved     repository: { type: 'git', url: 'https://github.com/lodash/lodash.git' },
2675 silly resolved     engines: [ 'node', 'rhino' ],
2675 silly resolved     jam: { main: './lodash.js' },
2675 silly resolved     readme: '# Lo-Dash v0.9.2\n\nA utility library delivering consistency, [customization](http://lodash.com/custom-builds), [performance](http://lodash.com/benchmarks), & [extras](http://lodash.com/#features).\n\n## Download\n\n * [Development build](https://raw.github.com/lodash/lodash/0.9.2/lodash.js)\n * [Production build](https://raw.github.com/lodash/lodash/0.9.2/lodash.min.js)\n * [Underscore build](https://raw.github.com/lodash/lodash/0.9.2/lodash.underscore.min.js) tailored for projects already using Underscore\n * CDN copies of ≤ v0.9.2’s [Production](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.min.js), [Underscore](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.underscore.min.js), and [Development](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.js) builds are available on [cdnjs](http://cdnjs.com/) thanks to [CloudFlare](http://www.cloudflare.com/)\n * For optimal file size, [create a custom build](http://lodash.com/custom-builds) with only the features you need\n\n## Dive in\n\nWe’ve got [API docs](http://lodash.com/docs), [benchmarks](http://lodash.com/benchmarks), and [unit tests](http://lodash.com/tests).\n\nCreate your own benchmarks at [jsPerf](http://jsperf.com), or [search](http://jsperf.com/search?q=lodash) for existing ones.\n\nFor a list of upcoming features, check out our [roadmap](https://github.com/lodash/lodash/wiki/Roadmap).\n\n## Screencasts\n\nFor more information check out these screencasts over Lo-Dash:\n\n * [Introducing Lo-Dash](https://vimeo.com/44154599)\n * [Lo-Dash optimizations and custom builds](https://vimeo.com/44154601)\n * [Lo-Dash’s origin and why it’s a better utility belt](https://vimeo.com/44154600)\n * [Unit testing in Lo-Dash](https://vimeo.com/45865290)\n * [Lo-Dash’s approach to native method use](https://vimeo.com/48576012)\n\n## Features\n\n * AMD loader support ([RequireJS](http://requirejs.org/), [curl.js](https://github.com/cujojs/curl), etc.)\n * [_.clone](http://lodash.com/docs#clone) supports *“deep”* cloning\n * [_.contains](http://lodash.com/docs#contains) accepts a `fromIndex` argument\n * [_.forEach](http://lodash.com/docs#forEach) is chainable and supports exiting iteration early\n * [_.forIn](http://lodash.com/docs#forIn) for iterating over an object’s own and inherited properties\n * [_.forOwn](http://lodash.com/docs#forOwn) for iterating over an object’s own properties\n * [_.isPlainObject](http://lodash.com/docs#isPlainObject) checks if values are created by the `Object` constructor\n * [_.lateBind](http://lodash.com/docs#lateBind) for late binding\n * [_.merge](http://lodash.com/docs#merge) for a *“deep”* [_.extend](http://lodash.com/docs#extend)\n * [_.partial](http://lodash.com/docs#partial) for partial application without `this` binding\n * [_.pick](http://lodash.com/docs#pick) and [_.omit](http://lodash.com/docs#omit) accepts `callback` and `thisArg` arguments\n * [_.template](http://lodash.com/docs#template) supports [ES6 delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6) and utilizes [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl) for easier debugging\n * [_.contains](http://lodash.com/docs#contains), [_.size](http://lodash.com/docs#size), [_.toArray](http://lodash.com/docs#toArray),\n   [and more…](http://lodash.com/docs "_.countBy, _.every, _.filter, _.find, _.forEach, _.groupBy, _.invoke, _.map, _.max, _.min, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.some, _.sortBy, _.where") accept strings\n\n## Support\n\nLo-Dash has been tested in at least Chrome 5~23, Firefox 1~16, IE 6-10, Opera 9.25-12, Safari 3-6, Node.js 0.4.8-0.8.14, Narwhal 0.3.2, RingoJS 0.8, and Rhino 1.7RC5.\n\n## Installation and usage\n\nIn browsers:\n\n```html\n<script src="lodash.js"></script>\n```\n\nUsing [npm](http://npmjs.org/):\n\n```bash\nnpm install lodash\n\nnpm install -g lodash\nnpm link lodash\n```\n\nIn [Node.js](http://nodejs.org/) and [RingoJS v0.8.0+](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\');\n```\n\n**Note:** If Lo-Dash is installed globally, [run `npm link lodash`](http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/) in your project’s root directory before requiring it.\n\nIn [RingoJS v0.7.0-](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\')._;\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload(\'lodash.js\');\n```\n\nIn an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire({\n  \'paths\': {\n    \'underscore\': \'path/to/lodash\'\n  }\n},\n[\'underscore\'], function(_) {\n  console.log(_.VERSION);\n});\n```\n\n## Resolved Underscore.js issues\n\n * Allow iteration of objects with a `length` property [[#799](https://github.com/documentcloud/underscore/pull/799), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L545-551)]\n * Fix cross-browser object iteration bugs [[#60](https://github.com/documentcloud/underscore/issues/60), [#376](https://github.com/documentcloud/underscore/issues/376), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L558-582)]\n * Methods should work on pages with incorrectly shimmed native methods [[#7](https://github.com/documentcloud/underscore/issues/7), [#742](https://github.com/documentcloud/underscore/issues/742), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L140-146)]\n * `_.isEmpty` should support jQuery/MooTools DOM query collections [[#690](https://github.com/documentcloud/underscore/pull/690), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L747-752)]\n * `_.isObject` should avoid V8 bug [#2291](http://code.google.com/p/8/issues/detail?id=2291) [[#605](https://github.com/documentcloud/underscore/issues/605), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L828-840)]\n * `_.keys` should work with `arguments` objects cross-browser [[#396](https://github.com/documentcloud/underscore/issues/396), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L921-923)]\n * `_.range` should coerce arguments to numbers [[#634](https://github.com/documentcloud/underscore/issues/634), [#683](https://github.com/documentcloud/underscore/issues/683), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L1337-1340)]\n\n## Release Notes\n\n### <sup>v0.9.2</sup>\n\n * Added `fromIndex` argument to `_.contains`\n * Added `moduleId` build option\n * Added Closure Compiler *“simple”* optimizations to the build process\n * Added support for strings in `_.max` and `_.min`\n * Added support for ES6 template delimiters to `_.template`\n * Ensured re-minification of Lo-Dash by third parties avoids Closure Compiler bugs\n * Optimized `_.every`, `_.find`, `_.some`, and `_.uniq`\n\nThe full changelog is available [here](https://github.com/lodash/lodash/wiki/Changelog).\n\n## BestieJS\n\nLo-Dash is part of the [BestieJS](https://github.com/bestiejs)  *“Best in Class”* module collection. This means we promote solid browser/environment support, ES5 precedents, unit testing, and plenty of documentation.\n\n## Author\n\n| [![twitter/jdalton](http://gravatar.com/avatar/299a3d891ff1920b69c364d061007043?s=70)](http://twitter.com/jdalton "Follow @jdalton on Twitter") |\n|---|\n| [John-David Dalton](http://allyoucanleet.com/) |\n\n## Contributors\n\n| [![twitter/blainebublitz](http://gravatar.com/avatar/ac1c67fd906c9fecd823ce302283b4c1?s=70)](http://twitter.com/blainebublitz "Follow @BlaineBublitz on Twitter") | [![twitter/kitcambridge](http://gravatar.com/avatar/6662a1d02f351b5ef2f8b4d815804661?s=70)](https://twitter.com/kitcambridge "Follow @kitcambridge on Twitter") | [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias "Follow @mathias on Twitter") |\n|---|---|---|\n| [Blaine Bublitz](http://iceddev.com/) | [Kit Cambridge](http://kitcambridge.github.io/) | [Mathias Bynens](http://mathiasbynens.be/) |\n',
2675 silly resolved     readmeFilename: 'README.md',
2675 silly resolved     _id: 'lodash@0.9.2',
2675 silly resolved     _from: 'lodash@0.9.2',
2675 silly resolved     scripts: {} } ]
2676 info install lodash@0.9.2 into /usr/local/lib/node_modules/grunt
2677 info installOne lodash@0.9.2
2678 silly resolved [ { name: 'lodash',
2678 silly resolved     version: '0.9.2',
2678 silly resolved     description: 'A utility library delivering consistency, customization, performance, and extras.',
2678 silly resolved     homepage: 'http://lodash.com',
2678 silly resolved     license: 'MIT',
2678 silly resolved     main: './lodash.js',
2678 silly resolved     keywords:
2678 silly resolved      [ 'browser',
2678 silly resolved        'client',
2678 silly resolved        'functional',
2678 silly resolved        'performance',
2678 silly resolved        'server',
2678 silly resolved        'speed',
2678 silly resolved        'util' ],
2678 silly resolved     author:
2678 silly resolved      { name: 'John-David Dalton',
2678 silly resolved        email: 'john.david.dalton@gmail.com',
2678 silly resolved        url: 'http://allyoucanleet.com/' },
2678 silly resolved     contributors: [ [Object], [Object], [Object], [Object] ],
2678 silly resolved     bugs: { url: 'https://github.com/lodash/lodash/issues' },
2678 silly resolved     repository: { type: 'git', url: 'https://github.com/lodash/lodash.git' },
2678 silly resolved     engines: [ 'node', 'rhino' ],
2678 silly resolved     jam: { main: './lodash.js' },
2678 silly resolved     readme: '# Lo-Dash v0.9.2\n\nA utility library delivering consistency, [customization](http://lodash.com/custom-builds), [performance](http://lodash.com/benchmarks), & [extras](http://lodash.com/#features).\n\n## Download\n\n * [Development build](https://raw.github.com/lodash/lodash/0.9.2/lodash.js)\n * [Production build](https://raw.github.com/lodash/lodash/0.9.2/lodash.min.js)\n * [Underscore build](https://raw.github.com/lodash/lodash/0.9.2/lodash.underscore.min.js) tailored for projects already using Underscore\n * CDN copies of ≤ v0.9.2’s [Production](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.min.js), [Underscore](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.underscore.min.js), and [Development](http://cdnjs.cloudflare.com/ajax/libs/lodash.js/0.9.2/lodash.js) builds are available on [cdnjs](http://cdnjs.com/) thanks to [CloudFlare](http://www.cloudflare.com/)\n * For optimal file size, [create a custom build](http://lodash.com/custom-builds) with only the features you need\n\n## Dive in\n\nWe’ve got [API docs](http://lodash.com/docs), [benchmarks](http://lodash.com/benchmarks), and [unit tests](http://lodash.com/tests).\n\nCreate your own benchmarks at [jsPerf](http://jsperf.com), or [search](http://jsperf.com/search?q=lodash) for existing ones.\n\nFor a list of upcoming features, check out our [roadmap](https://github.com/lodash/lodash/wiki/Roadmap).\n\n## Screencasts\n\nFor more information check out these screencasts over Lo-Dash:\n\n * [Introducing Lo-Dash](https://vimeo.com/44154599)\n * [Lo-Dash optimizations and custom builds](https://vimeo.com/44154601)\n * [Lo-Dash’s origin and why it’s a better utility belt](https://vimeo.com/44154600)\n * [Unit testing in Lo-Dash](https://vimeo.com/45865290)\n * [Lo-Dash’s approach to native method use](https://vimeo.com/48576012)\n\n## Features\n\n * AMD loader support ([RequireJS](http://requirejs.org/), [curl.js](https://github.com/cujojs/curl), etc.)\n * [_.clone](http://lodash.com/docs#clone) supports *“deep”* cloning\n * [_.contains](http://lodash.com/docs#contains) accepts a `fromIndex` argument\n * [_.forEach](http://lodash.com/docs#forEach) is chainable and supports exiting iteration early\n * [_.forIn](http://lodash.com/docs#forIn) for iterating over an object’s own and inherited properties\n * [_.forOwn](http://lodash.com/docs#forOwn) for iterating over an object’s own properties\n * [_.isPlainObject](http://lodash.com/docs#isPlainObject) checks if values are created by the `Object` constructor\n * [_.lateBind](http://lodash.com/docs#lateBind) for late binding\n * [_.merge](http://lodash.com/docs#merge) for a *“deep”* [_.extend](http://lodash.com/docs#extend)\n * [_.partial](http://lodash.com/docs#partial) for partial application without `this` binding\n * [_.pick](http://lodash.com/docs#pick) and [_.omit](http://lodash.com/docs#omit) accepts `callback` and `thisArg` arguments\n * [_.template](http://lodash.com/docs#template) supports [ES6 delimiters](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-7.8.6) and utilizes [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl) for easier debugging\n * [_.contains](http://lodash.com/docs#contains), [_.size](http://lodash.com/docs#size), [_.toArray](http://lodash.com/docs#toArray),\n   [and more…](http://lodash.com/docs "_.countBy, _.every, _.filter, _.find, _.forEach, _.groupBy, _.invoke, _.map, _.max, _.min, _.pluck, _.reduce, _.reduceRight, _.reject, _.shuffle, _.some, _.sortBy, _.where") accept strings\n\n## Support\n\nLo-Dash has been tested in at least Chrome 5~23, Firefox 1~16, IE 6-10, Opera 9.25-12, Safari 3-6, Node.js 0.4.8-0.8.14, Narwhal 0.3.2, RingoJS 0.8, and Rhino 1.7RC5.\n\n## Installation and usage\n\nIn browsers:\n\n```html\n<script src="lodash.js"></script>\n```\n\nUsing [npm](http://npmjs.org/):\n\n```bash\nnpm install lodash\n\nnpm install -g lodash\nnpm link lodash\n```\n\nIn [Node.js](http://nodejs.org/) and [RingoJS v0.8.0+](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\');\n```\n\n**Note:** If Lo-Dash is installed globally, [run `npm link lodash`](http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/) in your project’s root directory before requiring it.\n\nIn [RingoJS v0.7.0-](http://ringojs.org/):\n\n```js\nvar _ = require(\'lodash\')._;\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload(\'lodash.js\');\n```\n\nIn an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire({\n  \'paths\': {\n    \'underscore\': \'path/to/lodash\'\n  }\n},\n[\'underscore\'], function(_) {\n  console.log(_.VERSION);\n});\n```\n\n## Resolved Underscore.js issues\n\n * Allow iteration of objects with a `length` property [[#799](https://github.com/documentcloud/underscore/pull/799), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L545-551)]\n * Fix cross-browser object iteration bugs [[#60](https://github.com/documentcloud/underscore/issues/60), [#376](https://github.com/documentcloud/underscore/issues/376), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L558-582)]\n * Methods should work on pages with incorrectly shimmed native methods [[#7](https://github.com/documentcloud/underscore/issues/7), [#742](https://github.com/documentcloud/underscore/issues/742), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L140-146)]\n * `_.isEmpty` should support jQuery/MooTools DOM query collections [[#690](https://github.com/documentcloud/underscore/pull/690), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L747-752)]\n * `_.isObject` should avoid V8 bug [#2291](http://code.google.com/p/8/issues/detail?id=2291) [[#605](https://github.com/documentcloud/underscore/issues/605), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L828-840)]\n * `_.keys` should work with `arguments` objects cross-browser [[#396](https://github.com/documentcloud/underscore/issues/396), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L921-923)]\n * `_.range` should coerce arguments to numbers [[#634](https://github.com/documentcloud/underscore/issues/634), [#683](https://github.com/documentcloud/underscore/issues/683), [test](https://github.com/lodash/lodash/blob/0.9.2/test/test.js#L1337-1340)]\n\n## Release Notes\n\n### <sup>v0.9.2</sup>\n\n * Added `fromIndex` argument to `_.contains`\n * Added `moduleId` build option\n * Added Closure Compiler *“simple”* optimizations to the build process\n * Added support for strings in `_.max` and `_.min`\n * Added support for ES6 template delimiters to `_.template`\n * Ensured re-minification of Lo-Dash by third parties avoids Closure Compiler bugs\n * Optimized `_.every`, `_.find`, `_.some`, and `_.uniq`\n\nThe full changelog is available [here](https://github.com/lodash/lodash/wiki/Changelog).\n\n## BestieJS\n\nLo-Dash is part of the [BestieJS](https://github.com/bestiejs)  *“Best in Class”* module collection. This means we promote solid browser/environment support, ES5 precedents, unit testing, and plenty of documentation.\n\n## Author\n\n| [![twitter/jdalton](http://gravatar.com/avatar/299a3d891ff1920b69c364d061007043?s=70)](http://twitter.com/jdalton "Follow @jdalton on Twitter") |\n|---|\n| [John-David Dalton](http://allyoucanleet.com/) |\n\n## Contributors\n\n| [![twitter/blainebublitz](http://gravatar.com/avatar/ac1c67fd906c9fecd823ce302283b4c1?s=70)](http://twitter.com/blainebublitz "Follow @BlaineBublitz on Twitter") | [![twitter/kitcambridge](http://gravatar.com/avatar/6662a1d02f351b5ef2f8b4d815804661?s=70)](https://twitter.com/kitcambridge "Follow @kitcambridge on Twitter") | [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias "Follow @mathias on Twitter") |\n|---|---|---|\n| [Blaine Bublitz](http://iceddev.com/) | [Kit Cambridge](http://kitcambridge.github.io/) | [Mathias Bynens](http://mathiasbynens.be/) |\n',
2678 silly resolved     readmeFilename: 'README.md',
2678 silly resolved     _id: 'lodash@0.9.2',
2678 silly resolved     _from: 'lodash@0.9.2',
2678 silly resolved     scripts: {} } ]
2679 info install lodash@0.9.2 into /usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util
2680 info installOne lodash@0.9.2
2681 silly resolved [ { author:
2681 silly resolved      { name: 'Isaac Z. Schlueter',
2681 silly resolved        email: 'i@izs.me',
2681 silly resolved        url: 'http://blog.izs.me/' },
2681 silly resolved     name: 'glob',
2681 silly resolved     description: 'a little globber',
2681 silly resolved     version: '3.2.11',
2681 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/node-glob.git' },
2681 silly resolved     main: 'glob.js',
2681 silly resolved     engines: { node: '*' },
2681 silly resolved     dependencies: { inherits: '2', minimatch: '0.3' },
2681 silly resolved     devDependencies: { tap: '~0.4.0', mkdirp: '0', rimraf: '1' },
2681 silly resolved     scripts:
2681 silly resolved      { test: 'tap test/*.js',
2681 silly resolved        'test-regen': 'TEST_REGEN=1 node test/00-setup.js' },
2681 silly resolved     license: 'BSD',
2681 silly resolved     readme: '# Glob\n\nMatch files using the patterns the shell uses, like stars and stuff.\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n## Attention: node-glob users!\n\nThe API has changed dramatically between 2.x and 3.x. This library is\nnow 100% JavaScript, and the integer flags have been replaced with an\noptions object.\n\nAlso, there\'s an event emitter class, proper tests, and all the other\nthings you\'ve come to expect from node modules.\n\nAnd best of all, no compilation!\n\n## Usage\n\n```javascript\nvar glob = require("glob")\n\n// options is optional\nglob("**/*.js", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is ["**/*.js"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options])\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require("glob").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt\'s an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n* `statCache` Collection of all the stat results the glob search\n  performed.\n* `cache` Convenience object.  Each field has the following possible\n  values:\n  * `false` - Path does not exist\n  * `true` - Path exists\n  * `1` - Path exists, and is not a directory\n  * `2` - Path exists, and is a directory\n  * `[file, entries, ...]` - Path exists, is a directory, and the\n    array value is the results of `fs.readdir`\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, "/")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `dot` Include `.dot` files in normal matches and `globstar` matches.\n  Note that an explicit dot in a portion of the pattern will always\n  match dot files.\n* `nomount` By default, a pattern starting with a forward-slash will be\n  "mounted" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don\'t sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `cache` See `cache` property above.  Pass in a previously generated\n  cache object to save some fs calls.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See "Race Conditions" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the cache or statCache objects are reused between glob\ncalls.\n\nUsers are thus advised not to use a glob result as a guarantee of\nfilesystem state in the face of rapid changes.  For the vast majority\nof operations, this is never a problem.\n',
2681 silly resolved     readmeFilename: 'README.md',
2681 silly resolved     bugs: { url: 'https://github.com/isaacs/node-glob/issues' },
2681 silly resolved     homepage: 'https://github.com/isaacs/node-glob',
2681 silly resolved     _id: 'glob@3.2.11',
2681 silly resolved     _shasum: '4a973f635b9190f715d10987d5c00fd2815ebe3d',
2681 silly resolved     _from: 'glob@3.2.11',
2681 silly resolved     _resolved: 'http://registry.npm.taobao.org/glob/download/glob-3.2.11.tgz' } ]
2682 info install glob@3.2.11 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/findup-sync
2683 info installOne glob@3.2.11
2684 silly resolved [ { author:
2684 silly resolved      { name: 'Isaac Z. Schlueter',
2684 silly resolved        email: 'i@izs.me',
2684 silly resolved        url: 'http://blog.izs.me/' },
2684 silly resolved     name: 'glob',
2684 silly resolved     description: 'a little globber',
2684 silly resolved     version: '3.2.11',
2684 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/node-glob.git' },
2684 silly resolved     main: 'glob.js',
2684 silly resolved     engines: { node: '*' },
2684 silly resolved     dependencies: { inherits: '2', minimatch: '0.3' },
2684 silly resolved     devDependencies: { tap: '~0.4.0', mkdirp: '0', rimraf: '1' },
2684 silly resolved     scripts:
2684 silly resolved      { test: 'tap test/*.js',
2684 silly resolved        'test-regen': 'TEST_REGEN=1 node test/00-setup.js' },
2684 silly resolved     license: 'BSD',
2684 silly resolved     readme: '# Glob\n\nMatch files using the patterns the shell uses, like stars and stuff.\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n## Attention: node-glob users!\n\nThe API has changed dramatically between 2.x and 3.x. This library is\nnow 100% JavaScript, and the integer flags have been replaced with an\noptions object.\n\nAlso, there\'s an event emitter class, proper tests, and all the other\nthings you\'ve come to expect from node modules.\n\nAnd best of all, no compilation!\n\n## Usage\n\n```javascript\nvar glob = require("glob")\n\n// options is optional\nglob("**/*.js", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is ["**/*.js"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options])\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require("glob").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt\'s an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n* `statCache` Collection of all the stat results the glob search\n  performed.\n* `cache` Convenience object.  Each field has the following possible\n  values:\n  * `false` - Path does not exist\n  * `true` - Path exists\n  * `1` - Path exists, and is not a directory\n  * `2` - Path exists, and is a directory\n  * `[file, entries, ...]` - Path exists, is a directory, and the\n    array value is the results of `fs.readdir`\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, "/")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `dot` Include `.dot` files in normal matches and `globstar` matches.\n  Note that an explicit dot in a portion of the pattern will always\n  match dot files.\n* `nomount` By default, a pattern starting with a forward-slash will be\n  "mounted" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don\'t sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `cache` See `cache` property above.  Pass in a previously generated\n  cache object to save some fs calls.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See "Race Conditions" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the cache or statCache objects are reused between glob\ncalls.\n\nUsers are thus advised not to use a glob result as a guarantee of\nfilesystem state in the face of rapid changes.  For the vast majority\nof operations, this is never a problem.\n',
2684 silly resolved     readmeFilename: 'README.md',
2684 silly resolved     bugs: { url: 'https://github.com/isaacs/node-glob/issues' },
2684 silly resolved     homepage: 'https://github.com/isaacs/node-glob',
2684 silly resolved     _id: 'glob@3.2.11',
2684 silly resolved     _shasum: '4a973f635b9190f715d10987d5c00fd2815ebe3d',
2684 silly resolved     _from: 'glob@3.2.11',
2684 silly resolved     _resolved: 'http://registry.npm.taobao.org/glob/download/glob-3.2.11.tgz' } ]
2685 info install glob@3.2.11 into /usr/local/lib/node_modules/grunt-cli/node_modules/findup-sync
2686 info installOne glob@3.2.11
2687 silly resolved [ { author:
2687 silly resolved      { name: 'Isaac Z. Schlueter',
2687 silly resolved        email: 'i@izs.me',
2687 silly resolved        url: 'http://blog.izs.me/' },
2687 silly resolved     name: 'glob',
2687 silly resolved     description: 'a little globber',
2687 silly resolved     version: '3.2.11',
2687 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/node-glob.git' },
2687 silly resolved     main: 'glob.js',
2687 silly resolved     engines: { node: '*' },
2687 silly resolved     dependencies: { inherits: '2', minimatch: '0.3' },
2687 silly resolved     devDependencies: { tap: '~0.4.0', mkdirp: '0', rimraf: '1' },
2687 silly resolved     scripts:
2687 silly resolved      { test: 'tap test/*.js',
2687 silly resolved        'test-regen': 'TEST_REGEN=1 node test/00-setup.js' },
2687 silly resolved     license: 'BSD',
2687 silly resolved     readme: '# Glob\n\nMatch files using the patterns the shell uses, like stars and stuff.\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n## Attention: node-glob users!\n\nThe API has changed dramatically between 2.x and 3.x. This library is\nnow 100% JavaScript, and the integer flags have been replaced with an\noptions object.\n\nAlso, there\'s an event emitter class, proper tests, and all the other\nthings you\'ve come to expect from node modules.\n\nAnd best of all, no compilation!\n\n## Usage\n\n```javascript\nvar glob = require("glob")\n\n// options is optional\nglob("**/*.js", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is ["**/*.js"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options])\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require("glob").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt\'s an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n* `statCache` Collection of all the stat results the glob search\n  performed.\n* `cache` Convenience object.  Each field has the following possible\n  values:\n  * `false` - Path does not exist\n  * `true` - Path exists\n  * `1` - Path exists, and is not a directory\n  * `2` - Path exists, and is a directory\n  * `[file, entries, ...]` - Path exists, is a directory, and the\n    array value is the results of `fs.readdir`\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, "/")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `dot` Include `.dot` files in normal matches and `globstar` matches.\n  Note that an explicit dot in a portion of the pattern will always\n  match dot files.\n* `nomount` By default, a pattern starting with a forward-slash will be\n  "mounted" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don\'t sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `cache` See `cache` property above.  Pass in a previously generated\n  cache object to save some fs calls.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See "Race Conditions" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the cache or statCache objects are reused between glob\ncalls.\n\nUsers are thus advised not to use a glob result as a guarantee of\nfilesystem state in the face of rapid changes.  For the vast majority\nof operations, this is never a problem.\n',
2687 silly resolved     readmeFilename: 'README.md',
2687 silly resolved     bugs: { url: 'https://github.com/isaacs/node-glob/issues' },
2687 silly resolved     homepage: 'https://github.com/isaacs/node-glob',
2687 silly resolved     _id: 'glob@3.2.11',
2687 silly resolved     _shasum: '4a973f635b9190f715d10987d5c00fd2815ebe3d',
2687 silly resolved     _from: 'glob@3.2.11',
2687 silly resolved     _resolved: 'http://registry.npm.taobao.org/glob/download/glob-3.2.11.tgz' } ]
2688 info install glob@3.2.11 into /usr/local/lib/node_modules/grunt/node_modules/findup-sync
2689 info installOne glob@3.2.11
2690 silly resolved [ { author:
2690 silly resolved      { name: 'Isaac Z. Schlueter',
2690 silly resolved        email: 'i@izs.me',
2690 silly resolved        url: 'http://blog.izs.me/' },
2690 silly resolved     name: 'glob',
2690 silly resolved     description: 'a little globber',
2690 silly resolved     version: '3.2.11',
2690 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/node-glob.git' },
2690 silly resolved     main: 'glob.js',
2690 silly resolved     engines: { node: '*' },
2690 silly resolved     dependencies: { inherits: '2', minimatch: '0.3' },
2690 silly resolved     devDependencies: { tap: '~0.4.0', mkdirp: '0', rimraf: '1' },
2690 silly resolved     scripts:
2690 silly resolved      { test: 'tap test/*.js',
2690 silly resolved        'test-regen': 'TEST_REGEN=1 node test/00-setup.js' },
2690 silly resolved     license: 'BSD',
2690 silly resolved     readme: '# Glob\n\nMatch files using the patterns the shell uses, like stars and stuff.\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n## Attention: node-glob users!\n\nThe API has changed dramatically between 2.x and 3.x. This library is\nnow 100% JavaScript, and the integer flags have been replaced with an\noptions object.\n\nAlso, there\'s an event emitter class, proper tests, and all the other\nthings you\'ve come to expect from node modules.\n\nAnd best of all, no compilation!\n\n## Usage\n\n```javascript\nvar glob = require("glob")\n\n// options is optional\nglob("**/*.js", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is ["**/*.js"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options])\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require("glob").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt\'s an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n* `statCache` Collection of all the stat results the glob search\n  performed.\n* `cache` Convenience object.  Each field has the following possible\n  values:\n  * `false` - Path does not exist\n  * `true` - Path exists\n  * `1` - Path exists, and is not a directory\n  * `2` - Path exists, and is a directory\n  * `[file, entries, ...]` - Path exists, is a directory, and the\n    array value is the results of `fs.readdir`\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, "/")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `dot` Include `.dot` files in normal matches and `globstar` matches.\n  Note that an explicit dot in a portion of the pattern will always\n  match dot files.\n* `nomount` By default, a pattern starting with a forward-slash will be\n  "mounted" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don\'t sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `cache` See `cache` property above.  Pass in a previously generated\n  cache object to save some fs calls.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See "Race Conditions" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the cache or statCache objects are reused between glob\ncalls.\n\nUsers are thus advised not to use a glob result as a guarantee of\nfilesystem state in the face of rapid changes.  For the vast majority\nof operations, this is never a problem.\n',
2690 silly resolved     readmeFilename: 'README.md',
2690 silly resolved     bugs: { url: 'https://github.com/isaacs/node-glob/issues' },
2690 silly resolved     homepage: 'https://github.com/isaacs/node-glob',
2690 silly resolved     _id: 'glob@3.2.11',
2690 silly resolved     _shasum: '4a973f635b9190f715d10987d5c00fd2815ebe3d',
2690 silly resolved     _from: 'glob@3.2.11',
2690 silly resolved     _resolved: 'http://registry.npm.taobao.org/glob/download/glob-3.2.11.tgz' } ]
2691 info install glob@3.2.11 into /usr/local/lib/node_modules/node-inspector
2692 info installOne glob@3.2.11
2693 silly resolved [ { name: 'nopt',
2693 silly resolved     version: '1.0.10',
2693 silly resolved     description: 'Option parsing for Node, supporting types, shorthands, etc. Used by npm.',
2693 silly resolved     author:
2693 silly resolved      { name: 'Isaac Z. Schlueter',
2693 silly resolved        email: 'i@izs.me',
2693 silly resolved        url: 'http://blog.izs.me/' },
2693 silly resolved     main: 'lib/nopt.js',
2693 silly resolved     scripts: { test: 'node lib/nopt.js' },
2693 silly resolved     repository: { type: 'git', url: 'http://github.com/isaacs/nopt' },
2693 silly resolved     bin: { nopt: './bin/nopt.js' },
2693 silly resolved     license:
2693 silly resolved      { type: 'MIT',
2693 silly resolved        url: 'https://github.com/isaacs/nopt/raw/master/LICENSE' },
2693 silly resolved     dependencies: { abbrev: '1' },
2693 silly resolved     readme: 'If you want to write an option parser, and have it be good, there are\ntwo ways to do it.  The Right Way, and the Wrong Way.\n\nThe Wrong Way is to sit down and write an option parser.  We\'ve all done\nthat.\n\nThe Right Way is to write some complex configurable program with so many\noptions that you go half-insane just trying to manage them all, and put\nit off with duct-tape solutions until you see exactly to the core of the\nproblem, and finally snap and write an awesome option parser.\n\nIf you want to write an option parser, don\'t write an option parser.\nWrite a package manager, or a source control system, or a service\nrestarter, or an operating system.  You probably won\'t end up with a\ngood one of those, but if you don\'t give up, and you are relentless and\ndiligent enough in your procrastination, you may just end up with a very\nnice option parser.\n\n## USAGE\n\n    // my-program.js\n    var nopt = require("nopt")\n      , Stream = require("stream").Stream\n      , path = require("path")\n      , knownOpts = { "foo" : [String, null]\n                    , "bar" : [Stream, Number]\n                    , "baz" : path\n                    , "bloo" : [ "big", "medium", "small" ]\n                    , "flag" : Boolean\n                    , "pick" : Boolean\n                    , "many" : [String, Array]\n                    }\n      , shortHands = { "foofoo" : ["--foo", "Mr. Foo"]\n                     , "b7" : ["--bar", "7"]\n                     , "m" : ["--bloo", "medium"]\n                     , "p" : ["--pick"]\n                     , "f" : ["--flag"]\n                     }\n                 // everything is optional.\n                 // knownOpts and shorthands default to {}\n                 // arg list defaults to process.argv\n                 // slice defaults to 2\n      , parsed = nopt(knownOpts, shortHands, process.argv, 2)\n    console.log(parsed)\n\nThis would give you support for any of the following:\n\n```bash\n$ node my-program.js --foo "blerp" --no-flag\n{ "foo" : "blerp", "flag" : false }\n\n$ node my-program.js ---bar 7 --foo "Mr. Hand" --flag\n{ bar: 7, foo: "Mr. Hand", flag: true }\n\n$ node my-program.js --foo "blerp" -f -----p\n{ foo: "blerp", flag: true, pick: true }\n\n$ node my-program.js -fp --foofoo\n{ foo: "Mr. Foo", flag: true, pick: true }\n\n$ node my-program.js --foofoo -- -fp  # -- stops the flag parsing.\n{ foo: "Mr. Foo", argv: { remain: ["-fp"] } }\n\n$ node my-program.js --blatzk 1000 -fp # unknown opts are ok.\n{ blatzk: 1000, flag: true, pick: true }\n\n$ node my-program.js --blatzk true -fp # but they need a value\n{ blatzk: true, flag: true, pick: true }\n\n$ node my-program.js --no-blatzk -fp # unless they start with "no-"\n{ blatzk: false, flag: true, pick: true }\n\n$ node my-program.js --baz b/a/z # known paths are resolved.\n{ baz: "/Users/isaacs/b/a/z" }\n\n# if Array is one of the types, then it can take many\n# values, and will always be an array.  The other types provided\n# specify what types are allowed in the list.\n\n$ node my-program.js --many 1 --many null --many foo\n{ many: ["1", "null", "foo"] }\n\n$ node my-program.js --many foo\n{ many: ["foo"] }\n```\n\nRead the tests at the bottom of `lib/nopt.js` for more examples of\nwhat this puppy can do.\n\n## Types\n\nThe following types are supported, and defined on `nopt.typeDefs`\n\n* String: A normal string.  No parsing is done.\n* path: A file system path.  Gets resolved against cwd if not absolute.\n* url: A url.  If it doesn\'t parse, it isn\'t accepted.\n* Number: Must be numeric.\n* Date: Must parse as a date. If it does, and `Date` is one of the options,\n  then it will return a Date object, not a string.\n* Boolean: Must be either `true` or `false`.  If an option is a boolean,\n  then it does not need a value, and its presence will imply `true` as\n  the value.  To negate boolean flags, do `--no-whatever` or `--whatever\n  false`\n* NaN: Means that the option is strictly not allowed.  Any value will\n  fail.\n* Stream: An object matching the "Stream" class in node.  Valuable\n  for use when validating programmatically.  (npm uses this to let you\n  supply any WriteStream on the `outfd` and `logfd` config options.)\n* Array: If `Array` is specified as one of the types, then the value\n  will be parsed as a list of options.  This means that multiple values\n  can be specified, and that the value will always be an array.\n\nIf a type is an array of values not on this list, then those are\nconsidered valid values.  For instance, in the example above, the\n`--bloo` option can only be one of `"big"`, `"medium"`, or `"small"`,\nand any other value will be rejected.\n\nWhen parsing unknown fields, `"true"`, `"false"`, and `"null"` will be\ninterpreted as their JavaScript equivalents, and numeric values will be\ninterpreted as a number.\n\nYou can also mix types and values, or multiple types, in a list.  For\ninstance `{ blah: [Number, null] }` would allow a value to be set to\neither a Number or null.\n\nTo define a new type, add it to `nopt.typeDefs`.  Each item in that\nhash is an object with a `type` member and a `validate` method.  The\n`type` member is an object that matches what goes in the type list.  The\n`validate` method is a function that gets called with `validate(data,\nkey, val)`.  Validate methods should assign `data[key]` to the valid\nvalue of `val` if it can be handled properly, or return boolean\n`false` if it cannot.\n\nYou can also call `nopt.clean(data, types, typeDefs)` to clean up a\nconfig object and remove its invalid properties.\n\n## Error Handling\n\nBy default, nopt outputs a warning to standard error when invalid\noptions are found.  You can change this behavior by assigning a method\nto `nopt.invalidHandler`.  This method will be called with\nthe offending `nopt.invalidHandler(key, val, types)`.\n\nIf no `nopt.invalidHandler` is assigned, then it will console.error\nits whining.  If it is assigned to boolean `false` then the warning is\nsuppressed.\n\n## Abbreviations\n\nYes, they are supported.  If you define options like this:\n\n```javascript\n{ "foolhardyelephants" : Boolean\n, "pileofmonkeys" : Boolean }\n```\n\nThen this will work:\n\n```bash\nnode program.js --foolhar --pil\nnode program.js --no-f --pileofmon\n# etc.\n```\n\n## Shorthands\n\nShorthands are a hash of shorter option names to a snippet of args that\nthey expand to.\n\nIf multiple one-character shorthands are all combined, and the\ncombination does not unambiguously match any other option or shorthand,\nthen they will be broken up into their constituent parts.  For example:\n\n```json\n{ "s" : ["--loglevel", "silent"]\n, "g" : "--global"\n, "f" : "--force"\n, "p" : "--parseable"\n, "l" : "--long"\n}\n```\n\n```bash\nnpm ls -sgflp\n# just like doing this:\nnpm ls --loglevel silent --global --force --long --parseable\n```\n\n## The Rest of the args\n\nThe config object returned by nopt is given a special member called\n`argv`, which is an object with the following fields:\n\n* `remain`: The remaining args after all the parsing has occurred.\n* `original`: The args as they originally appeared.\n* `cooked`: The args after flags and shorthands are expanded.\n\n## Slicing\n\nNode programs are called with more or less the exact argv as it appears\nin C land, after the v8 and node-specific options have been plucked off.\nAs such, `argv[0]` is always `node` and `argv[1]` is always the\nJavaScript program being run.\n\nThat\'s usually not very useful to you.  So they\'re sliced off by\ndefault.  If you want them, then you can pass in `0` as the last\nargument, or any other number that you\'d like to slice off the start of\nthe list.\n',
2693 silly resolved     readmeFilename: 'README.md',
2693 silly resolved     bugs: { url: 'https://github.com/isaacs/nopt/issues' },
2693 silly resolved     homepage: 'https://github.com/isaacs/nopt',
2693 silly resolved     _id: 'nopt@1.0.10',
2693 silly resolved     _from: 'nopt@1.0.10' } ]
2694 info install nopt@1.0.10 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt
2695 info installOne nopt@1.0.10
2696 silly resolved [ { name: 'nopt',
2696 silly resolved     version: '1.0.10',
2696 silly resolved     description: 'Option parsing for Node, supporting types, shorthands, etc. Used by npm.',
2696 silly resolved     author:
2696 silly resolved      { name: 'Isaac Z. Schlueter',
2696 silly resolved        email: 'i@izs.me',
2696 silly resolved        url: 'http://blog.izs.me/' },
2696 silly resolved     main: 'lib/nopt.js',
2696 silly resolved     scripts: { test: 'node lib/nopt.js' },
2696 silly resolved     repository: { type: 'git', url: 'http://github.com/isaacs/nopt' },
2696 silly resolved     bin: { nopt: './bin/nopt.js' },
2696 silly resolved     license:
2696 silly resolved      { type: 'MIT',
2696 silly resolved        url: 'https://github.com/isaacs/nopt/raw/master/LICENSE' },
2696 silly resolved     dependencies: { abbrev: '1' },
2696 silly resolved     readme: 'If you want to write an option parser, and have it be good, there are\ntwo ways to do it.  The Right Way, and the Wrong Way.\n\nThe Wrong Way is to sit down and write an option parser.  We\'ve all done\nthat.\n\nThe Right Way is to write some complex configurable program with so many\noptions that you go half-insane just trying to manage them all, and put\nit off with duct-tape solutions until you see exactly to the core of the\nproblem, and finally snap and write an awesome option parser.\n\nIf you want to write an option parser, don\'t write an option parser.\nWrite a package manager, or a source control system, or a service\nrestarter, or an operating system.  You probably won\'t end up with a\ngood one of those, but if you don\'t give up, and you are relentless and\ndiligent enough in your procrastination, you may just end up with a very\nnice option parser.\n\n## USAGE\n\n    // my-program.js\n    var nopt = require("nopt")\n      , Stream = require("stream").Stream\n      , path = require("path")\n      , knownOpts = { "foo" : [String, null]\n                    , "bar" : [Stream, Number]\n                    , "baz" : path\n                    , "bloo" : [ "big", "medium", "small" ]\n                    , "flag" : Boolean\n                    , "pick" : Boolean\n                    , "many" : [String, Array]\n                    }\n      , shortHands = { "foofoo" : ["--foo", "Mr. Foo"]\n                     , "b7" : ["--bar", "7"]\n                     , "m" : ["--bloo", "medium"]\n                     , "p" : ["--pick"]\n                     , "f" : ["--flag"]\n                     }\n                 // everything is optional.\n                 // knownOpts and shorthands default to {}\n                 // arg list defaults to process.argv\n                 // slice defaults to 2\n      , parsed = nopt(knownOpts, shortHands, process.argv, 2)\n    console.log(parsed)\n\nThis would give you support for any of the following:\n\n```bash\n$ node my-program.js --foo "blerp" --no-flag\n{ "foo" : "blerp", "flag" : false }\n\n$ node my-program.js ---bar 7 --foo "Mr. Hand" --flag\n{ bar: 7, foo: "Mr. Hand", flag: true }\n\n$ node my-program.js --foo "blerp" -f -----p\n{ foo: "blerp", flag: true, pick: true }\n\n$ node my-program.js -fp --foofoo\n{ foo: "Mr. Foo", flag: true, pick: true }\n\n$ node my-program.js --foofoo -- -fp  # -- stops the flag parsing.\n{ foo: "Mr. Foo", argv: { remain: ["-fp"] } }\n\n$ node my-program.js --blatzk 1000 -fp # unknown opts are ok.\n{ blatzk: 1000, flag: true, pick: true }\n\n$ node my-program.js --blatzk true -fp # but they need a value\n{ blatzk: true, flag: true, pick: true }\n\n$ node my-program.js --no-blatzk -fp # unless they start with "no-"\n{ blatzk: false, flag: true, pick: true }\n\n$ node my-program.js --baz b/a/z # known paths are resolved.\n{ baz: "/Users/isaacs/b/a/z" }\n\n# if Array is one of the types, then it can take many\n# values, and will always be an array.  The other types provided\n# specify what types are allowed in the list.\n\n$ node my-program.js --many 1 --many null --many foo\n{ many: ["1", "null", "foo"] }\n\n$ node my-program.js --many foo\n{ many: ["foo"] }\n```\n\nRead the tests at the bottom of `lib/nopt.js` for more examples of\nwhat this puppy can do.\n\n## Types\n\nThe following types are supported, and defined on `nopt.typeDefs`\n\n* String: A normal string.  No parsing is done.\n* path: A file system path.  Gets resolved against cwd if not absolute.\n* url: A url.  If it doesn\'t parse, it isn\'t accepted.\n* Number: Must be numeric.\n* Date: Must parse as a date. If it does, and `Date` is one of the options,\n  then it will return a Date object, not a string.\n* Boolean: Must be either `true` or `false`.  If an option is a boolean,\n  then it does not need a value, and its presence will imply `true` as\n  the value.  To negate boolean flags, do `--no-whatever` or `--whatever\n  false`\n* NaN: Means that the option is strictly not allowed.  Any value will\n  fail.\n* Stream: An object matching the "Stream" class in node.  Valuable\n  for use when validating programmatically.  (npm uses this to let you\n  supply any WriteStream on the `outfd` and `logfd` config options.)\n* Array: If `Array` is specified as one of the types, then the value\n  will be parsed as a list of options.  This means that multiple values\n  can be specified, and that the value will always be an array.\n\nIf a type is an array of values not on this list, then those are\nconsidered valid values.  For instance, in the example above, the\n`--bloo` option can only be one of `"big"`, `"medium"`, or `"small"`,\nand any other value will be rejected.\n\nWhen parsing unknown fields, `"true"`, `"false"`, and `"null"` will be\ninterpreted as their JavaScript equivalents, and numeric values will be\ninterpreted as a number.\n\nYou can also mix types and values, or multiple types, in a list.  For\ninstance `{ blah: [Number, null] }` would allow a value to be set to\neither a Number or null.\n\nTo define a new type, add it to `nopt.typeDefs`.  Each item in that\nhash is an object with a `type` member and a `validate` method.  The\n`type` member is an object that matches what goes in the type list.  The\n`validate` method is a function that gets called with `validate(data,\nkey, val)`.  Validate methods should assign `data[key]` to the valid\nvalue of `val` if it can be handled properly, or return boolean\n`false` if it cannot.\n\nYou can also call `nopt.clean(data, types, typeDefs)` to clean up a\nconfig object and remove its invalid properties.\n\n## Error Handling\n\nBy default, nopt outputs a warning to standard error when invalid\noptions are found.  You can change this behavior by assigning a method\nto `nopt.invalidHandler`.  This method will be called with\nthe offending `nopt.invalidHandler(key, val, types)`.\n\nIf no `nopt.invalidHandler` is assigned, then it will console.error\nits whining.  If it is assigned to boolean `false` then the warning is\nsuppressed.\n\n## Abbreviations\n\nYes, they are supported.  If you define options like this:\n\n```javascript\n{ "foolhardyelephants" : Boolean\n, "pileofmonkeys" : Boolean }\n```\n\nThen this will work:\n\n```bash\nnode program.js --foolhar --pil\nnode program.js --no-f --pileofmon\n# etc.\n```\n\n## Shorthands\n\nShorthands are a hash of shorter option names to a snippet of args that\nthey expand to.\n\nIf multiple one-character shorthands are all combined, and the\ncombination does not unambiguously match any other option or shorthand,\nthen they will be broken up into their constituent parts.  For example:\n\n```json\n{ "s" : ["--loglevel", "silent"]\n, "g" : "--global"\n, "f" : "--force"\n, "p" : "--parseable"\n, "l" : "--long"\n}\n```\n\n```bash\nnpm ls -sgflp\n# just like doing this:\nnpm ls --loglevel silent --global --force --long --parseable\n```\n\n## The Rest of the args\n\nThe config object returned by nopt is given a special member called\n`argv`, which is an object with the following fields:\n\n* `remain`: The remaining args after all the parsing has occurred.\n* `original`: The args as they originally appeared.\n* `cooked`: The args after flags and shorthands are expanded.\n\n## Slicing\n\nNode programs are called with more or less the exact argv as it appears\nin C land, after the v8 and node-specific options have been plucked off.\nAs such, `argv[0]` is always `node` and `argv[1]` is always the\nJavaScript program being run.\n\nThat\'s usually not very useful to you.  So they\'re sliced off by\ndefault.  If you want them, then you can pass in `0` as the last\nargument, or any other number that you\'d like to slice off the start of\nthe list.\n',
2696 silly resolved     readmeFilename: 'README.md',
2696 silly resolved     bugs: { url: 'https://github.com/isaacs/nopt/issues' },
2696 silly resolved     homepage: 'https://github.com/isaacs/nopt',
2696 silly resolved     _id: 'nopt@1.0.10',
2696 silly resolved     _from: 'nopt@1.0.10' } ]
2697 info install nopt@1.0.10 into /usr/local/lib/node_modules/grunt-cli
2698 info installOne nopt@1.0.10
2699 silly resolved [ { name: 'nopt',
2699 silly resolved     version: '1.0.10',
2699 silly resolved     description: 'Option parsing for Node, supporting types, shorthands, etc. Used by npm.',
2699 silly resolved     author:
2699 silly resolved      { name: 'Isaac Z. Schlueter',
2699 silly resolved        email: 'i@izs.me',
2699 silly resolved        url: 'http://blog.izs.me/' },
2699 silly resolved     main: 'lib/nopt.js',
2699 silly resolved     scripts: { test: 'node lib/nopt.js' },
2699 silly resolved     repository: { type: 'git', url: 'http://github.com/isaacs/nopt' },
2699 silly resolved     bin: { nopt: './bin/nopt.js' },
2699 silly resolved     license:
2699 silly resolved      { type: 'MIT',
2699 silly resolved        url: 'https://github.com/isaacs/nopt/raw/master/LICENSE' },
2699 silly resolved     dependencies: { abbrev: '1' },
2699 silly resolved     readme: 'If you want to write an option parser, and have it be good, there are\ntwo ways to do it.  The Right Way, and the Wrong Way.\n\nThe Wrong Way is to sit down and write an option parser.  We\'ve all done\nthat.\n\nThe Right Way is to write some complex configurable program with so many\noptions that you go half-insane just trying to manage them all, and put\nit off with duct-tape solutions until you see exactly to the core of the\nproblem, and finally snap and write an awesome option parser.\n\nIf you want to write an option parser, don\'t write an option parser.\nWrite a package manager, or a source control system, or a service\nrestarter, or an operating system.  You probably won\'t end up with a\ngood one of those, but if you don\'t give up, and you are relentless and\ndiligent enough in your procrastination, you may just end up with a very\nnice option parser.\n\n## USAGE\n\n    // my-program.js\n    var nopt = require("nopt")\n      , Stream = require("stream").Stream\n      , path = require("path")\n      , knownOpts = { "foo" : [String, null]\n                    , "bar" : [Stream, Number]\n                    , "baz" : path\n                    , "bloo" : [ "big", "medium", "small" ]\n                    , "flag" : Boolean\n                    , "pick" : Boolean\n                    , "many" : [String, Array]\n                    }\n      , shortHands = { "foofoo" : ["--foo", "Mr. Foo"]\n                     , "b7" : ["--bar", "7"]\n                     , "m" : ["--bloo", "medium"]\n                     , "p" : ["--pick"]\n                     , "f" : ["--flag"]\n                     }\n                 // everything is optional.\n                 // knownOpts and shorthands default to {}\n                 // arg list defaults to process.argv\n                 // slice defaults to 2\n      , parsed = nopt(knownOpts, shortHands, process.argv, 2)\n    console.log(parsed)\n\nThis would give you support for any of the following:\n\n```bash\n$ node my-program.js --foo "blerp" --no-flag\n{ "foo" : "blerp", "flag" : false }\n\n$ node my-program.js ---bar 7 --foo "Mr. Hand" --flag\n{ bar: 7, foo: "Mr. Hand", flag: true }\n\n$ node my-program.js --foo "blerp" -f -----p\n{ foo: "blerp", flag: true, pick: true }\n\n$ node my-program.js -fp --foofoo\n{ foo: "Mr. Foo", flag: true, pick: true }\n\n$ node my-program.js --foofoo -- -fp  # -- stops the flag parsing.\n{ foo: "Mr. Foo", argv: { remain: ["-fp"] } }\n\n$ node my-program.js --blatzk 1000 -fp # unknown opts are ok.\n{ blatzk: 1000, flag: true, pick: true }\n\n$ node my-program.js --blatzk true -fp # but they need a value\n{ blatzk: true, flag: true, pick: true }\n\n$ node my-program.js --no-blatzk -fp # unless they start with "no-"\n{ blatzk: false, flag: true, pick: true }\n\n$ node my-program.js --baz b/a/z # known paths are resolved.\n{ baz: "/Users/isaacs/b/a/z" }\n\n# if Array is one of the types, then it can take many\n# values, and will always be an array.  The other types provided\n# specify what types are allowed in the list.\n\n$ node my-program.js --many 1 --many null --many foo\n{ many: ["1", "null", "foo"] }\n\n$ node my-program.js --many foo\n{ many: ["foo"] }\n```\n\nRead the tests at the bottom of `lib/nopt.js` for more examples of\nwhat this puppy can do.\n\n## Types\n\nThe following types are supported, and defined on `nopt.typeDefs`\n\n* String: A normal string.  No parsing is done.\n* path: A file system path.  Gets resolved against cwd if not absolute.\n* url: A url.  If it doesn\'t parse, it isn\'t accepted.\n* Number: Must be numeric.\n* Date: Must parse as a date. If it does, and `Date` is one of the options,\n  then it will return a Date object, not a string.\n* Boolean: Must be either `true` or `false`.  If an option is a boolean,\n  then it does not need a value, and its presence will imply `true` as\n  the value.  To negate boolean flags, do `--no-whatever` or `--whatever\n  false`\n* NaN: Means that the option is strictly not allowed.  Any value will\n  fail.\n* Stream: An object matching the "Stream" class in node.  Valuable\n  for use when validating programmatically.  (npm uses this to let you\n  supply any WriteStream on the `outfd` and `logfd` config options.)\n* Array: If `Array` is specified as one of the types, then the value\n  will be parsed as a list of options.  This means that multiple values\n  can be specified, and that the value will always be an array.\n\nIf a type is an array of values not on this list, then those are\nconsidered valid values.  For instance, in the example above, the\n`--bloo` option can only be one of `"big"`, `"medium"`, or `"small"`,\nand any other value will be rejected.\n\nWhen parsing unknown fields, `"true"`, `"false"`, and `"null"` will be\ninterpreted as their JavaScript equivalents, and numeric values will be\ninterpreted as a number.\n\nYou can also mix types and values, or multiple types, in a list.  For\ninstance `{ blah: [Number, null] }` would allow a value to be set to\neither a Number or null.\n\nTo define a new type, add it to `nopt.typeDefs`.  Each item in that\nhash is an object with a `type` member and a `validate` method.  The\n`type` member is an object that matches what goes in the type list.  The\n`validate` method is a function that gets called with `validate(data,\nkey, val)`.  Validate methods should assign `data[key]` to the valid\nvalue of `val` if it can be handled properly, or return boolean\n`false` if it cannot.\n\nYou can also call `nopt.clean(data, types, typeDefs)` to clean up a\nconfig object and remove its invalid properties.\n\n## Error Handling\n\nBy default, nopt outputs a warning to standard error when invalid\noptions are found.  You can change this behavior by assigning a method\nto `nopt.invalidHandler`.  This method will be called with\nthe offending `nopt.invalidHandler(key, val, types)`.\n\nIf no `nopt.invalidHandler` is assigned, then it will console.error\nits whining.  If it is assigned to boolean `false` then the warning is\nsuppressed.\n\n## Abbreviations\n\nYes, they are supported.  If you define options like this:\n\n```javascript\n{ "foolhardyelephants" : Boolean\n, "pileofmonkeys" : Boolean }\n```\n\nThen this will work:\n\n```bash\nnode program.js --foolhar --pil\nnode program.js --no-f --pileofmon\n# etc.\n```\n\n## Shorthands\n\nShorthands are a hash of shorter option names to a snippet of args that\nthey expand to.\n\nIf multiple one-character shorthands are all combined, and the\ncombination does not unambiguously match any other option or shorthand,\nthen they will be broken up into their constituent parts.  For example:\n\n```json\n{ "s" : ["--loglevel", "silent"]\n, "g" : "--global"\n, "f" : "--force"\n, "p" : "--parseable"\n, "l" : "--long"\n}\n```\n\n```bash\nnpm ls -sgflp\n# just like doing this:\nnpm ls --loglevel silent --global --force --long --parseable\n```\n\n## The Rest of the args\n\nThe config object returned by nopt is given a special member called\n`argv`, which is an object with the following fields:\n\n* `remain`: The remaining args after all the parsing has occurred.\n* `original`: The args as they originally appeared.\n* `cooked`: The args after flags and shorthands are expanded.\n\n## Slicing\n\nNode programs are called with more or less the exact argv as it appears\nin C land, after the v8 and node-specific options have been plucked off.\nAs such, `argv[0]` is always `node` and `argv[1]` is always the\nJavaScript program being run.\n\nThat\'s usually not very useful to you.  So they\'re sliced off by\ndefault.  If you want them, then you can pass in `0` as the last\nargument, or any other number that you\'d like to slice off the start of\nthe list.\n',
2699 silly resolved     readmeFilename: 'README.md',
2699 silly resolved     bugs: { url: 'https://github.com/isaacs/nopt/issues' },
2699 silly resolved     homepage: 'https://github.com/isaacs/nopt',
2699 silly resolved     _id: 'nopt@1.0.10',
2699 silly resolved     _from: 'nopt@1.0.10' } ]
2700 info install nopt@1.0.10 into /usr/local/lib/node_modules/grunt
2701 info installOne nopt@1.0.10
2702 silly resolved [ { author:
2702 silly resolved      { name: 'Isaac Z. Schlueter',
2702 silly resolved        email: 'i@izs.me',
2702 silly resolved        url: 'http://blog.izs.me/' },
2702 silly resolved     name: 'glob',
2702 silly resolved     description: 'a little globber',
2702 silly resolved     version: '3.1.21',
2702 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/node-glob.git' },
2702 silly resolved     main: 'glob.js',
2702 silly resolved     engines: { node: '*' },
2702 silly resolved     dependencies: { minimatch: '~0.2.11', 'graceful-fs': '~1.2.0', inherits: '1' },
2702 silly resolved     devDependencies: { tap: '~0.4.0', mkdirp: '0', rimraf: '1' },
2702 silly resolved     scripts: { test: 'tap test/*.js' },
2702 silly resolved     license: 'BSD',
2702 silly resolved     readme: '# Glob\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n## Attention: node-glob users!\n\nThe API has changed dramatically between 2.x and 3.x. This library is\nnow 100% JavaScript, and the integer flags have been replaced with an\noptions object.\n\nAlso, there\'s an event emitter class, proper tests, and all the other\nthings you\'ve come to expect from node modules.\n\nAnd best of all, no compilation!\n\n## Usage\n\n```javascript\nvar glob = require("glob")\n\n// options is optional\nglob("**/*.js", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is ["**/*.js"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options]\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require("glob").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt\'s an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, "/")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `nomount` By default, a pattern starting with a forward-slash will be\n  "mounted" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don\'t sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See "Race Conditions" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.  **Note that this is different from the way that `**` is\nhandled by ruby\'s `Dir` class.**\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the statCache object is reused between glob calls.\n\nUsers are thus advised not to use a glob result as a\nguarantee of filesystem state in the face of rapid changes.\nFor the vast majority of operations, this is never a problem.\n',
2702 silly resolved     readmeFilename: 'README.md',
2702 silly resolved     bugs: { url: 'https://github.com/isaacs/node-glob/issues' },
2702 silly resolved     homepage: 'https://github.com/isaacs/node-glob',
2702 silly resolved     _id: 'glob@3.1.21',
2702 silly resolved     _from: 'glob@3.1.21' } ]
2703 info install glob@3.1.21 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt
2704 info installOne glob@3.1.21
2705 silly resolved [ { author:
2705 silly resolved      { name: 'Isaac Z. Schlueter',
2705 silly resolved        email: 'i@izs.me',
2705 silly resolved        url: 'http://blog.izs.me/' },
2705 silly resolved     name: 'glob',
2705 silly resolved     description: 'a little globber',
2705 silly resolved     version: '3.1.21',
2705 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/node-glob.git' },
2705 silly resolved     main: 'glob.js',
2705 silly resolved     engines: { node: '*' },
2705 silly resolved     dependencies: { minimatch: '~0.2.11', 'graceful-fs': '~1.2.0', inherits: '1' },
2705 silly resolved     devDependencies: { tap: '~0.4.0', mkdirp: '0', rimraf: '1' },
2705 silly resolved     scripts: { test: 'tap test/*.js' },
2705 silly resolved     license: 'BSD',
2705 silly resolved     readme: '# Glob\n\nThis is a glob implementation in JavaScript.  It uses the `minimatch`\nlibrary to do its matching.\n\n## Attention: node-glob users!\n\nThe API has changed dramatically between 2.x and 3.x. This library is\nnow 100% JavaScript, and the integer flags have been replaced with an\noptions object.\n\nAlso, there\'s an event emitter class, proper tests, and all the other\nthings you\'ve come to expect from node modules.\n\nAnd best of all, no compilation!\n\n## Usage\n\n```javascript\nvar glob = require("glob")\n\n// options is optional\nglob("**/*.js", options, function (er, files) {\n  // files is an array of filenames.\n  // If the `nonull` option is set, and nothing\n  // was found, then files is ["**/*.js"]\n  // er is an error object or null.\n})\n```\n\n## Features\n\nPlease see the [minimatch\ndocumentation](https://github.com/isaacs/minimatch) for more details.\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n* [minimatch documentation](https://github.com/isaacs/minimatch)\n\n## glob(pattern, [options], cb)\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* `cb` {Function}\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nPerform an asynchronous glob search.\n\n## glob.sync(pattern, [options]\n\n* `pattern` {String} Pattern to be matched\n* `options` {Object}\n* return: {Array<String>} filenames found matching the pattern\n\nPerform a synchronous glob search.\n\n## Class: glob.Glob\n\nCreate a Glob object by instanting the `glob.Glob` class.\n\n```javascript\nvar Glob = require("glob").Glob\nvar mg = new Glob(pattern, options, cb)\n```\n\nIt\'s an EventEmitter, and starts walking the filesystem to find matches\nimmediately.\n\n### new glob.Glob(pattern, [options], [cb])\n\n* `pattern` {String} pattern to search for\n* `options` {Object}\n* `cb` {Function} Called when an error occurs, or matches are found\n  * `err` {Error | null}\n  * `matches` {Array<String>} filenames found matching the pattern\n\nNote that if the `sync` flag is set in the options, then matches will\nbe immediately available on the `g.found` member.\n\n### Properties\n\n* `minimatch` The minimatch object that the glob uses.\n* `options` The options object passed in.\n* `error` The error encountered.  When an error is encountered, the\n  glob object is in an undefined state, and should be discarded.\n* `aborted` Boolean which is set to true when calling `abort()`.  There\n  is no way at this time to continue a glob search after aborting, but\n  you can re-use the statCache to avoid having to duplicate syscalls.\n\n### Events\n\n* `end` When the matching is finished, this is emitted with all the\n  matches found.  If the `nonull` option is set, and no match was found,\n  then the `matches` list contains the original pattern.  The matches\n  are sorted, unless the `nosort` flag is set.\n* `match` Every time a match is found, this is emitted with the matched.\n* `error` Emitted when an unexpected error is encountered, or whenever\n  any fs error occurs if `options.strict` is set.\n* `abort` When `abort()` is called, this event is raised.\n\n### Methods\n\n* `abort` Stop the search.\n\n### Options\n\nAll the options that can be passed to Minimatch can also be passed to\nGlob to change pattern matching behavior.  Also, some have been added,\nor have glob-specific ramifications.\n\nAll options are false by default, unless otherwise noted.\n\nAll options are added to the glob object, as well.\n\n* `cwd` The current working directory in which to search.  Defaults\n  to `process.cwd()`.\n* `root` The place where patterns starting with `/` will be mounted\n  onto.  Defaults to `path.resolve(options.cwd, "/")` (`/` on Unix\n  systems, and `C:\\` or some such on Windows.)\n* `nomount` By default, a pattern starting with a forward-slash will be\n  "mounted" onto the root setting, so that a valid filesystem path is\n  returned.  Set this flag to disable that behavior.\n* `mark` Add a `/` character to directory matches.  Note that this\n  requires additional stat calls.\n* `nosort` Don\'t sort the results.\n* `stat` Set to true to stat *all* results.  This reduces performance\n  somewhat, and is completely unnecessary, unless `readdir` is presumed\n  to be an untrustworthy indicator of file existence.  It will cause\n  ELOOP to be triggered one level sooner in the case of cyclical\n  symbolic links.\n* `silent` When an unusual error is encountered\n  when attempting to read a directory, a warning will be printed to\n  stderr.  Set the `silent` option to true to suppress these warnings.\n* `strict` When an unusual error is encountered\n  when attempting to read a directory, the process will just continue on\n  in search of other matches.  Set the `strict` option to raise an error\n  in these cases.\n* `statCache` A cache of results of filesystem information, to prevent\n  unnecessary stat calls.  While it should not normally be necessary to\n  set this, you may pass the statCache from one glob() call to the\n  options object of another, if you know that the filesystem will not\n  change between calls.  (See "Race Conditions" below.)\n* `sync` Perform a synchronous glob search.\n* `nounique` In some cases, brace-expanded patterns can result in the\n  same file showing up multiple times in the result set.  By default,\n  this implementation prevents duplicates in the result set.\n  Set this flag to disable that behavior.\n* `nonull` Set to never return an empty set, instead returning a set\n  containing the pattern itself.  This is the default in glob(3).\n* `nocase` Perform a case-insensitive match.  Note that case-insensitive\n  filesystems will sometimes result in glob returning results that are\n  case-insensitively matched anyway, since readdir and stat will not\n  raise an error.\n* `debug` Set to enable debug logging in minimatch and glob.\n* `globDebug` Set to enable debug logging in glob, but not minimatch.\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between node-glob and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.  **Note that this is different from the way that `**` is\nhandled by ruby\'s `Dir` class.**\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen glob returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`glob.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n\n## Windows\n\n**Please only use forward-slashes in glob expressions.**\n\nThough windows uses either `/` or `\\` as its path separator, only `/`\ncharacters are used by this glob implementation.  You must use\nforward-slashes **only** in glob expressions.  Back-slashes will always\nbe interpreted as escape characters, not path separators.\n\nResults from absolute patterns such as `/foo/*` are mounted onto the\nroot setting using `path.join`.  On windows, this will by default result\nin `/foo/*` matching `C:\\foo\\bar.txt`.\n\n## Race Conditions\n\nGlob searching, by its very nature, is susceptible to race conditions,\nsince it relies on directory walking and such.\n\nAs a result, it is possible that a file that exists when glob looks for\nit may have been deleted or modified by the time it returns the result.\n\nAs part of its internal implementation, this program caches all stat\nand readdir calls that it makes, in order to cut down on system\noverhead.  However, this also makes it even more susceptible to races,\nespecially if the statCache object is reused between glob calls.\n\nUsers are thus advised not to use a glob result as a\nguarantee of filesystem state in the face of rapid changes.\nFor the vast majority of operations, this is never a problem.\n',
2705 silly resolved     readmeFilename: 'README.md',
2705 silly resolved     bugs: { url: 'https://github.com/isaacs/node-glob/issues' },
2705 silly resolved     homepage: 'https://github.com/isaacs/node-glob',
2705 silly resolved     _id: 'glob@3.1.21',
2705 silly resolved     _from: 'glob@3.1.21' } ]
2706 info install glob@3.1.21 into /usr/local/lib/node_modules/grunt
2707 info installOne glob@3.1.21
2708 silly resolved [ { name: 'prompt',
2708 silly resolved     description: 'A beautiful command-line prompt for node.js',
2708 silly resolved     version: '0.2.11',
2708 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
2708 silly resolved     maintainers: [ [Object], [Object] ],
2708 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/prompt.git' },
2708 silly resolved     dependencies:
2708 silly resolved      { pkginfo: '0.x.x',
2708 silly resolved        read: '1.0.x',
2708 silly resolved        revalidator: '0.1.x',
2708 silly resolved        utile: '0.2.x',
2708 silly resolved        winston: '0.6.x' },
2708 silly resolved     devDependencies: { vows: '0.7.0' },
2708 silly resolved     main: './lib/prompt',
2708 silly resolved     scripts:
2708 silly resolved      { test: 'vows test/prompt-test.js --spec',
2708 silly resolved        'test-all': 'vows --spec' },
2708 silly resolved     engines: { node: '>= 0.6.6' },
2708 silly resolved     readme: '# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\n  var prompt = require(\'prompt\');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get([\'username\', \'email\'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  username: \' + result.username);\n    console.log(\'  email: \' + result.email);\n  });\n```\n\nThis will result in the following command-line output:\n\n```\n  $ node examples/simple-prompt.js \n  prompt: username: some-user\n  prompt: email: some-user@some-place.org\n  Command-line input received:\n    username: some-user\n    email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here\'s a quick sample:\n\n``` js\n  var schema = {\n    properties: {\n      name: {\n        pattern: /^[a-zA-Z\\s\\-]+$/,\n        message: \'Name must be only letters, spaces, or dashes\',\n        required: true\n      },\n      password: {\n        hidden: true\n      }\n    }\n  };\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: email, password\n  //\n  prompt.get(schema, function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  name: \' + result.name);\n    console.log(\'  password: \' + result.password);\n  });\n```\n\nPretty easy right? The output from the above script is: \n\n```\n  $ node examples/property-prompt.js\n  prompt: name: nodejitsu000\n  error:  Invalid input for name\n  error:  Name must be only letters, spaces, or dashes\n  prompt: name: Nodejitsu Inc\n  prompt: password: \n  Command-line input received:\n    name: Nodejitsu Inc\n    password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere\'s an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n  {\n    description: \'Enter your password\',     // Prompt displayed to the user. If not supplied name will be used.\n    type: \'string\',                 // Specify the type of input to expect.\n    pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n    message: \'Password must be letters\', // Warning message to display if validation fails.\n    hidden: true,                        // If true, characters entered will not be output to console.\n    default: \'lamepassword\',             // Default value to use if no value is entered.\n    required: true                        // If true, value entered must be non-empty.\n    before: function(value) { return \'v\' + value; } // Runs before node-prompt callbacks. It modifies user\'s input\n  }\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\nUsing `type: \'array\'` has some special cases.\n\n- `description` will not work in the schema if `type: \'array\'` is defined.\n- `maxItems` takes precedence over `minItems`.\n- Arrays that do not have `maxItems` defined will require users to `SIGINT` (`^C`) before the array is ended.\n- If `SIGINT` (`^C`) is triggered before `minItems` is met, a validation error will appear. This will require users to `SIGEOF` (`^D`) to end the input.\n\nFor more information on things such as `maxItems` and `minItems`, refer to the [revalidator](https://github.com/flatiron/revalidator) repository.\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra \'name\' property:\n\n```js\n  var prompt = require(\'../lib/prompt\');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and password\n  //\n  prompt.get([{\n      name: \'username\',\n      required: true\n    }, {\n      name: \'password\',\n      hidden: true,\n      conform: function (value) {\n        return true;\n      }\n    }], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  username: \' + result.username);\n    console.log(\'  password: \' + result.password);\n  });\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n  //prompt-override.js\n\n  var prompt = require(\'prompt\'),\n      optimist = require(\'optimist\')\n\n  //\n  // set the overrides\n  //\n  prompt.override = optimist.argv\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get([\'username\', \'email\'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log(\'Command-line input received:\');\n    console.log(\'  username: \' + result.username);\n    console.log(\'  email: \' + result.email);\n  })\n\n  //: node prompt-override.js --username USER --email EMAIL\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\n  var obj = {\n    password: \'lamepassword\',\n    mindset: \'NY\'\n  }\n\n  //\n  // Log the initial object.\n  //\n  console.log(\'Initial object to be extended:\');\n  console.dir(obj);\n\n  //\n  // Add two properties to the empty object: username and email\n  //\n  prompt.addProperties(obj, [\'username\', \'email\'], function (err) {\n    //\n    // Log the results.\n    //\n    console.log(\'Updated object received:\');\n    console.dir(obj);\n  });\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is "prompt," the default `prompt.delimiter` is\n": ", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\n  var prompt = require("prompt");\n\n  //\n  // Setting these properties customizes the prompt.\n  //\n  prompt.message = "Question!".rainbow;\n  prompt.delimiter = "><".green;\n\n  prompt.start();\n\n  prompt.get({\n    properties: {\n      name: {\n        description: "What is your name?".magenta\n      }\n    }\n  }, function (err, result) {\n    console.log("You said your name is: ".cyan + result.name.cyan);\n  });\n```\n\nIf you don\'t want colors, you can set\n\n```js\nvar prompt = require(\'prompt\');\n\nprompt.colors = false;\n```\n\n## Installation\n\n``` bash\n  $ [sudo] npm install prompt\n```\n\n## Running tests\n\n``` bash \n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Josh Holbrook](http://github.com/jesusabdullah), [Pavan Kumar Sunkara](http://github.com/pksunkara)\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n',
2708 silly resolved     readmeFilename: 'README.md',
2708 silly resolved     bugs: { url: 'https://github.com/flatiron/prompt/issues' },
2708 silly resolved     homepage: 'https://github.com/flatiron/prompt',
2708 silly resolved     _id: 'prompt@0.2.11',
2708 silly resolved     _shasum: '26d455af4b7fac15291dfcdddf2400328c1fa446',
2708 silly resolved     _from: 'prompt@0.2.11',
2708 silly resolved     _resolved: 'http://registry.npm.taobao.org/prompt/download/prompt-0.2.11.tgz' } ]
2709 info install prompt@0.2.11 into /usr/local/lib/node_modules/forever/node_modules/flatiron
2710 info installOne prompt@0.2.11
2711 silly resolved [ { name: 'sinon-chai',
2711 silly resolved     description: 'Extends Chai with assertions for the Sinon.JS mocking framework.',
2711 silly resolved     keywords: [ 'sinon', 'chai', 'testing', 'spies', 'stubs', 'mocks' ],
2711 silly resolved     version: '2.4.0',
2711 silly resolved     author:
2711 silly resolved      { name: 'Domenic Denicola',
2711 silly resolved        email: 'domenic@domenicdenicola.com',
2711 silly resolved        url: 'http://domenicdenicola.com' },
2711 silly resolved     license: 'WTFPL',
2711 silly resolved     repository: { type: 'git', url: 'git://github.com/domenic/sinon-chai.git' },
2711 silly resolved     bugs: { url: 'http://github.com/domenic/sinon-chai/issues' },
2711 silly resolved     directories: { lib: './lib' },
2711 silly resolved     main: './lib/sinon-chai.js',
2711 silly resolved     scripts:
2711 silly resolved      { test: 'mocha',
2711 silly resolved        lint: 'jshint ./lib',
2711 silly resolved        cover: 'cover run node_modules/mocha/bin/_mocha && cover report html && opener ./cover_html/index.html' },
2711 silly resolved     peerDependencies: { chai: '>=1.0.0 <2', sinon: '>=1.4.0 <2' },
2711 silly resolved     devDependencies:
2711 silly resolved      { chai: '~1.5',
2711 silly resolved        'coffee-script': '~1.6.2',
2711 silly resolved        cover: '~0.2.8',
2711 silly resolved        jshint: '~1.1',
2711 silly resolved        mocha: '~1.9',
2711 silly resolved        opener: '~1.3',
2711 silly resolved        sinon: '~1.6' },
2711 silly resolved     readme: '# Sinon.JS Assertions for Chai\n\n**Sinon–Chai** provides a set of custom assertions for using the [Sinon.JS][] spy, stub, and mocking framework with the\n[Chai][] assertion library. You get all the benefits of Chai with all the powerful tools of Sinon.JS.\n\nInstead of using Sinon.JS\'s assertions:\n\n```javascript\nsinon.assertCalledWith(mySpy, "foo");\n```\n\nor awkwardly trying to use Chai\'s `should` or `expect` interfaces on spy properties:\n\n```javascript\nmySpy.calledWith("foo").should.be.ok;\nexpect(mySpy.calledWith("foo")).to.be.ok;\n```\n\nyou can say\n\n```javascript\nmySpy.should.have.been.calledWith("foo");\n```\n\n\n## Assertions\n\nAll of your favorite Sinon.JS assertions made their way into Sinon–Chai. We show the `should` syntax here; the `expect`\nequivalent is also available.\n\n<table>\n    <tr>\n        <th>Sinon.JS property/method</th>\n        <th>Sinon–Chai assertion</th>\n    </tr>\n    <tr>\n        <td>called</td>\n        <td>spy.should.have.been.called</td>\n    </tr>\n    <tr>\n        <td>calledOnce</td>\n        <td>spy.should.have.been.calledOnce</td>\n    </tr>\n    <tr>\n        <td>calledTwice</td>\n        <td>spy.should.have.been.calledTwice</td>\n    </tr>\n    <tr>\n        <td>calledThrice</td>\n        <td>spy.should.have.been.calledThrice</td>\n    </tr>\n    <tr>\n        <td>calledBefore</td>\n        <td>spy1.should.have.been.calledBefore(spy2)</td>\n    </tr>\n    <tr>\n        <td>calledAfter</td>\n        <td>spy1.should.have.been.calledAfter(spy2)</td>\n    </tr>\n    <tr>\n        <td>calledWithNew</td>\n        <td>spy.should.have.been.calledWithNew</td>\n    </tr>\n    <tr>\n        <td>alwaysCalledWithNew</td>\n        <td>spy.should.always.have.been.calledWithNew</td>\n    </tr>\n    <tr>\n        <td>calledOn</td>\n        <td>spy.should.have.been.calledOn(context)</td>\n    </tr>\n    <tr>\n        <td>alwaysCalledOn</td>\n        <td>spy.should.always.have.been.calledOn(context)</td>\n    </tr>\n    <tr>\n        <td>calledWith</td>\n        <td>spy.should.have.been.calledWith(...args)</td>\n    </tr>\n    <tr>\n        <td>alwaysCalledWith</td>\n        <td>spy.should.always.have.been.calledWith(...args)</td>\n    </tr>\n    <tr>\n        <td>calledWithExactly</td>\n        <td>spy.should.always.have.been.calledWithExactly(...args)</td>\n    </tr>\n    <tr>\n        <td>alwaysCalledWithExactly</td>\n        <td>spy.should.always.have.been.calledWithExactly(...args)</td>\n    </tr>\n    <tr>\n        <td>calledWithMatch</td>\n        <td>spy.should.have.been.calledWithMatch(...args)</td>\n    </tr>\n    <tr>\n        <td>alwaysCalledWithMatch</td>\n        <td>spy.should.always.have.been.calledWithMatch(...args)</td>\n    </tr>\n    <tr>\n        <td>returned</td>\n        <td>spy.should.have.returned(returnVal)</td>\n    </tr>\n    <tr>\n        <td>alwaysReturned</td>\n        <td>spy.should.have.always.returned(returnVal)</td>\n    </tr>\n    <tr>\n        <td>threw</td>\n        <td>spy.should.have.thrown(errorObjOrErrorTypeStringOrNothing)</td>\n    </tr>\n    <tr>\n        <td>alwaysThrew</td>\n        <td>spy.should.have.always.thrown(errorObjOrErrorTypeStringOrNothing)</td>\n    </tr>\n</table>\n\nFor more information on the behavior of each assertion, see\n[the documentation for the corresponding spy methods][spymethods]. These of course work on not only spies, but\nindividual spy calls, stubs, and mocks as well.\n\n\n## Installation and Usage\n\n### Node\n\nDo an `npm install sinon-chai` to get up and running. Then:\n\n```javascript\nvar chai = require("chai");\nvar sinonChai = require("sinon-chai");\n\nchai.use(sinonChai);\n```\n\nYou can of course put this code in a common test fixture file; for an example using [Mocha][], see\n[the Sinon–Chai tests themselves][fixturedemo].\n\n### AMD\n\nSinon–Chai supports being used as an [AMD][] module, registering itself anonymously (just like Chai). So, assuming you\nhave configured your loader to map the Chai and Sinon–Chai files to the respective module IDs `"chai"` and\n`"sinon-chai"`, you can use them as follows:\n\n```javascript\ndefine(function (require, exports, module) {\n    var chai = require("chai");\n    var sinonChai = require("sinon-chai");\n\n    chai.use(sinonChai);\n});\n```\n\n### `<script>` tag\n\nIf you include Sinon–Chai directly with a `<script>` tag, after the one for Chai itself, then it will automatically plug\nin to Chai and be ready for use. Note that you\'ll want to get the latest browser build of Sinon.JS as well:\n\n```html\n<script src="chai.js"></script>\n<script src="sinon-chai.js"></script>\n<script src="sinon.js"></script>\n```\n\n### Ruby on Rails\n\nThanks to [Cymen Vig][], there\'s now [a Ruby gem][] of Sinon–Chai that integrates it with the Rails asset pipeline!\n\n\n[Sinon.JS]: http://sinonjs.org/\n[Chai]: http://chaijs.com/\n[spymethods]: http://sinonjs.org/docs/#spies-api\n[Mocha]: http://visionmedia.github.com/mocha/\n[fixturedemo]: https://github.com/domenic/sinon-chai/tree/master/test/\n[AMD]: https://github.com/amdjs/amdjs-api/wiki/AMD\n[Cymen Vig]: https://github.com/cymen\n[a Ruby gem]: https://github.com/cymen/sinon-chai-rails\n',
2711 silly resolved     readmeFilename: 'README.md',
2711 silly resolved     homepage: 'https://github.com/domenic/sinon-chai',
2711 silly resolved     _id: 'sinon-chai@2.4.0',
2711 silly resolved     _from: 'sinon-chai@2.4.0' } ]
2712 info install sinon-chai@2.4.0 into /usr/local/lib/node_modules/coffee
2713 info installOne sinon-chai@2.4.0
2714 silly resolved [ { name: 'js-yaml',
2714 silly resolved     version: '2.0.5',
2714 silly resolved     description: 'YAML 1.2 parser and serializer',
2714 silly resolved     keywords: [ 'yaml', 'parser', 'serializer', 'pyyaml' ],
2714 silly resolved     homepage: 'https://github.com/nodeca/js-yaml',
2714 silly resolved     author: { name: 'Dervus Grim', email: 'dervus@lavabit.com' },
2714 silly resolved     contributors: [ [Object], [Object] ],
2714 silly resolved     bugs: { url: 'https://github.com/nodeca/js-yaml/issues' },
2714 silly resolved     license:
2714 silly resolved      { type: 'MIT',
2714 silly resolved        url: 'https://github.com/nodeca/js-yaml/blob/master/LICENSE' },
2714 silly resolved     repository: { type: 'git', url: 'git://github.com/nodeca/js-yaml.git' },
2714 silly resolved     main: './index.js',
2714 silly resolved     bin: { 'js-yaml': 'bin/js-yaml.js' },
2714 silly resolved     scripts: { test: 'make test' },
2714 silly resolved     dependencies: { argparse: '~ 0.1.11', esprima: '~ 1.0.2' },
2714 silly resolved     devDependencies: { mocha: '*' },
2714 silly resolved     engines: { node: '>= 0.6.0' },
2714 silly resolved     readme: 'JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it\'s very fast, and supports 1.2 spec.\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program\'s version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src="js-yaml.min.js"></script>\n<script type="text/javascript">\nvar doc = jsyaml.load(\'greeting: hello\\nname: world\');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most \'useful\' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That\'s mostly equivalent to\ncalling `load()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire(\'js-yaml\');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require(\'/home/ixti/example.yml\');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### load (string [ , options ])\n\nParses `string` as single YAML document. Returns a JavaScript object or throws\n`YAMLException` on error.\n\nNOTE: This function **does not** understands multi-document sources, it throws\nexception on those.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ - specifies a schema to use.\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `load()`, but understands multi-document sources and apply `iterator` to\neach document.\n\n``` javascript\nvar yaml = require(\'js-yaml\');\n\nyaml.loadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### safeLoad (string [ , options ])\n\nSame as `load()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `loadAll()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### dump (object [ , options ])\n\nSerializes `object` as YAML document.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - "tag" => "style" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  "canonical"   => "~"\n\n!!int\n  "binary"      => "0b1", "0b101010", "0b1110001111010"\n  "octal"       => "01", "052", "016172"\n  "decimal"     => "1", "42", "7290"\n  "hexadecimal" => "0x1", "0x2A", "0x1C7A"\n\n!!null, !!bool, !!float\n  "lowercase"   => "null", "true", "false", ".nan", \'.inf\'\n  "uppercase"   => "NULL", "TRUE", "FALSE", ".NAN", \'.INF\'\n  "camelcase"   => "Null", "True", "False", ".NaN", \'.Inf\'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n### safeDump (object [ , options ])\n\nSame as `dump()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null \'\'                   # null\n!!bool \'yes\'                # bool\n!!int \'3...\'                # number\n!!float \'3.14...\'           # number\n!!binary \'...base64...\'     # buffer\n!!timestamp \'YYYY-...\'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str \'...\'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined \'\'                   # Undefined\n!!js/function \'function () {...}\'   # Function\n```\n\n\n\n\n## Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n',
2714 silly resolved     readmeFilename: 'README.md',
2714 silly resolved     _id: 'js-yaml@2.0.5',
2714 silly resolved     _from: 'js-yaml@2.0.5' } ]
2715 info install js-yaml@2.0.5 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt
2716 info installOne js-yaml@2.0.5
2717 silly resolved [ { name: 'js-yaml',
2717 silly resolved     version: '2.0.5',
2717 silly resolved     description: 'YAML 1.2 parser and serializer',
2717 silly resolved     keywords: [ 'yaml', 'parser', 'serializer', 'pyyaml' ],
2717 silly resolved     homepage: 'https://github.com/nodeca/js-yaml',
2717 silly resolved     author: { name: 'Dervus Grim', email: 'dervus@lavabit.com' },
2717 silly resolved     contributors: [ [Object], [Object] ],
2717 silly resolved     bugs: { url: 'https://github.com/nodeca/js-yaml/issues' },
2717 silly resolved     license:
2717 silly resolved      { type: 'MIT',
2717 silly resolved        url: 'https://github.com/nodeca/js-yaml/blob/master/LICENSE' },
2717 silly resolved     repository: { type: 'git', url: 'git://github.com/nodeca/js-yaml.git' },
2717 silly resolved     main: './index.js',
2717 silly resolved     bin: { 'js-yaml': 'bin/js-yaml.js' },
2717 silly resolved     scripts: { test: 'make test' },
2717 silly resolved     dependencies: { argparse: '~ 0.1.11', esprima: '~ 1.0.2' },
2717 silly resolved     devDependencies: { mocha: '*' },
2717 silly resolved     engines: { node: '>= 0.6.0' },
2717 silly resolved     readme: 'JS-YAML - YAML 1.2 parser and serializer for JavaScript\n=======================================================\n\n[![Build Status](https://secure.travis-ci.org/nodeca/js-yaml.png)](http://travis-ci.org/nodeca/js-yaml)\n\n[Online Demo](http://nodeca.github.com/js-yaml/)\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it\'s very fast, and supports 1.2 spec.\n\n\nBreaking changes in 1.x.x -> 2.0.x\n----------------------------------\n\nIf your have not used __custom__ tags or loader classes - no changes needed. Just\nupgrade library and enjoy high parse speed.\n\nIn other case, you should rewrite your tag constructors and custom loader\nclasses, to conform new schema-based API. See\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) and\n[wiki](https://github.com/nodeca/js-yaml/wiki) for details.\nNote, that parser internals were completely rewritten.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install js-yaml -g\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-j] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program\'s version number and exit.\n  -c, --compact  Display errors in compact mode\n  -j, --to-json  Output a non-funky boring JSON\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<script src="js-yaml.min.js"></script>\n<script type="text/javascript">\nvar doc = jsyaml.load(\'greeting: hello\\nname: world\');\n</script>\n```\n\nBrowser support was done mostly for online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\n\nAPI\n---\n\nHere we cover the most \'useful\' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\nIn node.js JS-YAML automatically registers handlers for `.yml` and `.yaml`\nfiles. You can load them just with `require`. That\'s mostly equivalent to\ncalling `load()` on fetched content of a file. Just with one string!\n\n``` javascript\nrequire(\'js-yaml\');\n\n// Get document, or throw exception on error\ntry {\n  var doc = require(\'/home/ixti/example.yml\');\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### load (string [ , options ])\n\nParses `string` as single YAML document. Returns a JavaScript object or throws\n`YAMLException` on error.\n\nNOTE: This function **does not** understands multi-document sources, it throws\nexception on those.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `strict` _(default - false)_ makes the loader to throw errors instead of\n  warnings.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ - specifies a schema to use.\n\n\n### loadAll (string, iterator [ , options ])\n\nSame as `load()`, but understands multi-document sources and apply `iterator` to\neach document.\n\n``` javascript\nvar yaml = require(\'js-yaml\');\n\nyaml.loadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### safeLoad (string [ , options ])\n\nSame as `load()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### safeLoadAll (string, iterator [ , options ])\n\nSame as `loadAll()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\n### dump (object [ , options ])\n\nSerializes `object` as YAML document.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - "tag" => "style" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SCHEMA`)_ specifies a schema to use.\n\nstyles:\n\n``` none\n!!null\n  "canonical"   => "~"\n\n!!int\n  "binary"      => "0b1", "0b101010", "0b1110001111010"\n  "octal"       => "01", "052", "016172"\n  "decimal"     => "1", "42", "7290"\n  "hexadecimal" => "0x1", "0x2A", "0x1C7A"\n\n!!null, !!bool, !!float\n  "lowercase"   => "null", "true", "false", ".nan", \'.inf\'\n  "uppercase"   => "NULL", "TRUE", "FALSE", ".NAN", \'.INF\'\n  "camelcase"   => "Null", "True", "False", ".NaN", \'.Inf\'\n```\n\nBy default, !!int uses `decimal`, and !!null, !!bool, !!float use `lowercase`.\n\n\n### safeDump (object [ , options ])\n\nSame as `dump()` but uses `SAFE_SCHEMA` by default - only recommended tags of\nYAML specification (no JavaScript-specific tags, e.g. `!!js/regexp`).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null \'\'                   # null\n!!bool \'yes\'                # bool\n!!int \'3...\'                # number\n!!float \'3.14...\'           # number\n!!binary \'...base64...\'     # buffer\n!!timestamp \'YYYY-...\'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str \'...\'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined \'\'                   # Undefined\n!!js/function \'function () {...}\'   # Function\n```\n\n\n\n\n## Caveats\n\nNote, that you use arrays or objects as key in JS-YAML. JS do not allows objects\nor array as keys, and stringifies (by calling .toString method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ "foo,bar": ["baz"], "[object Object]": ["baz", "baz"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n## License\n\nView the [LICENSE](https://github.com/nodeca/js-yaml/blob/master/LICENSE) file\n(MIT).\n',
2717 silly resolved     readmeFilename: 'README.md',
2717 silly resolved     _id: 'js-yaml@2.0.5',
2717 silly resolved     _from: 'js-yaml@2.0.5' } ]
2718 info install js-yaml@2.0.5 into /usr/local/lib/node_modules/grunt
2719 info installOne js-yaml@2.0.5
2720 silly resolved [ { name: 'watch',
2720 silly resolved     description: 'Utilities for watching file trees.',
2720 silly resolved     tags: [ 'util', 'utility', 'fs', 'files' ],
2720 silly resolved     version: '0.8.0',
2720 silly resolved     homepage: 'https://github.com/mikeal/watch',
2720 silly resolved     bugs: { url: 'https://github.com/mikeal/watch/issues' },
2720 silly resolved     repository: { type: 'git', url: 'git://github.com/mikeal/watch.git' },
2720 silly resolved     author: { name: 'Mikeal Rogers', email: 'mikeal.rogers@gmail.com' },
2720 silly resolved     directories: { lib: 'lib' },
2720 silly resolved     engines: [ 'node >=0.1.95' ],
2720 silly resolved     main: './main',
2720 silly resolved     readme: '# watch -- Utilities for watching file trees in node.js\n\n## Install\n\n<pre>\n  npm install watch\n</pre>\n\n## Purpose\n\nThe intention of this module is provide tools that make managing the watching of file & directory trees easier.\n\n#### watch.watchTree(root, [options,] callback)\n\nThe first argument is the directory root you want to watch.\n\nThe options object is passed to fs.watchFile but can also be used to provide two additional watchTree specific options:\n\n* `\'ignoreDotFiles\'` - When true this option means that when the file tree is walked it will ignore files that being with "."\n* `\'filter\'` - You can use this option to provide a function that returns true or false for each file and directory that is walked to decide whether or not that file/directory is included in the watcher.\n\nThe callback takes 3 arguments. The first is the file that was modified. The second is the current stat object for that file and the third is the previous stat object.\n\nWhen a file is new the previous stat object is null.\n\nWhen watchTree is finished walking the tree and adding all the listeners it passes the file hash (key if the file/directory names and the values are the current stat objects) as the first argument and null as both the previous and current stat object arguments.\n\n<pre>\n  watch.watchTree(\'/home/mikeal\', function (f, curr, prev) {\n    if (typeof f == "object" && prev === null && curr === null) {\n      // Finished walking the tree\n    } else if (prev === null) {\n      // f is a new file\n    } else if (curr.nlink === 0) {\n      // f was removed\n    } else {\n      // f was changed\n    }\n  })\n</pre>\n\n### watch.createMonitor(root, [options,] callback)\n\nThis function creates an EventEmitter that gives notifications for different changes that happen to the file and directory tree under the given root argument.\n\nThe options object is passed to watch.watchTree.\n\nThe callback receives the monitor object.\n\nThe monitor object contains a property, `files`, which is a hash of files and directories as keys with the current stat object as the value.\n\nThe monitor has the following events.\n\n* `\'created\'` - New file has been created. Two arguments, the filename and the stat object.\n* `\'removed\'` - A file has been moved or deleted. Two arguments, the filename and the stat object for the fd.\n* `\'changed\'` - A file has been changed. Three arguments, the filename, the current stat object, and the previous stat object.\n\n<pre>\n  var watch = require(\'watch\')\n  watch.createMonitor(\'/home/mikeal\', function (monitor) {\n    monitor.files[\'/home/mikeal/.zshrc\'] // Stat object for my zshrc.\n    monitor.on("created", function (f, stat) {\n      // Handle new files\n    })\n    monitor.on("changed", function (f, curr, prev) {\n      // Handle file changes\n    })\n    monitor.on("removed", function (f, stat) {\n      // Handle removed files\n    })\n  })\n</pre>\n',
2720 silly resolved     readmeFilename: 'readme.mkd',
2720 silly resolved     _id: 'watch@0.8.0',
2720 silly resolved     _shasum: '1bb0eea53defe6e621e9c8c63c0358007ecbdbcc',
2720 silly resolved     _from: 'watch@0.8.0',
2720 silly resolved     _resolved: 'http://registry.npm.taobao.org/watch/download/watch-0.8.0.tgz' } ]
2721 info install watch@0.8.0 into /usr/local/lib/node_modules/forever
2722 info installOne watch@0.8.0
2723 silly resolved [ { name: 'forever-monitor',
2723 silly resolved     description: 'Core forever process monitor',
2723 silly resolved     version: '1.2.3',
2723 silly resolved     author: { name: 'Nodejitsu Inc', email: 'info@nodejitsu.com' },
2723 silly resolved     contributors: [ [Object], [Object], [Object], [Object], [Object], [Object] ],
2723 silly resolved     repository:
2723 silly resolved      { type: 'git',
2723 silly resolved        url: 'http://github.com/nodejitsu/forever-monitor.git' },
2723 silly resolved     keywords: [ 'fault tolerant', 'sysadmin', 'tools' ],
2723 silly resolved     dependencies:
2723 silly resolved      { broadway: '0.2.x',
2723 silly resolved        minimatch: '0.2.x',
2723 silly resolved        pkginfo: '0.x.x',
2723 silly resolved        'ps-tree': '0.0.x',
2723 silly resolved        watch: '0.5.x',
2723 silly resolved        utile: '0.1.x' },
2723 silly resolved     devDependencies: { optimist: '0.3.x', vows: '0.7.x' },
2723 silly resolved     main: './lib/index.js',
2723 silly resolved     scripts: { test: 'vows test/**/*-test.js --spec -i' },
2723 silly resolved     engines: { node: '>= 0.8.x' },
2723 silly resolved     readme: '# forever-monitor [![Build Status](https://secure.travis-ci.org/nodejitsu/forever-monitor.png)](http://travis-ci.org/nodejitsu/forever-monitor)\n\nThe core monitoring functionality of forever without the CLI\n\n## Usage\nYou can also use forever from inside your own node.js code.\n\n``` js\n  var forever = require(\'forever-monitor\');\n\n  var child = new (forever.Monitor)(\'your-filename.js\', {\n    max: 3,\n    silent: true,\n    options: []\n  });\n\n  child.on(\'exit\', function () {\n    console.log(\'your-filename.js has exited after 3 restarts\');\n  });\n  \n  child.start();\n```\n\n### Spawning a non-node process\nYou can spawn non-node processes too. Either set the `command` key in the\n`options` hash or pass in an `Array` in place of the `file` argument like this:\n\n``` js\n  var forever = require(\'forever-monitor\');\n  var child = forever.start([ \'perl\', \'-le\', \'print "moo"\' ], {\n    max : 1,\n    silent : true\n  });\n```\n\n### Options available when using Forever in node.js\nThere are several options that you should be aware of when using forever. Most of this configuration is optional.\n\n``` js\n  {\n    //\n    // Basic configuration options\n    //\n    \'silent\': false,            // Silences the output from stdout and stderr in the parent process\n    \'uid\': \'your-UID\'           // Custom uid for this forever process. (default: autogen)\n    \'pidFile\': \'path/to/a.pid\', // Path to put pid information for the process(es) started\n    \'max\': 10,                  // Sets the maximum number of times a given script should run\n    \'killTree\': true            // Kills the entire child process tree on `exit`\n    \n    //\n    // These options control how quickly forever restarts a child process\n    // as well as when to kill a "spinning" process\n    //\n    \'minUptime\': 2000,     // Minimum time a child process has to be up. Forever will \'exit\' otherwise.\n    \'spinSleepTime\': 1000, // Interval between restarts if a child is spinning (i.e. alive < minUptime).\n    \n    //\n    // Command to spawn as well as options and other vars \n    // (env, cwd, etc) to pass along\n    //\n    \'command\': \'perl\',         // Binary to run (default: \'node\')\n    \'options\': [\'foo\',\'bar\'],  // Additional arguments to pass to the script,\n    \'sourceDir\': \'script/path\' // Directory that the source script is in\n    \n    //\n    // Options for restarting on watched files.\n    //\n    \'watch\': false              // Value indicating if we should watch files.\n    \'watchIgnoreDotFiles\': null // Dot files we should read to ignore (\'.foreverignore\', etc).\n    \'watchIgnorePatterns\': null // Ignore patterns to use when watching files.\n    \'watchDirectory\': null      // Top-level directory to watch from.\n    \n    //\n    // All or nothing options passed along to `child_process.spawn`.\n    //\n    \'spawnWith\': {\n      customFds: [-1, -1, -1], // that forever spawns.\n      setsid: false\n    },\n    \n    //\n    // More specific options to pass along to `child_process.spawn` which \n    // will override anything passed to the `spawnWith` option\n    //\n    \'env\': { \'ADDITIONAL\': \'CHILD ENV VARS\' }\n    \'cwd\': \'/path/to/child/working/directory\'\n    \n    //\n    // Log files and associated logging options for this instance\n    //\n    \'logFile\': \'path/to/file\', // Path to log output from forever process (when daemonized)\n    \'outFile\': \'path/to/file\', // Path to log output from child stdout\n    \'errFile\': \'path/to/file\'  // Path to log output from child stderr\n  }\n```\n\n### Events available when using an instance of Forever in node.js\nEach forever object is an instance of the node.js core EventEmitter. There are several core events that you can listen for:\n\n* **error**   _[err]:_             Raised when an error occurs\n* **start**   _[process, data]:_   Raised when the target script is first started.\n* **stop**    _[process]:_         Raised when the target script is stopped by the user\n* **restart** _[forever]:_         Raised each time the target script is restarted\n* **exit**    _[forever]:_         Raised when the target script actually exits (permenantly).\n* **stdout**  _[data]:_            Raised when data is received from the child process\' stdout\n* **stderr**  _[data]:_            Raised when data is received from the child process\' stderr\n\n## Installation\n\n``` bash\n  $ npm install forever-monitor\n```\n\n## Run Tests\n\n``` bash\n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Fedor Indutny](http://github.com/indutny), [James Halliday](http://substack.net/), [Charlie McConnell](http://github.com/avianflu), [Maciej Malecki](http://github.com/mmalecki)\n',
2723 silly resolved     readmeFilename: 'README.md',
2723 silly resolved     bugs: { url: 'https://github.com/nodejitsu/forever-monitor/issues' },
2723 silly resolved     homepage: 'https://github.com/nodejitsu/forever-monitor',
2723 silly resolved     _id: 'forever-monitor@1.2.3',
2723 silly resolved     _shasum: 'b27ac3acb6fdcc7315d6cd85830f2d004733028b',
2723 silly resolved     _from: 'forever-monitor@1.2.3',
2723 silly resolved     _resolved: 'http://registry.npm.taobao.org/forever-monitor/download/forever-monitor-1.2.3.tgz' } ]
2724 info install forever-monitor@1.2.3 into /usr/local/lib/node_modules/forever
2725 info installOne forever-monitor@1.2.3
2726 silly resolved [ { name: 'winston',
2726 silly resolved     description: 'A multi-transport async logging library for Node.js',
2726 silly resolved     version: '0.6.2',
2726 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
2726 silly resolved     maintainers: [ [Object] ],
2726 silly resolved     repository: { type: 'git', url: 'https://github.com/flatiron/winston.git' },
2726 silly resolved     keywords: [ 'logging', 'sysadmin', 'tools' ],
2726 silly resolved     dependencies:
2726 silly resolved      { async: '0.1.x',
2726 silly resolved        colors: '0.x.x',
2726 silly resolved        cycle: '1.0.x',
2726 silly resolved        eyes: '0.1.x',
2726 silly resolved        pkginfo: '0.2.x',
2726 silly resolved        request: '2.9.x',
2726 silly resolved        'stack-trace': '0.0.x' },
2726 silly resolved     devDependencies: { vows: '0.6.x' },
2726 silly resolved     main: './lib/winston',
2726 silly resolved     scripts: { test: 'vows --spec --isolate' },
2726 silly resolved     engines: { node: '>= 0.4.0' },
2726 silly resolved     readme: '# winston [![Build Status](https://secure.travis-ci.org/flatiron/winston.png)](http://travis-ci.org/flatiron/winston)\n\nA multi-transport async logging library for node.js. <span style="font-size:28px; font-weight:bold;">&quot;CHILL WINSTON! ... I put it in the logs.&quot;</span>\n\n## Motivation\nWinston is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each instance of a winston logger can have multiple transports configured at different levels. For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.\n\nThere also seemed to be a lot of logging libraries out there that coupled their implementation of logging (i.e. how the logs are stored / indexed) to the API that they exposed to the programmer. This library aims to decouple those parts of the process to make it more flexible and extensible.\n\n## Usage\nThere are two different ways to use winston: directly via the default logger, or by instantiating your own Logger. The former is merely intended to be a convenient shared logger to use throughout your application if you so choose.\n\n* [Logging](#logging)\n  * [Using the Default Logger](#using-the-default-logger)\n  * [Instantiating your own Logger](#instantiating-your-own-logger)\n  * [Logging with Metadata](#logging-with-metadata)\n* [Transports](https://github.com/flatiron/winston/blob/master/docs/transports.md)\n* [Profiling](#profiling)\n* [Streaming Logs](#streaming-logs)\n* [Querying Logs](#querying-logs)  \n* [Exceptions](#exceptions)\n  * [Handling Uncaught Exceptions with winston](#handling-uncaught-exceptions-with-winston)\n  * [To Exit or Not to Exit](#to-exit-or-not-to-exit)\n* [Logging Levels](#logging-levels)\n  * [Using Logging Levels](#using-logging-levels)\n  * [Using Custom Logging Levels](#using-custom-logging-levels)\n* [Further Reading](#further-reading)\n  * [Events and Callbacks in Winston](#events-and-callbacks-in-winston)\n  * [Working with multiple Loggers in winston](#working-with-multiple-loggers-in-winston)\n  * [Using winston in a CLI tool](#using-winston-in-a-cli-tool)\n  * [Extending another object with Logging](#extending-another-object-with-logging)\n  * [Adding Custom Transports](#adding-custom-transports)\n\n## Logging\n\n### Using the Default Logger\nThe default logger is accessible through the winston module directly. Any method that you could call on an instance of a logger is available on the default logger:\n\n``` js\n  var winston = require(\'winston\');\n\n  winston.log(\'info\', \'Hello distributed log files!\');\n  winston.info(\'Hello again distributed logs\');\n```\n\nBy default, only the Console transport is set on the default logger. You can add or remove transports via the add() and remove() methods:\n\n``` js\n  winston.add(winston.transports.File, { filename: \'somefile.log\' });\n  winston.remove(winston.transports.Console);\n```\n\nFor more documenation about working with each individual transport supported by Winston see the "Working with Transports" section below.\n\n### Instantiating your own Logger\nIf you would prefer to manage the object lifetime of loggers you are free to instantiate them yourself:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)(),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nYou can work with this logger in the same way that you work with the default logger:\n\n``` js\n  //\n  // Logging\n  //\n  logger.log(\'info\', \'Hello distributed log files!\');\n  logger.info(\'Hello again distributed logs\');\n\n  //\n  // Adding / Removing Transports\n  //   (Yes It\'s chainable)\n  //\n  logger.add(winston.transports.File)\n        .remove(winston.transports.Console);\n```\n\n### Logging with Metadata\nIn addition to logging string messages, winston will also optionally log additional JSON metadata objects. Adding metadata is simple:\n\n``` js\n  winston.log(\'info\', \'Test Log Message\', { anything: \'This is metadata\' });\n```\n\nThe way these objects is stored varies from transport to transport (to best support the storage mechanisms offered). Here\'s a quick summary of how each transports handles metadata:\n\n1. __Console:__ Logged via util.inspect(meta)\n2. __File:__ Logged via util.inspect(meta)\n\n## Profiling\nIn addition to logging messages and metadata, winston also has a simple profiling mechanism implemented for any logger:\n\n``` js\n  //\n  // Start profile of \'test\'\n  // Remark: Consider using Date.now() with async operations\n  //\n  winston.profile(\'test\');\n\n  setTimeout(function () {\n    //\n    // Stop profile of \'test\'. Logging will now take place:\n    //   "17 Jan 21:00:00 - info: test duration=1000ms"\n    //\n    winston.profile(\'test\');\n  }, 1000);\n```\n\nAll profile messages are set to the \'info\' by default and both message and metadata are optional There are no plans in the Roadmap to make this configurable, but I\'m open to suggestions / issues.\n\n\n## Querying Logs\nWinston supports querying of logs with Loggly-like options.\nSpecifically: `File`, `Couchdb`, `Redis`, `Loggly`, `Nssocket`, and `Http`.\n\n``` js\n  var options = {\n    from: new Date - 24 * 60 * 60 * 1000,\n    until: new Date\n  };\n\n  //\n  // Find items logged between today and yesterday.\n  //\n  winston.query(options, function (err, results) {\n    if (err) {\n      throw err;\n    }\n    \n    console.log(results);\n  });\n```\n\n## Streaming Logs\nStreaming allows you to stream your logs back from your chosen transport.\n\n``` js\n  //\n  // Start at the end.\n  //\n  winston.stream({ start: -1 }).on(\'log\', function(log) {\n    console.log(log);\n  });\n```\n\n## Exceptions\n\n### Handling Uncaught Exceptions with winston\n\nWith `winston`, it is possible to catch and log `uncaughtException` events from your process. There are two distinct ways of enabling this functionality either through the default winston logger or your own logger instance.\n\nIf you want to use this feature with the default logger simply call `.handleExceptions()` with a transport instance.\n\n``` js\n  //\n  // You can add a separate exception logger by passing it to `.handleExceptions`\n  //\n  winston.handleExceptions(new winston.transports.File({ filename: \'path/to/exceptions.log\' }))\n\n  //\n  // Alternatively you can set `.handleExceptions` to true when adding transports to winston\n  //\n  winston.add(winston.transports.File, {\n    filename: \'path/to/all-logs.log\',\n    handleExceptions: true\n  });\n```\n\n### To Exit or Not to Exit\n\nby default, winston will exit after logging an uncaughtException. if this is not the behavior you want,\nset `exitOnError = false`\n\n``` js\n  var logger = new (winston.Logger)({ exitOnError: false });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = false;\n```\n\nWhen working with custom logger instances, you can pass in separate transports to the `exceptionHandlers` property or set `.handleExceptions` on any transport.\n\nExample 1\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new winston.transports.File({ filename: \'path/to/all-logs.log\' })\n    ]\n    exceptionHandlers: [\n      new winston.transports.File({ filename: \'path/to/exceptions.log\' })\n    ]\n  });\n```\n\nExample 2\n\n```\nvar logger = new winston.Logger({\n  transports: [\n    new winston.transports.Console({\n      handleExceptions: true,\n      json: true\n    })\n  ],\n  exitOnError: false\n});\n```\n\nThe `exitOnError` option can also be a function to prevent exit on only certain types of errors:\n\n``` js\n  function ignoreEpipe(err) {\n    return err.code !== \'EPIPE\';\n  }\n\n  var logger = new (winston.Logger)({ exitOnError: ignoreEpipe });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = ignoreEpipe;\n```\n\n## Logging Levels\n\n### Using Logging Levels\nSetting the level for your logging message can be accomplished in one of two ways. You can pass a string representing the logging level to the log() method or use the level specified methods defined on every winston Logger.\n\n``` js\n  //\n  // Any logger instance\n  //\n  logger.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'warn\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'error\', "127.0.0.1 - there\'s no place like home");\n  logger.info("127.0.0.1 - there\'s no place like home");\n  logger.warn("127.0.0.1 - there\'s no place like home");\n  logger.error("127.0.0.1 - there\'s no place like home");\n\n  //\n  // Default logger\n  //\n  winston.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  winston.info("127.0.0.1 - there\'s no place like home");\n```\n\nWinston allows you to set a `level` on each transport that specifies the level of messages this transport should log. For example, you could log only errors to the console, with the full logs in a file:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)({ level: \'error\' }),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nAs of 0.2.0, winston supports customizable logging levels, defaulting to [npm][0] style logging levels. Changing logging levels is easy:\n\n``` js\n  //\n  // Change levels on the default winston logger\n  //\n  winston.setLevels(winston.config.syslog.levels);\n\n  //\n  // Change levels on an instance of a logger\n  //\n  logger.setLevels(winston.config.syslog.levels);\n```\n\nCalling `.setLevels` on a logger will remove all of the previous helper methods for the old levels and define helper methods for the new levels. Thus, you should be careful about the logging statements you use when changing levels. For example, if you ran this code after changing to the syslog levels:\n\n``` js\n  //\n  // Logger does not have \'silly\' defined since that level is not in the syslog levels\n  //\n  logger.silly(\'some silly message\');\n```\n\n### Using Custom Logging Levels\nIn addition to the predefined `npm` and `syslog` levels available in Winston, you can also choose to define your own:\n\n``` js\n  var myCustomLevels = {\n    levels: {\n      foo: 0,\n      bar: 1,\n      baz: 2,\n      foobar: 3\n    },\n    colors: {\n      foo: \'blue\',\n      bar: \'green\',\n      baz: \'yellow\',\n      foobar: \'red\'\n    }\n  };\n\n  var customLevelLogger = new (winston.Logger)({ levels: myCustomLevels.levels });\n  customLevelLogger.foobar(\'some foobar level-ed message\');\n```\n\nAlthough there is slight repetition in this data structure, it enables simple encapsulation if you not to have colors. If you do wish to have colors, in addition to passing the levels to the Logger itself, you must make winston aware of them:\n\n``` js\n  //\n  // Make winston aware of these colors\n  //\n  winston.addColors(myCustomLevels.colors);\n```\n\nThis enables transports with the \'colorize\' option set to appropriately color the output of custom levels.\n\n## Further Reading\n\n### Events and Callbacks in Winston\nEach instance of winston.Logger is also an instance of an [EventEmitter][1]. A log event will be raised each time a transport successfully logs a message:\n\n``` js\n  logger.on(\'logging\', function (transport, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to [transport]\n  });\n\n  logger.info(\'CHILL WINSTON!\', { seriously: true });\n```\n\nIt is also worth mentioning that the logger also emits an \'error\' event which you should handle or suppress if you don\'t want unhandled exceptions:\n\n``` js\n  //\n  // Handle errors\n  //\n  logger.on(\'error\', function (err) { /* Do Something */ });\n\n  //\n  // Or just suppress them.\n  //\n  logger.emitErrs = false;\n```\n\nEvery logging method described in the previous section also takes an optional callback which will be called only when all of the transports have logged the specified message.\n\n``` js\n  logger.info(\'CHILL WINSTON!\', { seriously: true }, function (err, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to **every** transport.\n  });\n```\n\n### Working with multiple Loggers in winston\n\nOften in larger, more complex applications it is necessary to have multiple logger instances with different settings. Each logger is responsible for a different feature area (or category). This is exposed in `winston` in two ways: through `winston.loggers` and instances of `winston.Container`. In fact, `winston.loggers` is just a predefined instance of `winston.Container`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure the logger for `category1`\n  //\n  winston.loggers.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n\n  //\n  // Configure the logger for `category2`\n  //\n  winston.loggers.add(\'category2\', {\n    couchdb: {\n      host: \'127.0.0.1\',\n      port: 5984\n    }\n  });\n```\n\nNow that your loggers are setup you can require winston _in any file in your application_ and access these pre-configured loggers:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Grab your preconfigured logger\n  //\n  var category1 = winston.loggers.get(\'category1\');\n\n  category1.info(\'logging from your IoC container-based logger\');\n```\n\nIf you prefer to manage the `Container` yourself you can simply instantiate one:\n\n``` js\n  var winston = require(\'winston\'),\n      container = new winston.Container();\n\n  container.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n```\n\n### Sharing transports between Loggers in winston\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Setup transports to be shared across all loggers\n  // in three ways:\n  //\n  // 1. By setting it on the default Container\n  // 2. By passing `transports` into the constructor function of winston.Container\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n\n  //\n  // 1. By setting it on the default Container\n  //\n  winston.loggers.options.transports = [\n    // Setup your shared transports here\n  ];\n\n  //\n  // 2. By passing `transports` into the constructor function of winston.Container\n  //\n  var container = new winston.Container({\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  //\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n  winston.loggers.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  container.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n```\n\n### Using winston in a CLI tool\nA common use-case for logging is output to a CLI tool. Winston has a special helper method which will pretty print output from your CLI tool. Here\'s an example from the [require-analyzer][2] written by [Nodejitsu][3]:\n\n```\n  info:   require-analyzer starting in /Users/Charlie/Nodejitsu/require-analyzer\n  info:   Found existing dependencies\n  data:   {\n  data:     colors: \'0.x.x\',\n  data:     eyes: \'0.1.x\',\n  data:     findit: \'0.0.x\',\n  data:     npm: \'1.0.x\',\n  data:     optimist: \'0.2.x\',\n  data:     semver: \'1.0.x\',\n  data:     winston: \'0.2.x\'\n  data:   }\n  info:   Analyzing dependencies...\n  info:   Done analyzing raw dependencies\n  info:   Retrieved packages from npm\n  warn:   No additional dependencies found\n```\n\nConfiguring output for this style is easy, just use the `.cli()` method on `winston` or an instance of `winston.Logger`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure CLI output on the default logger\n  //\n  winston.cli();\n\n  //\n  // Configure CLI on an instance of winston.Logger\n  //\n  var logger = new winston.Logger({\n    transports: [\n      new (winston.transports.Console)()\n    ]\n  });\n\n  logger.cli();\n```\n\n### Extending another object with Logging\nOften in a given code base with lots of Loggers it is useful to add logging methods a different object so that these methods can be called with less syntax. Winston exposes this functionality via the \'extend\' method:\n\n``` js\n  var myObject = {};\n\n  logger.extend(myObject);\n\n  //\n  // You can now call logger methods on \'myObject\'\n  //\n  myObject.info(\'127.0.0.1 - there\'s no place like home\');\n```\n\n## Working with Transports\nRight now there are four transports supported by winston core. If you have a transport you would like to add either open an issue or fork and submit a pull request. Commits are welcome, but I\'ll give you extra street cred if you __add tests too :D__\n   \n1. __Console:__ Output to the terminal\n2. __Files:__ Append to a file\n3. __Loggly:__ Log to Logging-as-a-Service platform Loggly\n\n### Console Transport\n``` js\n  winston.add(winston.transports.Console, options)\n```\n\nThe Console transport takes two simple options:\n\n* __level:__ Level of messages that this transport should log (default \'info\').\n* __silent:__ Boolean flag indicating whether to suppress output (default false).\n* __colorize:__ Boolean flag indicating if we should colorize output (default false).\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default false). If function is specified, its return value will be used instead of timestamps.\n\n*Metadata:* Logged via util.inspect(meta);\n\n### File Transport\n``` js\n  winston.add(winston.transports.File, options)\n```\n\nThe File transport should really be the \'Stream\' transport since it will accept any [WritableStream][14]. It is named such because it will also accept filenames via the \'filename\' option:\n\n* __level:__ Level of messages that this transport should log.\n* __silent:__ Boolean flag indicating whether to suppress output.\n* __colorize:__ Boolean flag indicating if we should colorize output.\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default true). If function is specified, its return value will be used instead of timestamps.\n* __filename:__ The filename of the logfile to write output to.\n* __maxsize:__ Max size in bytes of the logfile, if the size is exceeded then a new file is created.\n* __maxFiles:__ Limit the number of files created when the size of the logfile is exceeded.\n* __stream:__ The WriteableStream to write output to.\n* __json:__ If true, messages will be logged as JSON (default true).\n\n*Metadata:* Logged via util.inspect(meta);\n\n### Loggly Transport\n``` js\n  var Loggly = require(\'winston-loggly\').Loggly\n  winston.add(Loggly, options);\n```\n\nThe Loggly transport is based on [Nodejitsu\'s][5] [node-loggly][6] implementation of the [Loggly][7] API. If you haven\'t heard of Loggly before, you should probably read their [value proposition][8]. The Loggly transport takes the following options. Either \'inputToken\' or \'inputName\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __subdomain:__ The subdomain of your Loggly account. *[required]*\n* __auth__: The authentication information for your Loggly account. *[required with inputName]*\n* __inputName:__ The name of the input this instance should log to.\n* __inputToken:__ The input token of the input this instance should log to.\n* __json:__ If true, messages will be sent to Loggly as JSON.\n\n*Metadata:* Logged in suggested [Loggly format][2]\n\n### Riak Transport\nAs of `0.3.0` the Riak transport has been broken out into a new module: [winston-riak][17]. Using it is just as easy:\n\n``` js\n  var Riak = require(\'winston-riak\').Riak;\n  winston.add(Riak, options);\n```\n\nIn addition to the options accepted by the [riak-js][3] [client][4], the Riak transport also accepts the following options. It is worth noting that the riak-js debug option is set to *false* by default:\n\n* __level:__ Level of messages that this transport should log.\n* __bucket:__ The name of the Riak bucket you wish your logs to be in or a function to generate bucket names dynamically.\n\n``` js\n  // Use a single bucket for all your logs\n  var singleBucketTransport = new (Riak)({ bucket: \'some-logs-go-here\' });\n  \n  // Generate a dynamic bucket based on the date and level\n  var dynamicBucketTransport = new (Riak)({\n    bucket: function (level, msg, meta, now) {\n      var d = new Date(now);\n      return level + [d.getDate(), d.getMonth(), d.getFullYear()].join(\'-\');\n    }\n  });\n```\n\n*Metadata:* Logged as JSON literal in Riak\n\n### MongoDB Transport\nAs of `0.3.0` the MongoDB transport has been broken out into a new module: [winston-mongodb][16]. Using it is just as easy:\n\n``` js\n  var MongoDB = require(\'winston-mongodb\').MongoDB;\n  winston.add(MongoDB, options);\n```\n\nThe MongoDB transport takes the following options. \'db\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n* __db:__ The name of the database you want to log to. *[required]*\n* __collection__: The name of the collection you want to store log messages in, defaults to \'log\'.\n* __safe:__ Boolean indicating if you want eventual consistency on your log messages, if set to true it requires an extra round trip to the server to ensure the write was committed, defaults to true.\n* __host:__ The host running MongoDB, defaults to localhost.\n* __port:__ The port on the host that MongoDB is running on, defaults to MongoDB\'s default port.\n\n*Metadata:* Logged as a native JSON object.\n\n### SimpleDB Transport\n\nThe [winston-simpledb][18] transport is just as easy:\n\n``` js\n  var SimpleDB = require(\'winston-simpledb\').SimpleDB;\n  winston.add(SimpleDB, options);\n```\n\nThe SimpleDB transport takes the following options. All items marked with an asterisk are required:\n\n* __awsAccessKey__:* your AWS Access Key\n* __secretAccessKey__:* your AWS Secret Access Key\n* __awsAccountId__:* your AWS Account Id\n* __domainName__:* a string or function that returns the domain name to log to\n* __region__:* the region your domain resides in\n* __itemName__: a string (\'uuid\', \'epoch\', \'timestamp\') or function that returns the item name to log\n\n*Metadata:* Logged as a native JSON object to the \'meta\' attribute of the item.\n\n### Mail Transport\n\nThe [winston-mail][19] is an email transport:\n\n``` js\n  var Mail = require(\'winston-mail\').Mail;\n  winston.add(Mail, options);\n```\n\nThe Mail transport uses [emailjs](https://github.com/eleith/emailjs) behind the scenes.  Options are the following:\n\n* __to:__ The address(es) you want to send to. *[required]*\n* __from:__ The address you want to send from. (default: `winston@[server-host-name]`)\n* __host:__ SMTP server hostname (default: localhost)\n* __port:__ SMTP port (default: 587 or 25)\n* __username__ User for server auth\n* __password__ Password for server auth\n* __ssl:__ Use SSL (boolean or object { key, ca, cert })\n* __tls:__ Boolean (if true, use starttls)\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n\n*Metadata:* Stringified as JSON in email.\n\n### Amazon SNS (Simple Notification System) Transport\n\nThe [winston-sns][21] transport uses amazon SNS to send emails, texts, or a bunch of other notifications.\n\n``` js\n  require(\'winston-sns\').SNS;\n  winston.add(winston.transports.SNS, options);\n```\n\nOptions:\n\n* __aws_key:__ Your Amazon Web Services Key. *[required]*\n* __aws_secret:__ Your Amazon Web Services Secret. *[required]*\n* __subscriber:__ Subscriber number - found in your SNS AWS Console, after clicking on a topic. Same as AWS Account ID. *[required]*\n* __topic_arn:__ Also found in SNS AWS Console - listed under a topic as Topic ARN. *[required]*\n* __region:__ AWS Region to use. Can be one of: `us-east-1`,`us-west-1`,`eu-west-1`,`ap-southeast-1`,`ap-northeast-1`,`us-gov-west-1`,`sa-east-1`. (default: `us-east-1`)\n* __subject:__ Subject for notifications. (default: "Winston Error Report")\n* __message:__ Message of notifications. Uses placeholders for level (%l), error message (%e), and metadata (%m). (default: "Level \'%l\' Error:\\n%e\\n\\nMetadata:\\n%m")\n* __level:__ lowest level this transport will log. (default: `info`)\n\n### Graylog2 Transport\n\n[winston-graylog2][22] is a Graylog2 transport:\n\n``` js\n  var Graylog2 = require(\'winston-graylog2\').Graylog2;\n  winston.add(Graylog2, options);\n```\n\nThe Graylog2 transport connects to a Graylog2 server over UDP using the following options:\n\n* __level:__ Level of messages this transport should log. (default: info)\n* __silent:__ Boolean flag indicating whether to suppress output. (default: false)\n\n* __graylogHost:__ IP address or hostname of the graylog2 server. (default: localhost)\n* __graylogPort:__ Port to send messages to on the graylog2 server. (default: 12201)\n* __graylogHostname:__ The hostname associated with graylog2 messages. (default: require(\'os\').hostname())\n* __graylogFacility:__ The graylog2 facility to send log messages.. (default: nodejs)\n\n*Metadata:* Stringified as JSON in the full message GELF field.\n\n### Adding Custom Transports\nAdding a custom transport (say for one of the datastore on the Roadmap) is actually pretty easy. All you need to do is accept a couple of options, set a name, implement a log() method, and add it to the set of transports exposed by winston.\n\n``` js\n  var util = require(\'util\'),\n      winston = require(\'winston\');\n\n  var CustomLogger = winston.transports.CustomerLogger = function (options) {\n    //\n    // Name this logger\n    //\n    this.name = \'customLogger\';\n\n    //\n    // Set the level from your options\n    //\n    this.level = options.level || \'info\';\n\n    //\n    // Configure your storage backing as you see fit\n    //\n  };\n\n  //\n  // Inherit from `winston.Transport` so you can take advantage\n  // of the base functionality and `.handleExceptions()`.\n  //\n  util.inherits(CustomLogger, winston.Transport);\n\n  CustomLogger.prototype.log = function (level, msg, meta, callback) {\n    //\n    // Store this message and metadata, maybe use some custom logic\n    // then callback indicating success.\n    //\n    callback(null, true);\n  };\n```\n\n### Inspirations\n1. [npm][0]\n2. [log.js][4]\n3. [socket.io][5]\n4. [node-rlog][6]\n5. [BigBrother][7]\n6. [Loggly][8]\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing winston\n```\n  [sudo] npm install winston\n```\n\n## Run Tests\nAll of the winston tests are written in [vows][9], and designed to be run with npm. \n\n``` bash\n  $ npm test\n```\n\n#### Author: [Charlie Robbins](http://twitter.com/indexzero)\n#### Contributors: [Matthew Bergman](http://github.com/fotoverite), [Marak Squires](http://github.com/marak)\n\n[0]: https://github.com/isaacs/npm/blob/master/lib/utils/log.js\n[1]: http://nodejs.org/docs/v0.3.5/api/events.html#events.EventEmitter\n[2]: http://github.com/nodejitsu/require-analyzer\n[3]: http://nodejitsu.com\n[4]: https://github.com/visionmedia/log.js\n[5]: http://socket.io\n[6]: https://github.com/jbrisbin/node-rlog\n[7]: https://github.com/feisty/BigBrother\n[8]: http://loggly.com\n[9]: http://vowsjs.org\n',
2726 silly resolved     readmeFilename: 'README.md',
2726 silly resolved     bugs: { url: 'https://github.com/flatiron/winston/issues' },
2726 silly resolved     homepage: 'https://github.com/flatiron/winston',
2726 silly resolved     _id: 'winston@0.6.2',
2726 silly resolved     _shasum: '4144fe2586cdc19a612bf8c035590132c9064bd2',
2726 silly resolved     _from: 'winston@0.6.2',
2726 silly resolved     _resolved: 'http://registry.npm.taobao.org/winston/download/winston-0.6.2.tgz' } ]
2727 info install winston@0.6.2 into /usr/local/lib/node_modules/forever/node_modules/cliff
2728 info installOne winston@0.6.2
2729 silly resolved [ { name: 'mocha',
2729 silly resolved     version: '1.11.0',
2729 silly resolved     description: 'simple, flexible, fun test framework',
2729 silly resolved     keywords: [ 'mocha', 'test', 'bdd', 'tdd', 'tap' ],
2729 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
2729 silly resolved     repository: { type: 'git', url: 'git://github.com/visionmedia/mocha.git' },
2729 silly resolved     main: './index',
2729 silly resolved     bin: { mocha: './bin/mocha', _mocha: './bin/_mocha' },
2729 silly resolved     engines: { node: '>= 0.4.x' },
2729 silly resolved     scripts: { test: 'make test-all' },
2729 silly resolved     dependencies:
2729 silly resolved      { commander: '0.6.1',
2729 silly resolved        growl: '1.7.x',
2729 silly resolved        jade: '0.26.3',
2729 silly resolved        diff: '1.0.2',
2729 silly resolved        debug: '*',
2729 silly resolved        mkdirp: '0.3.5',
2729 silly resolved        ms: '0.3.0',
2729 silly resolved        glob: '3.2.1' },
2729 silly resolved     devDependencies: { should: '*', 'coffee-script': '1.2' },
2729 silly resolved     readme: ' [![Build Status](https://secure.travis-ci.org/visionmedia/mocha.png)](http://travis-ci.org/visionmedia/mocha)\n\n  [![Mocha test framework](http://f.cl.ly/items/3l1k0n2A1U3M1I1L210p/Screen%20Shot%202012-02-24%20at%202.21.43%20PM.png)](http://visionmedia.github.com/mocha)\n\n  Mocha is a simple, flexible, fun JavaScript test framework for node.js and the browser. For more information view the [documentation](http://visionmedia.github.com/mocha).\n\n## Contributors\n\n```\n\n project  : mocha\n repo age : 1 year, 7 months\n active   : 272 days\n commits  : 1116\n files    : 123\n authors  :\n   504  TJ Holowaychuk          45.2%\n   389  Tj Holowaychuk          34.9%\n    31  Guillermo Rauch         2.8%\n    13  Attila Domokos          1.2%\n     9  John Firebaugh          0.8%\n     8  Jo Liss                 0.7%\n     7  Nathan Rajlich          0.6%\n     6  James Carr              0.5%\n     6  Brendan Nee             0.5%\n     5  Aaron Heckmann          0.4%\n     4  hokaccha                0.4%\n     4  Xavier Antoviaque       0.4%\n     4  Joshua Krall            0.4%\n     3  Wil Moore III           0.3%\n     3  Jesse Dailey            0.3%\n     3  Nathan Bowser           0.3%\n     3  Tyson Tate              0.3%\n     3  Cory Thomas             0.3%\n     3  Ryunosuke SATO          0.3%\n     3  Paul Miller             0.3%\n     3  Ben Lindsey             0.3%\n     2  Forbes Lindesay         0.2%\n     2  Konstantin Käfer        0.2%\n     2  Brian Beck              0.2%\n     2  Merrick Christensen     0.2%\n     2  Michael Riley           0.2%\n     2  David Henderson         0.2%\n     2  Nathan Alderson         0.2%\n     2  Paul Armstrong          0.2%\n     2  Pete Hawkins            0.2%\n     2  Quang Van               0.2%\n     2  Raynos                  0.2%\n     2  Jonas Westerlund        0.2%\n     2  Domenic Denicola        0.2%\n     2  Shawn Krisman           0.2%\n     2  Simon Gaeremynck        0.2%\n     2  FARKAS Máté             0.2%\n     2  Timo Tijhof             0.2%\n     2  Justin DuJardin         0.2%\n     2  Juzer Ali               0.2%\n     2  Ian Storm Taylor        0.2%\n     2  Arian Stolwijk          0.2%\n     2  domenic                 0.2%\n     1  Richard Dingwall        0.1%\n     1  Russ Bradberry          0.1%\n     1  Sasha Koss              0.1%\n     1  Seiya Konno             0.1%\n     1  Standa Opichal          0.1%\n     1  Steve Mason             0.1%\n     1  Will Langstroth         0.1%\n     1  Yanis Wang              0.1%\n     1  Yuest Wang              0.1%\n     1  abrkn                   0.1%\n     1  airportyh               0.1%\n     1  fengmk2                 0.1%\n     1  tgautier@yahoo.com      0.1%\n     1  traleig1                0.1%\n     1  vlad                    0.1%\n     1  yuitest                 0.1%\n     1  Adam Crabtree           0.1%\n     1  Andreas Brekken         0.1%\n     1  Atsuya Takagi           0.1%\n     1  Austin Birch            0.1%\n     1  Bjørge Næss             0.1%\n     1  Brian Moore             0.1%\n     1  Bryan Donovan           0.1%\n     1  Casey Foster            0.1%\n     1  Corey Butler            0.1%\n     1  Dave McKenna            0.1%\n     1  Fedor Indutny           0.1%\n     1  Florian Margaine        0.1%\n     1  Frederico Silva         0.1%\n     1  Fredrik Lindin          0.1%\n     1  Gareth Murphy           0.1%\n     1  Gavin Mogan             0.1%\n     1  Greg Perkins            0.1%\n     1  Harry Brundage          0.1%\n     1  Herman Junge            0.1%\n     1  Ian Young               0.1%\n     1  Ivan                    0.1%\n     1  Jaakko Salonen          0.1%\n     1  Jakub Nešetřil          0.1%\n     1  James Bowes             0.1%\n     1  James Lal               0.1%\n     1  Jason Barry             0.1%\n     1  Javier Aranda           0.1%\n     1  Jeff Kunkle             0.1%\n     1  Jonathan Creamer        0.1%\n     1  Jussi Virtanen          0.1%\n     1  Katie Gengler           0.1%\n     1  Kazuhito Hokamura       0.1%\n     1  Koen Punt               0.1%\n     1  Laszlo Bacsi            0.1%\n     1  László Bácsi            0.1%\n     1  Maciej Małecki          0.1%\n     1  Matt Robenolt           0.1%\n     1  Matt Smith              0.1%\n     1  Matthew Shanley         0.1%\n     1  Michael Schoonmaker     0.1%\n     1  Phil Sung               0.1%\n     1  R56                     0.1%\n```\n\n## Links\n\n  - [Google Group](http://groups.google.com/group/mochajs)\n  - [Wiki](https://github.com/visionmedia/mocha/wiki)\n  - Mocha [Extensions and reporters](https://github.com/visionmedia/mocha/wiki)\n',
2729 silly resolved     readmeFilename: 'Readme.md',
2729 silly resolved     bugs: { url: 'https://github.com/visionmedia/mocha/issues' },
2729 silly resolved     homepage: 'https://github.com/visionmedia/mocha',
2729 silly resolved     _id: 'mocha@1.11.0',
2729 silly resolved     _from: 'mocha@1.11.0' } ]
2730 info install mocha@1.11.0 into /usr/local/lib/node_modules/coffee
2731 info installOne mocha@1.11.0
2732 silly resolved [ { name: 'minimist',
2732 silly resolved     version: '0.0.10',
2732 silly resolved     description: 'parse argument options',
2732 silly resolved     main: 'index.js',
2732 silly resolved     devDependencies: { tape: '~1.0.4', tap: '~0.4.0' },
2732 silly resolved     scripts: { test: 'tap test/*.js' },
2732 silly resolved     testling: { files: 'test/*.js', browsers: [Object] },
2732 silly resolved     repository: { type: 'git', url: 'git://github.com/substack/minimist.git' },
2732 silly resolved     homepage: 'https://github.com/substack/minimist',
2732 silly resolved     keywords: [ 'argv', 'getopt', 'parser', 'optimist' ],
2732 silly resolved     author:
2732 silly resolved      { name: 'James Halliday',
2732 silly resolved        email: 'mail@substack.net',
2732 silly resolved        url: 'http://substack.net' },
2732 silly resolved     license: 'MIT',
2732 silly resolved     readme: '# minimist\n\nparse argument options\n\nThis module is the guts of optimist\'s argument parser without all the\nfanciful decoration.\n\n[![browser support](https://ci.testling.com/substack/minimist.png)](http://ci.testling.com/substack/minimist)\n\n[![build status](https://secure.travis-ci.org/substack/minimist.png)](http://travis-ci.org/substack/minimist)\n\n# example\n\n``` js\nvar argv = require(\'minimist\')(process.argv.slice(2));\nconsole.dir(argv);\n```\n\n```\n$ node example/parse.js -a beep -b boop\n{ _: [], a: \'beep\', b: \'boop\' }\n```\n\n```\n$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz\n{ _: [ \'foo\', \'bar\', \'baz\' ],\n  x: 3,\n  y: 4,\n  n: 5,\n  a: true,\n  b: true,\n  c: true,\n  beep: \'boop\' }\n```\n\n# methods\n\n``` js\nvar parseArgs = require(\'minimist\')\n```\n\n## var argv = parseArgs(args, opts={})\n\nReturn an argument object `argv` populated with the array arguments from `args`.\n\n`argv._` contains all the arguments that didn\'t have an option associated with\nthem.\n\nNumeric-looking arguments will be returned as numbers unless `opts.string` or\n`opts.boolean` is set for that argument name.\n\nAny arguments after `\'--\'` will not be parsed and will end up in `argv._`.\n\noptions can be:\n\n* `opts.string` - a string or array of strings argument names to always treat as\nstrings\n* `opts.boolean` - a string or array of strings to always treat as booleans\n* `opts.alias` - an object mapping string names to strings or arrays of string\nargument names to use as aliases\n* `opts.default` - an object mapping string argument names to default values\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install minimist\n```\n\n# license\n\nMIT\n',
2732 silly resolved     readmeFilename: 'readme.markdown',
2732 silly resolved     bugs: { url: 'https://github.com/substack/minimist/issues' },
2732 silly resolved     _id: 'minimist@0.0.10',
2732 silly resolved     _shasum: 'de3f98543dbf96082be48ad1a0c7cda836301dcf',
2732 silly resolved     _from: 'minimist@0.0.10',
2732 silly resolved     _resolved: 'http://registry.npm.taobao.org/minimist/download/minimist-0.0.10.tgz' } ]
2733 info install minimist@0.0.10 into /usr/local/lib/node_modules/forever/node_modules/optimist
2734 info installOne minimist@0.0.10
2735 silly resolved [ { name: 'async',
2735 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
2735 silly resolved     main: './lib/async',
2735 silly resolved     author: { name: 'Caolan McMahon' },
2735 silly resolved     version: '0.8.0',
2735 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
2735 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
2735 silly resolved     licenses: [ [Object] ],
2735 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
2735 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
2735 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
2735 silly resolved     homepage: 'https://github.com/caolan/async',
2735 silly resolved     _id: 'async@0.8.0',
2735 silly resolved     dist:
2735 silly resolved      { shasum: 'ee65ec77298c2ff1456bc4418a052d0f06435112',
2735 silly resolved        size: 19375,
2735 silly resolved        noattachment: false,
2735 silly resolved        tarball: 'http://registry.npm.taobao.org/async/download/async-0.8.0.tgz' },
2735 silly resolved     _from: 'async@0.8.0',
2735 silly resolved     _npmVersion: '1.4.3',
2735 silly resolved     _npmUser: { name: 'caolan', email: 'caolan.mcmahon@gmail.com' },
2735 silly resolved     maintainers: [ [Object] ],
2735 silly resolved     directories: {},
2735 silly resolved     publish_time: 1398785194028,
2735 silly resolved     _cnpm_publish_time: 1398785194028,
2735 silly resolved     _shasum: 'ee65ec77298c2ff1456bc4418a052d0f06435112',
2735 silly resolved     _resolved: 'http://registry.npm.taobao.org/async/download/async-0.8.0.tgz',
2735 silly resolved     readme: 'ERROR: No README data found!' } ]
2736 info install async@0.8.0 into /usr/local/lib/node_modules/node-inspector
2737 info installOne async@0.8.0
2738 silly resolved [ { name: 'optimist',
2738 silly resolved     version: '0.6.0',
2738 silly resolved     description: 'Light-weight option parsing with an argv hash. No optstrings attached.',
2738 silly resolved     main: './index.js',
2738 silly resolved     dependencies: { wordwrap: '~0.0.2', minimist: '~0.0.1' },
2738 silly resolved     devDependencies: { hashish: '~0.0.4', tap: '~0.4.0' },
2738 silly resolved     scripts: { test: 'tap ./test/*.js' },
2738 silly resolved     repository:
2738 silly resolved      { type: 'git',
2738 silly resolved        url: 'http://github.com/substack/node-optimist.git' },
2738 silly resolved     keywords:
2738 silly resolved      [ 'argument',
2738 silly resolved        'args',
2738 silly resolved        'option',
2738 silly resolved        'parser',
2738 silly resolved        'parsing',
2738 silly resolved        'cli',
2738 silly resolved        'command' ],
2738 silly resolved     author:
2738 silly resolved      { name: 'James Halliday',
2738 silly resolved        email: 'mail@substack.net',
2738 silly resolved        url: 'http://substack.net' },
2738 silly resolved     license: 'MIT/X11',
2738 silly resolved     engine: { node: '>=0.4' },
2738 silly resolved     readme: 'optimist\n========\n\nOptimist is a node.js library for option parsing for people who hate option\nparsing. More specifically, this module is for people who like all the --bells\nand -whistlz of program usage but think optstrings are a waste of time.\n\nWith optimist, option parsing doesn\'t have to suck (as much).\n\n[![build status](https://secure.travis-ci.org/substack/node-optimist.png)](http://travis-ci.org/substack/node-optimist)\n\nexamples\n========\n\nWith Optimist, the options are just a hash! No optstrings attached.\n-------------------------------------------------------------------\n\nxup.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\n\nif (argv.rif - 5 * argv.xup > 7.138) {\n    console.log(\'Buy more riffiwobbles\');\n}\nelse {\n    console.log(\'Sell the xupptumblers\');\n}\n````\n\n***\n\n    $ ./xup.js --rif=55 --xup=9.52\n    Buy more riffiwobbles\n    \n    $ ./xup.js --rif 12 --xup 8.1\n    Sell the xupptumblers\n\n![This one\'s optimistic.](http://substack.net/images/optimistic.png)\n\nBut wait! There\'s more! You can do short options:\n-------------------------------------------------\n \nshort.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\n````\n\n***\n\n    $ ./short.js -x 10 -y 21\n    (10,21)\n\nAnd booleans, both long and short (and grouped):\n----------------------------------\n\nbool.js:\n\n````javascript\n#!/usr/bin/env node\nvar util = require(\'util\');\nvar argv = require(\'optimist\').argv;\n\nif (argv.s) {\n    util.print(argv.fr ? \'Le chat dit: \' : \'The cat says: \');\n}\nconsole.log(\n    (argv.fr ? \'miaou\' : \'meow\') + (argv.p ? \'.\' : \'\')\n);\n````\n\n***\n\n    $ ./bool.js -s\n    The cat says: meow\n    \n    $ ./bool.js -sp\n    The cat says: meow.\n\n    $ ./bool.js -sp --fr\n    Le chat dit: miaou.\n\nAnd non-hypenated options too! Just use `argv._`!\n-------------------------------------------------\n \nnonopt.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\nconsole.log(argv._);\n````\n\n***\n\n    $ ./nonopt.js -x 6.82 -y 3.35 moo\n    (6.82,3.35)\n    [ \'moo\' ]\n    \n    $ ./nonopt.js foo -x 0.54 bar -y 1.12 baz\n    (0.54,1.12)\n    [ \'foo\', \'bar\', \'baz\' ]\n\nPlus, Optimist comes with .usage() and .demand()!\n-------------------------------------------------\n\ndivide.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Usage: $0 -x [num] -y [num]\')\n    .demand([\'x\',\'y\'])\n    .argv;\n\nconsole.log(argv.x / argv.y);\n````\n\n***\n \n    $ ./divide.js -x 55 -y 11\n    5\n    \n    $ node ./divide.js -x 4.91 -z 2.51\n    Usage: node ./divide.js -x [num] -y [num]\n\n    Options:\n      -x  [required]\n      -y  [required]\n\n    Missing required arguments: y\n\nEVEN MORE HOLY COW\n------------------\n\ndefault_singles.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default(\'x\', 10)\n    .default(\'y\', 10)\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_singles.js -x 5\n    15\n\ndefault_hash.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default({ x : 10, y : 10 })\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_hash.js -y 7\n    17\n\nAnd if you really want to get all descriptive about it...\n---------------------------------------------------------\n\nboolean_single.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean(\'v\')\n    .argv\n;\nconsole.dir(argv);\n````\n\n***\n\n    $ ./boolean_single.js -v foo bar baz\n    true\n    [ \'bar\', \'baz\', \'foo\' ]\n\nboolean_double.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean([\'x\',\'y\',\'z\'])\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]);\nconsole.dir(argv._);\n````\n\n***\n\n    $ ./boolean_double.js -x -z one two three\n    [ true, false, true ]\n    [ \'one\', \'two\', \'three\' ]\n\nOptimist is here to help...\n---------------------------\n\nYou can describe parameters for help messages and set aliases. Optimist figures\nout how to format a handy help string automatically.\n\nline_count.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Count the lines in a file.\\nUsage: $0\')\n    .demand(\'f\')\n    .alias(\'f\', \'file\')\n    .describe(\'f\', \'Load a file\')\n    .argv\n;\n\nvar fs = require(\'fs\');\nvar s = fs.createReadStream(argv.file);\n\nvar lines = 0;\ns.on(\'data\', function (buf) {\n    lines += buf.toString().match(/\\n/g).length;\n});\n\ns.on(\'end\', function () {\n    console.log(lines);\n});\n````\n\n***\n\n    $ node line_count.js\n    Count the lines in a file.\n    Usage: node ./line_count.js\n\n    Options:\n      -f, --file  Load a file  [required]\n\n    Missing required arguments: f\n\n    $ node line_count.js --file line_count.js \n    20\n    \n    $ node line_count.js -f line_count.js \n    20\n\nmethods\n=======\n\nBy itself,\n\n````javascript\nrequire(\'optimist\').argv\n`````\n\nwill use `process.argv` array to construct the `argv` object.\n\nYou can pass in the `process.argv` yourself:\n\n````javascript\nrequire(\'optimist\')([ \'-x\', \'1\', \'-y\', \'2\' ]).argv\n````\n\nor use .parse() to do the same thing:\n\n````javascript\nrequire(\'optimist\').parse([ \'-x\', \'1\', \'-y\', \'2\' ])\n````\n\nThe rest of these methods below come in just before the terminating `.argv`.\n\n.alias(key, alias)\n------------------\n\nSet key names as equivalent such that updates to a key will propagate to aliases\nand vice-versa.\n\nOptionally `.alias()` can take an object that maps keys to aliases.\n\n.default(key, value)\n--------------------\n\nSet `argv[key]` to `value` if no option was specified on `process.argv`.\n\nOptionally `.default()` can take an object that maps keys to default values.\n\n.demand(key)\n------------\n\nIf `key` is a string, show the usage information and exit if `key` wasn\'t\nspecified in `process.argv`.\n\nIf `key` is a number, demand at least as many non-option arguments, which show\nup in `argv._`.\n\nIf `key` is an Array, demand each element.\n\n.describe(key, desc)\n--------------------\n\nDescribe a `key` for the generated usage information.\n\nOptionally `.describe()` can take an object that maps keys to descriptions.\n\n.options(key, opt)\n------------------\n\nInstead of chaining together `.alias().demand().default()`, you can specify\nkeys in `opt` for each of the chainable methods.\n\nFor example:\n\n````javascript\nvar argv = require(\'optimist\')\n    .options(\'f\', {\n        alias : \'file\',\n        default : \'/etc/passwd\',\n    })\n    .argv\n;\n````\n\nis the same as\n\n````javascript\nvar argv = require(\'optimist\')\n    .alias(\'f\', \'file\')\n    .default(\'f\', \'/etc/passwd\')\n    .argv\n;\n````\n\nOptionally `.options()` can take an object that maps keys to `opt` parameters.\n\n.usage(message)\n---------------\n\nSet a usage message to show which commands to use. Inside `message`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\n\n.check(fn)\n----------\n\nCheck that certain conditions are met in the provided arguments.\n\nIf `fn` throws or returns `false`, show the thrown error, usage information, and\nexit.\n\n.boolean(key)\n-------------\n\nInterpret `key` as a boolean. If a non-flag option follows `key` in\n`process.argv`, that string won\'t get set as the value of `key`.\n\nIf `key` never shows up as a flag in `process.arguments`, `argv[key]` will be\n`false`.\n\nIf `key` is an Array, interpret all the elements as booleans.\n\n.string(key)\n------------\n\nTell the parser logic not to interpret `key` as a number or boolean.\nThis can be useful if you need to preserve leading zeros in an input.\n\nIf `key` is an Array, interpret all the elements as strings.\n\n.wrap(columns)\n--------------\n\nFormat usage output to wrap at `columns` many columns.\n\n.help()\n-------\n\nReturn the generated usage string.\n\n.showHelp(fn=console.error)\n---------------------------\n\nPrint the usage data using `fn` for printing.\n\n.parse(args)\n------------\n\nParse `args` instead of `process.argv`. Returns the `argv` object.\n\n.argv\n-----\n\nGet the arguments as a plain old object.\n\nArguments without a corresponding flag show up in the `argv._` array.\n\nThe script name or node command is available at `argv.$0` similarly to how `$0`\nworks in bash or perl.\n\nparsing tricks\n==============\n\nstop parsing\n------------\n\nUse `--` to stop parsing flags and stuff the remainder into `argv._`.\n\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n    { _: [ \'-c\', \'3\', \'-d\', \'4\' ],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: 1,\n      b: 2 }\n\nnegate fields\n-------------\n\nIf you want to explicity set a field to false instead of just leaving it\nundefined or to override a default you can do `--no-key`.\n\n    $ node examples/reflect.js -a --no-b\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: true,\n      b: false }\n\nnumbers\n-------\n\nEvery argument that looks like a number (`!isNaN(Number(arg))`) is converted to\none. This way you can just `net.createConnection(argv.port)` and you can add\nnumbers out of `argv` with `+` without having that mean concatenation,\nwhich is super frustrating.\n\nduplicates\n----------\n\nIf you specify a flag multiple times it will get turned into an array containing\nall the values in order.\n\n    $ node examples/reflect.js -x 5 -x 8 -x 0\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n        x: [ 5, 8, 0 ] }\n\ndot notation\n------------\n\nWhen you use dots (`.`s) in argument names, an implicit object path is assumed.\nThis lets you organize arguments into nested objects.\n\n     $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n     { _: [],\n       \'$0\': \'node ./examples/reflect.js\',\n         foo: { bar: { baz: 33 }, quux: 5 } }\n\nshort numbers\n-------------\n\nShort numeric `head -n5` style argument work too:\n\n    $ node reflect.js -n123 -m456\n    { \'3\': true,\n      \'6\': true,\n      _: [],\n      \'$0\': \'node ./reflect.js\',\n      n: 123,\n      m: 456 }\n\ninstallation\n============\n\nWith [npm](http://github.com/isaacs/npm), just do:\n    npm install optimist\n \nor clone this project on github:\n\n    git clone http://github.com/substack/node-optimist.git\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso),\njust do:\n    \n    expresso\n\ninspired By\n===========\n\nThis module is loosely inspired by Perl\'s\n[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm).\n',
2738 silly resolved     readmeFilename: 'readme.markdown',
2738 silly resolved     bugs: { url: 'https://github.com/substack/node-optimist/issues' },
2738 silly resolved     homepage: 'https://github.com/substack/node-optimist',
2738 silly resolved     _id: 'optimist@0.6.0',
2738 silly resolved     _shasum: '69424826f3405f79f142e6fc3d9ae58d4dbb9200',
2738 silly resolved     _from: 'optimist@0.6.0',
2738 silly resolved     _resolved: 'http://registry.npm.taobao.org/optimist/download/optimist-0.6.0.tgz' } ]
2739 info install optimist@0.6.0 into /usr/local/lib/node_modules/forever/node_modules/nconf
2740 info installOne optimist@0.6.0
2741 silly resolved [ { name: 'optimist',
2741 silly resolved     version: '0.6.0',
2741 silly resolved     description: 'Light-weight option parsing with an argv hash. No optstrings attached.',
2741 silly resolved     main: './index.js',
2741 silly resolved     dependencies: { wordwrap: '~0.0.2', minimist: '~0.0.1' },
2741 silly resolved     devDependencies: { hashish: '~0.0.4', tap: '~0.4.0' },
2741 silly resolved     scripts: { test: 'tap ./test/*.js' },
2741 silly resolved     repository:
2741 silly resolved      { type: 'git',
2741 silly resolved        url: 'http://github.com/substack/node-optimist.git' },
2741 silly resolved     keywords:
2741 silly resolved      [ 'argument',
2741 silly resolved        'args',
2741 silly resolved        'option',
2741 silly resolved        'parser',
2741 silly resolved        'parsing',
2741 silly resolved        'cli',
2741 silly resolved        'command' ],
2741 silly resolved     author:
2741 silly resolved      { name: 'James Halliday',
2741 silly resolved        email: 'mail@substack.net',
2741 silly resolved        url: 'http://substack.net' },
2741 silly resolved     license: 'MIT/X11',
2741 silly resolved     engine: { node: '>=0.4' },
2741 silly resolved     readme: 'optimist\n========\n\nOptimist is a node.js library for option parsing for people who hate option\nparsing. More specifically, this module is for people who like all the --bells\nand -whistlz of program usage but think optstrings are a waste of time.\n\nWith optimist, option parsing doesn\'t have to suck (as much).\n\n[![build status](https://secure.travis-ci.org/substack/node-optimist.png)](http://travis-ci.org/substack/node-optimist)\n\nexamples\n========\n\nWith Optimist, the options are just a hash! No optstrings attached.\n-------------------------------------------------------------------\n\nxup.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\n\nif (argv.rif - 5 * argv.xup > 7.138) {\n    console.log(\'Buy more riffiwobbles\');\n}\nelse {\n    console.log(\'Sell the xupptumblers\');\n}\n````\n\n***\n\n    $ ./xup.js --rif=55 --xup=9.52\n    Buy more riffiwobbles\n    \n    $ ./xup.js --rif 12 --xup 8.1\n    Sell the xupptumblers\n\n![This one\'s optimistic.](http://substack.net/images/optimistic.png)\n\nBut wait! There\'s more! You can do short options:\n-------------------------------------------------\n \nshort.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\n````\n\n***\n\n    $ ./short.js -x 10 -y 21\n    (10,21)\n\nAnd booleans, both long and short (and grouped):\n----------------------------------\n\nbool.js:\n\n````javascript\n#!/usr/bin/env node\nvar util = require(\'util\');\nvar argv = require(\'optimist\').argv;\n\nif (argv.s) {\n    util.print(argv.fr ? \'Le chat dit: \' : \'The cat says: \');\n}\nconsole.log(\n    (argv.fr ? \'miaou\' : \'meow\') + (argv.p ? \'.\' : \'\')\n);\n````\n\n***\n\n    $ ./bool.js -s\n    The cat says: meow\n    \n    $ ./bool.js -sp\n    The cat says: meow.\n\n    $ ./bool.js -sp --fr\n    Le chat dit: miaou.\n\nAnd non-hypenated options too! Just use `argv._`!\n-------------------------------------------------\n \nnonopt.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\nconsole.log(argv._);\n````\n\n***\n\n    $ ./nonopt.js -x 6.82 -y 3.35 moo\n    (6.82,3.35)\n    [ \'moo\' ]\n    \n    $ ./nonopt.js foo -x 0.54 bar -y 1.12 baz\n    (0.54,1.12)\n    [ \'foo\', \'bar\', \'baz\' ]\n\nPlus, Optimist comes with .usage() and .demand()!\n-------------------------------------------------\n\ndivide.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Usage: $0 -x [num] -y [num]\')\n    .demand([\'x\',\'y\'])\n    .argv;\n\nconsole.log(argv.x / argv.y);\n````\n\n***\n \n    $ ./divide.js -x 55 -y 11\n    5\n    \n    $ node ./divide.js -x 4.91 -z 2.51\n    Usage: node ./divide.js -x [num] -y [num]\n\n    Options:\n      -x  [required]\n      -y  [required]\n\n    Missing required arguments: y\n\nEVEN MORE HOLY COW\n------------------\n\ndefault_singles.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default(\'x\', 10)\n    .default(\'y\', 10)\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_singles.js -x 5\n    15\n\ndefault_hash.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default({ x : 10, y : 10 })\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_hash.js -y 7\n    17\n\nAnd if you really want to get all descriptive about it...\n---------------------------------------------------------\n\nboolean_single.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean(\'v\')\n    .argv\n;\nconsole.dir(argv);\n````\n\n***\n\n    $ ./boolean_single.js -v foo bar baz\n    true\n    [ \'bar\', \'baz\', \'foo\' ]\n\nboolean_double.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean([\'x\',\'y\',\'z\'])\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]);\nconsole.dir(argv._);\n````\n\n***\n\n    $ ./boolean_double.js -x -z one two three\n    [ true, false, true ]\n    [ \'one\', \'two\', \'three\' ]\n\nOptimist is here to help...\n---------------------------\n\nYou can describe parameters for help messages and set aliases. Optimist figures\nout how to format a handy help string automatically.\n\nline_count.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Count the lines in a file.\\nUsage: $0\')\n    .demand(\'f\')\n    .alias(\'f\', \'file\')\n    .describe(\'f\', \'Load a file\')\n    .argv\n;\n\nvar fs = require(\'fs\');\nvar s = fs.createReadStream(argv.file);\n\nvar lines = 0;\ns.on(\'data\', function (buf) {\n    lines += buf.toString().match(/\\n/g).length;\n});\n\ns.on(\'end\', function () {\n    console.log(lines);\n});\n````\n\n***\n\n    $ node line_count.js\n    Count the lines in a file.\n    Usage: node ./line_count.js\n\n    Options:\n      -f, --file  Load a file  [required]\n\n    Missing required arguments: f\n\n    $ node line_count.js --file line_count.js \n    20\n    \n    $ node line_count.js -f line_count.js \n    20\n\nmethods\n=======\n\nBy itself,\n\n````javascript\nrequire(\'optimist\').argv\n`````\n\nwill use `process.argv` array to construct the `argv` object.\n\nYou can pass in the `process.argv` yourself:\n\n````javascript\nrequire(\'optimist\')([ \'-x\', \'1\', \'-y\', \'2\' ]).argv\n````\n\nor use .parse() to do the same thing:\n\n````javascript\nrequire(\'optimist\').parse([ \'-x\', \'1\', \'-y\', \'2\' ])\n````\n\nThe rest of these methods below come in just before the terminating `.argv`.\n\n.alias(key, alias)\n------------------\n\nSet key names as equivalent such that updates to a key will propagate to aliases\nand vice-versa.\n\nOptionally `.alias()` can take an object that maps keys to aliases.\n\n.default(key, value)\n--------------------\n\nSet `argv[key]` to `value` if no option was specified on `process.argv`.\n\nOptionally `.default()` can take an object that maps keys to default values.\n\n.demand(key)\n------------\n\nIf `key` is a string, show the usage information and exit if `key` wasn\'t\nspecified in `process.argv`.\n\nIf `key` is a number, demand at least as many non-option arguments, which show\nup in `argv._`.\n\nIf `key` is an Array, demand each element.\n\n.describe(key, desc)\n--------------------\n\nDescribe a `key` for the generated usage information.\n\nOptionally `.describe()` can take an object that maps keys to descriptions.\n\n.options(key, opt)\n------------------\n\nInstead of chaining together `.alias().demand().default()`, you can specify\nkeys in `opt` for each of the chainable methods.\n\nFor example:\n\n````javascript\nvar argv = require(\'optimist\')\n    .options(\'f\', {\n        alias : \'file\',\n        default : \'/etc/passwd\',\n    })\n    .argv\n;\n````\n\nis the same as\n\n````javascript\nvar argv = require(\'optimist\')\n    .alias(\'f\', \'file\')\n    .default(\'f\', \'/etc/passwd\')\n    .argv\n;\n````\n\nOptionally `.options()` can take an object that maps keys to `opt` parameters.\n\n.usage(message)\n---------------\n\nSet a usage message to show which commands to use. Inside `message`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\n\n.check(fn)\n----------\n\nCheck that certain conditions are met in the provided arguments.\n\nIf `fn` throws or returns `false`, show the thrown error, usage information, and\nexit.\n\n.boolean(key)\n-------------\n\nInterpret `key` as a boolean. If a non-flag option follows `key` in\n`process.argv`, that string won\'t get set as the value of `key`.\n\nIf `key` never shows up as a flag in `process.arguments`, `argv[key]` will be\n`false`.\n\nIf `key` is an Array, interpret all the elements as booleans.\n\n.string(key)\n------------\n\nTell the parser logic not to interpret `key` as a number or boolean.\nThis can be useful if you need to preserve leading zeros in an input.\n\nIf `key` is an Array, interpret all the elements as strings.\n\n.wrap(columns)\n--------------\n\nFormat usage output to wrap at `columns` many columns.\n\n.help()\n-------\n\nReturn the generated usage string.\n\n.showHelp(fn=console.error)\n---------------------------\n\nPrint the usage data using `fn` for printing.\n\n.parse(args)\n------------\n\nParse `args` instead of `process.argv`. Returns the `argv` object.\n\n.argv\n-----\n\nGet the arguments as a plain old object.\n\nArguments without a corresponding flag show up in the `argv._` array.\n\nThe script name or node command is available at `argv.$0` similarly to how `$0`\nworks in bash or perl.\n\nparsing tricks\n==============\n\nstop parsing\n------------\n\nUse `--` to stop parsing flags and stuff the remainder into `argv._`.\n\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n    { _: [ \'-c\', \'3\', \'-d\', \'4\' ],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: 1,\n      b: 2 }\n\nnegate fields\n-------------\n\nIf you want to explicity set a field to false instead of just leaving it\nundefined or to override a default you can do `--no-key`.\n\n    $ node examples/reflect.js -a --no-b\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: true,\n      b: false }\n\nnumbers\n-------\n\nEvery argument that looks like a number (`!isNaN(Number(arg))`) is converted to\none. This way you can just `net.createConnection(argv.port)` and you can add\nnumbers out of `argv` with `+` without having that mean concatenation,\nwhich is super frustrating.\n\nduplicates\n----------\n\nIf you specify a flag multiple times it will get turned into an array containing\nall the values in order.\n\n    $ node examples/reflect.js -x 5 -x 8 -x 0\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n        x: [ 5, 8, 0 ] }\n\ndot notation\n------------\n\nWhen you use dots (`.`s) in argument names, an implicit object path is assumed.\nThis lets you organize arguments into nested objects.\n\n     $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n     { _: [],\n       \'$0\': \'node ./examples/reflect.js\',\n         foo: { bar: { baz: 33 }, quux: 5 } }\n\nshort numbers\n-------------\n\nShort numeric `head -n5` style argument work too:\n\n    $ node reflect.js -n123 -m456\n    { \'3\': true,\n      \'6\': true,\n      _: [],\n      \'$0\': \'node ./reflect.js\',\n      n: 123,\n      m: 456 }\n\ninstallation\n============\n\nWith [npm](http://github.com/isaacs/npm), just do:\n    npm install optimist\n \nor clone this project on github:\n\n    git clone http://github.com/substack/node-optimist.git\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso),\njust do:\n    \n    expresso\n\ninspired By\n===========\n\nThis module is loosely inspired by Perl\'s\n[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm).\n',
2741 silly resolved     readmeFilename: 'readme.markdown',
2741 silly resolved     bugs: { url: 'https://github.com/substack/node-optimist/issues' },
2741 silly resolved     homepage: 'https://github.com/substack/node-optimist',
2741 silly resolved     _id: 'optimist@0.6.0',
2741 silly resolved     _shasum: '69424826f3405f79f142e6fc3d9ae58d4dbb9200',
2741 silly resolved     _from: 'optimist@0.6.0',
2741 silly resolved     _resolved: 'http://registry.npm.taobao.org/optimist/download/optimist-0.6.0.tgz' } ]
2742 info install optimist@0.6.0 into /usr/local/lib/node_modules/forever/node_modules/flatiron
2743 info installOne optimist@0.6.0
2744 silly resolved [ { name: 'iconv-lite',
2744 silly resolved     description: 'Convert character encodings in pure javascript.',
2744 silly resolved     version: '0.2.11',
2744 silly resolved     license: 'MIT',
2744 silly resolved     keywords: [ 'iconv', 'convert', 'charset' ],
2744 silly resolved     author: { name: 'Alexander Shtuchkin', email: 'ashtuchkin@gmail.com' },
2744 silly resolved     contributors:
2744 silly resolved      [ [Object],
2744 silly resolved        [Object],
2744 silly resolved        [Object],
2744 silly resolved        [Object],
2744 silly resolved        [Object],
2744 silly resolved        [Object],
2744 silly resolved        [Object],
2744 silly resolved        [Object],
2744 silly resolved        [Object],
2744 silly resolved        [Object] ],
2744 silly resolved     main: 'index.js',
2744 silly resolved     homepage: 'https://github.com/ashtuchkin/iconv-lite',
2744 silly resolved     repository:
2744 silly resolved      { type: 'git',
2744 silly resolved        url: 'git://github.com/ashtuchkin/iconv-lite.git' },
2744 silly resolved     engines: { node: '>=0.4.0' },
2744 silly resolved     scripts: { test: 'vows --spec' },
2744 silly resolved     devDependencies: { vows: '', iconv: '>=1.1' },
2744 silly resolved     readme: 'iconv-lite - pure javascript character encoding conversion\n======================================================================\n\n[![Build Status](https://secure.travis-ci.org/ashtuchkin/iconv-lite.png?branch=master)](http://travis-ci.org/ashtuchkin/iconv-lite)\n\n## Features\n\n*   Pure javascript. Doesn\'t need native code compilation.\n*   Easy API.\n*   Works on Windows and in sandboxed environments like [Cloud9](http://c9.io).\n*   Encoding is much faster than node-iconv (see below for performance comparison).\n\n## Usage\n\n    var iconv = require(\'iconv-lite\');\n    \n    // Convert from an encoded buffer to string.\n    str = iconv.decode(buf, \'win1251\');\n    \n    // Convert from string to an encoded buffer.\n    buf = iconv.encode("Sample input string", \'win1251\');\n\n    // Check if encoding is supported\n    iconv.encodingExists("us-ascii")\n\n\n## Supported encodings\n\n*   All node.js native encodings: \'utf8\', \'ucs2\', \'ascii\', \'binary\', \'base64\'\n*   All widespread single byte encodings: Windows 125x family, ISO-8859 family, \n    IBM/DOS codepages, Macintosh family, KOI8 family. \n    Aliases like \'latin1\', \'us-ascii\' also supported.\n*   Multibyte encodings: \'gbk\', \'gb2313\', \'Big5\', \'cp950\'.\n\nOthers are easy to add, see the source. Please, participate.\nMost encodings are generated from node-iconv. Thank you Ben Noordhuis and iconv authors!\n\nNot supported yet: EUC family, Shift_JIS.\n\n\n## Encoding/decoding speed\n\nComparison with node-iconv module (1000x256kb, on Ubuntu 12.04, Core i5/2.5 GHz, Node v0.8.7). \nNote: your results may vary, so please always check on your hardware.\n\n    operation             iconv@1.2.4   iconv-lite@0.2.4 \n    ----------------------------------------------------------\n    encode(\'win1251\')     ~115 Mb/s     ~230 Mb/s\n    decode(\'win1251\')     ~95 Mb/s      ~130 Mb/s\n\n\n## Notes\n\nWhen decoding, a \'binary\'-encoded string can be used as a source buffer.  \nUntranslatable characters are set to � or ?. No transliteration is currently supported, pull requests are welcome.\n\n## Testing\n\n    git clone git@github.com:ashtuchkin/iconv-lite.git\n    cd iconv-lite\n    npm install\n    npm test\n    \n    # To view performance:\n    node test/performance.js\n\n## TODO\n\n*   Support streaming character conversion, something like util.pipe(req, iconv.fromEncodingStream(\'latin1\')).\n*   Add more encodings.\n*   Add transliteration (best fit char).\n*   Add tests and correct support of variable-byte encodings (currently work is delegated to node).\n',
2744 silly resolved     readmeFilename: 'README.md',
2744 silly resolved     bugs: { url: 'https://github.com/ashtuchkin/iconv-lite/issues' },
2744 silly resolved     _id: 'iconv-lite@0.2.11',
2744 silly resolved     _from: 'iconv-lite@0.2.11' } ]
2745 info install iconv-lite@0.2.11 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt
2746 info installOne iconv-lite@0.2.11
2747 silly resolved [ { name: 'iconv-lite',
2747 silly resolved     description: 'Convert character encodings in pure javascript.',
2747 silly resolved     version: '0.2.11',
2747 silly resolved     license: 'MIT',
2747 silly resolved     keywords: [ 'iconv', 'convert', 'charset' ],
2747 silly resolved     author: { name: 'Alexander Shtuchkin', email: 'ashtuchkin@gmail.com' },
2747 silly resolved     contributors:
2747 silly resolved      [ [Object],
2747 silly resolved        [Object],
2747 silly resolved        [Object],
2747 silly resolved        [Object],
2747 silly resolved        [Object],
2747 silly resolved        [Object],
2747 silly resolved        [Object],
2747 silly resolved        [Object],
2747 silly resolved        [Object],
2747 silly resolved        [Object] ],
2747 silly resolved     main: 'index.js',
2747 silly resolved     homepage: 'https://github.com/ashtuchkin/iconv-lite',
2747 silly resolved     repository:
2747 silly resolved      { type: 'git',
2747 silly resolved        url: 'git://github.com/ashtuchkin/iconv-lite.git' },
2747 silly resolved     engines: { node: '>=0.4.0' },
2747 silly resolved     scripts: { test: 'vows --spec' },
2747 silly resolved     devDependencies: { vows: '', iconv: '>=1.1' },
2747 silly resolved     readme: 'iconv-lite - pure javascript character encoding conversion\n======================================================================\n\n[![Build Status](https://secure.travis-ci.org/ashtuchkin/iconv-lite.png?branch=master)](http://travis-ci.org/ashtuchkin/iconv-lite)\n\n## Features\n\n*   Pure javascript. Doesn\'t need native code compilation.\n*   Easy API.\n*   Works on Windows and in sandboxed environments like [Cloud9](http://c9.io).\n*   Encoding is much faster than node-iconv (see below for performance comparison).\n\n## Usage\n\n    var iconv = require(\'iconv-lite\');\n    \n    // Convert from an encoded buffer to string.\n    str = iconv.decode(buf, \'win1251\');\n    \n    // Convert from string to an encoded buffer.\n    buf = iconv.encode("Sample input string", \'win1251\');\n\n    // Check if encoding is supported\n    iconv.encodingExists("us-ascii")\n\n\n## Supported encodings\n\n*   All node.js native encodings: \'utf8\', \'ucs2\', \'ascii\', \'binary\', \'base64\'\n*   All widespread single byte encodings: Windows 125x family, ISO-8859 family, \n    IBM/DOS codepages, Macintosh family, KOI8 family. \n    Aliases like \'latin1\', \'us-ascii\' also supported.\n*   Multibyte encodings: \'gbk\', \'gb2313\', \'Big5\', \'cp950\'.\n\nOthers are easy to add, see the source. Please, participate.\nMost encodings are generated from node-iconv. Thank you Ben Noordhuis and iconv authors!\n\nNot supported yet: EUC family, Shift_JIS.\n\n\n## Encoding/decoding speed\n\nComparison with node-iconv module (1000x256kb, on Ubuntu 12.04, Core i5/2.5 GHz, Node v0.8.7). \nNote: your results may vary, so please always check on your hardware.\n\n    operation             iconv@1.2.4   iconv-lite@0.2.4 \n    ----------------------------------------------------------\n    encode(\'win1251\')     ~115 Mb/s     ~230 Mb/s\n    decode(\'win1251\')     ~95 Mb/s      ~130 Mb/s\n\n\n## Notes\n\nWhen decoding, a \'binary\'-encoded string can be used as a source buffer.  \nUntranslatable characters are set to � or ?. No transliteration is currently supported, pull requests are welcome.\n\n## Testing\n\n    git clone git@github.com:ashtuchkin/iconv-lite.git\n    cd iconv-lite\n    npm install\n    npm test\n    \n    # To view performance:\n    node test/performance.js\n\n## TODO\n\n*   Support streaming character conversion, something like util.pipe(req, iconv.fromEncodingStream(\'latin1\')).\n*   Add more encodings.\n*   Add transliteration (best fit char).\n*   Add tests and correct support of variable-byte encodings (currently work is delegated to node).\n',
2747 silly resolved     readmeFilename: 'README.md',
2747 silly resolved     bugs: { url: 'https://github.com/ashtuchkin/iconv-lite/issues' },
2747 silly resolved     _id: 'iconv-lite@0.2.11',
2747 silly resolved     _from: 'iconv-lite@0.2.11' } ]
2748 info install iconv-lite@0.2.11 into /usr/local/lib/node_modules/grunt
2749 info installOne iconv-lite@0.2.11
2750 silly resolved [ { name: 'winston',
2750 silly resolved     description: 'A multi-transport async logging library for Node.js',
2750 silly resolved     version: '0.7.2',
2750 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
2750 silly resolved     maintainers: [ [Object] ],
2750 silly resolved     repository: { type: 'git', url: 'https://github.com/flatiron/winston.git' },
2750 silly resolved     keywords: [ 'logging', 'sysadmin', 'tools' ],
2750 silly resolved     dependencies:
2750 silly resolved      { async: '0.2.x',
2750 silly resolved        colors: '0.6.x',
2750 silly resolved        cycle: '1.0.x',
2750 silly resolved        eyes: '0.1.x',
2750 silly resolved        pkginfo: '0.3.x',
2750 silly resolved        request: '2.16.x',
2750 silly resolved        'stack-trace': '0.0.x' },
2750 silly resolved     devDependencies: { vows: '0.7.x' },
2750 silly resolved     main: './lib/winston',
2750 silly resolved     scripts: { test: 'vows --spec --isolate' },
2750 silly resolved     engines: { node: '>= 0.6.0' },
2750 silly resolved     readme: '# winston [![Build Status](https://secure.travis-ci.org/flatiron/winston.png?branch=master)](http://travis-ci.org/flatiron/winston)\n\nA multi-transport async logging library for node.js. <span style="font-size:28px; font-weight:bold;">&quot;CHILL WINSTON! ... I put it in the logs.&quot;</span>\n\n## Motivation\nWinston is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each instance of a winston logger can have multiple transports configured at different levels. For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.\n\nThere also seemed to be a lot of logging libraries out there that coupled their implementation of logging (i.e. how the logs are stored / indexed) to the API that they exposed to the programmer. This library aims to decouple those parts of the process to make it more flexible and extensible.\n\n## Usage\nThere are two different ways to use winston: directly via the default logger, or by instantiating your own Logger. The former is merely intended to be a convenient shared logger to use throughout your application if you so choose.\n\n* [Logging](#logging)\n  * [Using the Default Logger](#using-the-default-logger)\n  * [Instantiating your own Logger](#instantiating-your-own-logger)\n  * [Logging with Metadata](#logging-with-metadata)\n  * [String interpolation ](#string-interpolation)\n* [Transports](https://github.com/flatiron/winston/blob/master/docs/transports.md)\n* [Profiling](#profiling)\n* [Streaming Logs](#streaming-logs)\n* [Querying Logs](#querying-logs)  \n* [Exceptions](#exceptions)\n  * [Handling Uncaught Exceptions with winston](#handling-uncaught-exceptions-with-winston)\n  * [To Exit or Not to Exit](#to-exit-or-not-to-exit)\n* [Logging Levels](#logging-levels)\n  * [Using Logging Levels](#using-logging-levels)\n  * [Using Custom Logging Levels](#using-custom-logging-levels)\n* [Further Reading](#further-reading)\n  * [Events and Callbacks in Winston](#events-and-callbacks-in-winston)\n  * [Working with multiple Loggers in winston](#working-with-multiple-loggers-in-winston)\n  * [Using winston in a CLI tool](#using-winston-in-a-cli-tool)\n  * [Extending another object with Logging](#extending-another-object-with-logging)\n* [Working with transports](#working-with-transports)\n\t* [Adding Custom Transports](#adding-custom-transports)\n* [Installation](#installation)\n* [Run Tests](#run-tests)\n\n\n## Logging\n\n### Using the Default Logger\nThe default logger is accessible through the winston module directly. Any method that you could call on an instance of a logger is available on the default logger:\n\n``` js\n  var winston = require(\'winston\');\n\n  winston.log(\'info\', \'Hello distributed log files!\');\n  winston.info(\'Hello again distributed logs\');\n```\n\nBy default, only the Console transport is set on the default logger. You can add or remove transports via the add() and remove() methods:\n\n``` js\n  winston.add(winston.transports.File, { filename: \'somefile.log\' });\n  winston.remove(winston.transports.Console);\n```\n\nFor more documentation about working with each individual transport supported by Winston see the [Working with transports](#working-with-transports) section below.\n\n### Instantiating your own Logger\nIf you would prefer to manage the object lifetime of loggers you are free to instantiate them yourself:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)(),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nYou can work with this logger in the same way that you work with the default logger:\n\n``` js\n  //\n  // Logging\n  //\n  logger.log(\'info\', \'Hello distributed log files!\');\n  logger.info(\'Hello again distributed logs\');\n\n  //\n  // Adding / Removing Transports\n  //   (Yes It\'s chainable)\n  //\n  logger.add(winston.transports.File)\n        .remove(winston.transports.Console);\n```\n\n### Logging with Metadata\nIn addition to logging string messages, winston will also optionally log additional JSON metadata objects. Adding metadata is simple:\n\n``` js\n  winston.log(\'info\', \'Test Log Message\', { anything: \'This is metadata\' });\n```\n\nThe way these objects is stored varies from transport to transport (to best support the storage mechanisms offered). Here\'s a quick summary of how each transports handles metadata:\n\n1. __Console:__ Logged via util.inspect(meta)\n2. __File:__ Logged via util.inspect(meta)\n\n## Profiling\nIn addition to logging messages and metadata, winston also has a simple profiling mechanism implemented for any logger:\n\n``` js\n  //\n  // Start profile of \'test\'\n  // Remark: Consider using Date.now() with async operations\n  //\n  winston.profile(\'test\');\n\n  setTimeout(function () {\n    //\n    // Stop profile of \'test\'. Logging will now take place:\n    //   "17 Jan 21:00:00 - info: test duration=1000ms"\n    //\n    winston.profile(\'test\');\n  }, 1000);\n```\n\nAll profile messages are set to the \'info\' by default and both message and metadata are optional There are no plans in the Roadmap to make this configurable, but I\'m open to suggestions / issues.\n\n### String interpolation\nThe `log` method provides the same string interpolation methods like [`util.format`][10].  \n\nThis allows for the following log messages.\n``` js\nlogger.log(\'info\', \'test message %s\', \'my string\');\n// info: test message my string\n\nlogger.log(\'info\', \'test message %d\', 123);\n// info: test message 123\n\nlogger.log(\'info\', \'test message %j\', {number: 123}, {});\n// info: test message {"number":123}\n// meta = {}\n\nlogger.log(\'info\', \'test message %s, %s\', \'first\', \'second\', {number: 123});\n// info: test message first, second\n// meta = {number: 123}\n\nlogger.log(\'info\', \'test message\', \'first\', \'second\', {number: 123});\n// info: test message first second\n// meta = {number: 123}\n\nlogger.log(\'info\', \'test message %s, %s\', \'first\', \'second\', {number: 123}, function();\n// info: test message first, second\n// meta = {numer: 123}\n// callback = function(){}\n\nlogger.log(\'info\', \'test message\', \'first\', \'second\', {number: 123}, function());\n// info: test message first second\n// meta = {numer: 123}\n// callback = function(){}\n```\n\n\n\n\n\n## Querying Logs\nWinston supports querying of logs with Loggly-like options.\nSpecifically: `File`, `Couchdb`, `Redis`, `Loggly`, `Nssocket`, and `Http`.\n\n``` js\n  var options = {\n    from: new Date - 24 * 60 * 60 * 1000,\n    until: new Date\n  };\n\n  //\n  // Find items logged between today and yesterday.\n  //\n  winston.query(options, function (err, results) {\n    if (err) {\n      throw err;\n    }\n    \n    console.log(results);\n  });\n```\n\n## Streaming Logs\nStreaming allows you to stream your logs back from your chosen transport.\n\n``` js\n  //\n  // Start at the end.\n  //\n  winston.stream({ start: -1 }).on(\'log\', function(log) {\n    console.log(log);\n  });\n```\n\n## Exceptions\n\n### Handling Uncaught Exceptions with winston\n\nWith `winston`, it is possible to catch and log `uncaughtException` events from your process. There are two distinct ways of enabling this functionality either through the default winston logger or your own logger instance.\n\nIf you want to use this feature with the default logger simply call `.handleExceptions()` with a transport instance.\n\n``` js\n  //\n  // You can add a separate exception logger by passing it to `.handleExceptions`\n  //\n  winston.handleExceptions(new winston.transports.File({ filename: \'path/to/exceptions.log\' }))\n\n  //\n  // Alternatively you can set `.handleExceptions` to true when adding transports to winston\n  //\n  winston.add(winston.transports.File, {\n    filename: \'path/to/all-logs.log\',\n    handleExceptions: true\n  });\n```\n\n### To Exit or Not to Exit\n\nby default, winston will exit after logging an uncaughtException. if this is not the behavior you want,\nset `exitOnError = false`\n\n``` js\n  var logger = new (winston.Logger)({ exitOnError: false });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = false;\n```\n\nWhen working with custom logger instances, you can pass in separate transports to the `exceptionHandlers` property or set `.handleExceptions` on any transport.\n\nExample 1\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new winston.transports.File({ filename: \'path/to/all-logs.log\' })\n    ]\n    exceptionHandlers: [\n      new winston.transports.File({ filename: \'path/to/exceptions.log\' })\n    ]\n  });\n```\n\nExample 2\n\n```\nvar logger = new winston.Logger({\n  transports: [\n    new winston.transports.Console({\n      handleExceptions: true,\n      json: true\n    })\n  ],\n  exitOnError: false\n});\n```\n\nThe `exitOnError` option can also be a function to prevent exit on only certain types of errors:\n\n``` js\n  function ignoreEpipe(err) {\n    return err.code !== \'EPIPE\';\n  }\n\n  var logger = new (winston.Logger)({ exitOnError: ignoreEpipe });\n\n  //\n  // or, like this:\n  //\n  logger.exitOnError = ignoreEpipe;\n```\n\n## Logging Levels\n\n### Using Logging Levels\nSetting the level for your logging message can be accomplished in one of two ways. You can pass a string representing the logging level to the log() method or use the level specified methods defined on every winston Logger.\n\n``` js\n  //\n  // Any logger instance\n  //\n  logger.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'warn\', "127.0.0.1 - there\'s no place like home");\n  logger.log(\'error\', "127.0.0.1 - there\'s no place like home");\n  logger.info("127.0.0.1 - there\'s no place like home");\n  logger.warn("127.0.0.1 - there\'s no place like home");\n  logger.error("127.0.0.1 - there\'s no place like home");\n\n  //\n  // Default logger\n  //\n  winston.log(\'info\', "127.0.0.1 - there\'s no place like home");\n  winston.info("127.0.0.1 - there\'s no place like home");\n```\n\nWinston allows you to set a `level` on each transport that specifies the level of messages this transport should log. For example, you could log only errors to the console, with the full logs in a file:\n\n``` js\n  var logger = new (winston.Logger)({\n    transports: [\n      new (winston.transports.Console)({ level: \'error\' }),\n      new (winston.transports.File)({ filename: \'somefile.log\' })\n    ]\n  });\n```\n\nAs of 0.2.0, winston supports customizable logging levels, defaulting to [npm][0] style logging levels. Changing logging levels is easy:\n\n``` js\n  //\n  // Change levels on the default winston logger\n  //\n  winston.setLevels(winston.config.syslog.levels);\n\n  //\n  // Change levels on an instance of a logger\n  //\n  logger.setLevels(winston.config.syslog.levels);\n```\n\nCalling `.setLevels` on a logger will remove all of the previous helper methods for the old levels and define helper methods for the new levels. Thus, you should be careful about the logging statements you use when changing levels. For example, if you ran this code after changing to the syslog levels:\n\n``` js\n  //\n  // Logger does not have \'silly\' defined since that level is not in the syslog levels\n  //\n  logger.silly(\'some silly message\');\n```\n\n### Using Custom Logging Levels\nIn addition to the predefined `npm` and `syslog` levels available in Winston, you can also choose to define your own:\n\n``` js\n  var myCustomLevels = {\n    levels: {\n      foo: 0,\n      bar: 1,\n      baz: 2,\n      foobar: 3\n    },\n    colors: {\n      foo: \'blue\',\n      bar: \'green\',\n      baz: \'yellow\',\n      foobar: \'red\'\n    }\n  };\n\n  var customLevelLogger = new (winston.Logger)({ levels: myCustomLevels.levels });\n  customLevelLogger.foobar(\'some foobar level-ed message\');\n```\n\nAlthough there is slight repetition in this data structure, it enables simple encapsulation if you not to have colors. If you do wish to have colors, in addition to passing the levels to the Logger itself, you must make winston aware of them:\n\n``` js\n  //\n  // Make winston aware of these colors\n  //\n  winston.addColors(myCustomLevels.colors);\n```\n\nThis enables transports with the \'colorize\' option set to appropriately color the output of custom levels.\n\n## Further Reading\n\n### Events and Callbacks in Winston\nEach instance of winston.Logger is also an instance of an [EventEmitter][1]. A log event will be raised each time a transport successfully logs a message:\n\n``` js\n  logger.on(\'logging\', function (transport, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to [transport]\n  });\n\n  logger.info(\'CHILL WINSTON!\', { seriously: true });\n```\n\nIt is also worth mentioning that the logger also emits an \'error\' event which you should handle or suppress if you don\'t want unhandled exceptions:\n\n``` js\n  //\n  // Handle errors\n  //\n  logger.on(\'error\', function (err) { /* Do Something */ });\n\n  //\n  // Or just suppress them.\n  //\n  logger.emitErrs = false;\n```\n\nEvery logging method described in the previous section also takes an optional callback which will be called only when all of the transports have logged the specified message.\n\n``` js\n  logger.info(\'CHILL WINSTON!\', { seriously: true }, function (err, level, msg, meta) {\n    // [msg] and [meta] have now been logged at [level] to **every** transport.\n  });\n```\n\n### Working with multiple Loggers in winston\n\nOften in larger, more complex applications it is necessary to have multiple logger instances with different settings. Each logger is responsible for a different feature area (or category). This is exposed in `winston` in two ways: through `winston.loggers` and instances of `winston.Container`. In fact, `winston.loggers` is just a predefined instance of `winston.Container`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure the logger for `category1`\n  //\n  winston.loggers.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\',\n      label: \'category one\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n\n  //\n  // Configure the logger for `category2`\n  //\n  winston.loggers.add(\'category2\', {\n    couchdb: {\n      host: \'127.0.0.1\',\n      port: 5984\n    }\n  });\n```\n\nNow that your loggers are setup you can require winston _in any file in your application_ and access these pre-configured loggers:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Grab your preconfigured logger\n  //\n  var category1 = winston.loggers.get(\'category1\');\n\n  category1.info(\'logging from your IoC container-based logger\');\n```\n\nIf you prefer to manage the `Container` yourself you can simply instantiate one:\n\n``` js\n  var winston = require(\'winston\'),\n      container = new winston.Container();\n\n  container.add(\'category1\', {\n    console: {\n      level: \'silly\',\n      colorize: \'true\'\n    },\n    file: {\n      filename: \'/path/to/some/file\'\n    }\n  });\n```\n\n### Sharing transports between Loggers in winston\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Setup transports to be shared across all loggers\n  // in three ways:\n  //\n  // 1. By setting it on the default Container\n  // 2. By passing `transports` into the constructor function of winston.Container\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n\n  //\n  // 1. By setting it on the default Container\n  //\n  winston.loggers.options.transports = [\n    // Setup your shared transports here\n  ];\n\n  //\n  // 2. By passing `transports` into the constructor function of winston.Container\n  //\n  var container = new winston.Container({\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  //\n  // 3. By passing `transports` into the `.get()` or `.add()` methods\n  //\n  winston.loggers.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n\n  container.add(\'some-category\', {\n    transports: [\n      // Setup your shared transports here\n    ]\n  });\n```\n\n### Using winston in a CLI tool\nA common use-case for logging is output to a CLI tool. Winston has a special helper method which will pretty print output from your CLI tool. Here\'s an example from the [require-analyzer][2] written by [Nodejitsu][3]:\n\n```\n  info:   require-analyzer starting in /Users/Charlie/Nodejitsu/require-analyzer\n  info:   Found existing dependencies\n  data:   {\n  data:     colors: \'0.x.x\',\n  data:     eyes: \'0.1.x\',\n  data:     findit: \'0.0.x\',\n  data:     npm: \'1.0.x\',\n  data:     optimist: \'0.2.x\',\n  data:     semver: \'1.0.x\',\n  data:     winston: \'0.2.x\'\n  data:   }\n  info:   Analyzing dependencies...\n  info:   Done analyzing raw dependencies\n  info:   Retrieved packages from npm\n  warn:   No additional dependencies found\n```\n\nConfiguring output for this style is easy, just use the `.cli()` method on `winston` or an instance of `winston.Logger`:\n\n``` js\n  var winston = require(\'winston\');\n\n  //\n  // Configure CLI output on the default logger\n  //\n  winston.cli();\n\n  //\n  // Configure CLI on an instance of winston.Logger\n  //\n  var logger = new winston.Logger({\n    transports: [\n      new (winston.transports.Console)()\n    ]\n  });\n\n  logger.cli();\n```\n\n### Extending another object with Logging\nOften in a given code base with lots of Loggers it is useful to add logging methods to a different object so that these methods can be called with less syntax. Winston exposes this functionality via the \'extend\' method:\n\n``` js\n  var myObject = {};\n\n  logger.extend(myObject);\n\n  //\n  // You can now call logger methods on \'myObject\'\n  //\n  myObject.info(\'127.0.0.1 - there\'s no place like home\');\n```\n\n## Working with Transports\nRight now there are four transports supported by winston core. If you have a transport you would like to add either open an issue or fork and submit a pull request. Commits are welcome, but I\'ll give you extra street cred if you __add tests too :D__\n   \n1. __Console:__ Output to the terminal\n2. __Files:__ Append to a file\n3. __Loggly:__ Log to Logging-as-a-Service platform Loggly\n\n### Console Transport\n``` js\n  winston.add(winston.transports.Console, options)\n```\n\nThe Console transport takes two simple options:\n\n* __level:__ Level of messages that this transport should log (default \'info\').\n* __silent:__ Boolean flag indicating whether to suppress output (default false).\n* __colorize:__ Boolean flag indicating if we should colorize output (default false).\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default false). If function is specified, its return value will be used instead of timestamps.\n\n*Metadata:* Logged via util.inspect(meta);\n\n### File Transport\n``` js\n  winston.add(winston.transports.File, options)\n```\n\nThe File transport should really be the \'Stream\' transport since it will accept any [WritableStream][14]. It is named such because it will also accept filenames via the \'filename\' option:\n\n* __level:__ Level of messages that this transport should log.\n* __silent:__ Boolean flag indicating whether to suppress output.\n* __colorize:__ Boolean flag indicating if we should colorize output.\n* __timestamp:__ Boolean flag indicating if we should prepend output with timestamps (default true). If function is specified, its return value will be used instead of timestamps.\n* __filename:__ The filename of the logfile to write output to.\n* __maxsize:__ Max size in bytes of the logfile, if the size is exceeded then a new file is created.\n* __maxFiles:__ Limit the number of files created when the size of the logfile is exceeded.\n* __stream:__ The WriteableStream to write output to.\n* __json:__ If true, messages will be logged as JSON (default true).\n\n*Metadata:* Logged via util.inspect(meta);\n\n### Loggly Transport\n``` js\n  var Loggly = require(\'winston-loggly\').Loggly\n  winston.add(Loggly, options);\n```\n\nThe Loggly transport is based on [Nodejitsu\'s][5] [node-loggly][6] implementation of the [Loggly][7] API. If you haven\'t heard of Loggly before, you should probably read their [value proposition][8]. The Loggly transport takes the following options. Either \'inputToken\' or \'inputName\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __subdomain:__ The subdomain of your Loggly account. *[required]*\n* __auth__: The authentication information for your Loggly account. *[required with inputName]*\n* __inputName:__ The name of the input this instance should log to.\n* __inputToken:__ The input token of the input this instance should log to.\n* __json:__ If true, messages will be sent to Loggly as JSON.\n\n*Metadata:* Logged in suggested [Loggly format][2]\n\n### Riak Transport\nAs of `0.3.0` the Riak transport has been broken out into a new module: [winston-riak][17]. Using it is just as easy:\n\n``` js\n  var Riak = require(\'winston-riak\').Riak;\n  winston.add(Riak, options);\n```\n\nIn addition to the options accepted by the [riak-js][3] [client][4], the Riak transport also accepts the following options. It is worth noting that the riak-js debug option is set to *false* by default:\n\n* __level:__ Level of messages that this transport should log.\n* __bucket:__ The name of the Riak bucket you wish your logs to be in or a function to generate bucket names dynamically.\n\n``` js\n  // Use a single bucket for all your logs\n  var singleBucketTransport = new (Riak)({ bucket: \'some-logs-go-here\' });\n  \n  // Generate a dynamic bucket based on the date and level\n  var dynamicBucketTransport = new (Riak)({\n    bucket: function (level, msg, meta, now) {\n      var d = new Date(now);\n      return level + [d.getDate(), d.getMonth(), d.getFullYear()].join(\'-\');\n    }\n  });\n```\n\n*Metadata:* Logged as JSON literal in Riak\n\n### MongoDB Transport\nAs of `0.3.0` the MongoDB transport has been broken out into a new module: [winston-mongodb][16]. Using it is just as easy:\n\n``` js\n  var MongoDB = require(\'winston-mongodb\').MongoDB;\n  winston.add(MongoDB, options);\n```\n\nThe MongoDB transport takes the following options. \'db\' is required:\n\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n* __db:__ The name of the database you want to log to. *[required]*\n* __collection__: The name of the collection you want to store log messages in, defaults to \'log\'.\n* __safe:__ Boolean indicating if you want eventual consistency on your log messages, if set to true it requires an extra round trip to the server to ensure the write was committed, defaults to true.\n* __host:__ The host running MongoDB, defaults to localhost.\n* __port:__ The port on the host that MongoDB is running on, defaults to MongoDB\'s default port.\n\n*Metadata:* Logged as a native JSON object.\n\n### SimpleDB Transport\n\nThe [winston-simpledb][18] transport is just as easy:\n\n``` js\n  var SimpleDB = require(\'winston-simpledb\').SimpleDB;\n  winston.add(SimpleDB, options);\n```\n\nThe SimpleDB transport takes the following options. All items marked with an asterisk are required:\n\n* __awsAccessKey__:* your AWS Access Key\n* __secretAccessKey__:* your AWS Secret Access Key\n* __awsAccountId__:* your AWS Account Id\n* __domainName__:* a string or function that returns the domain name to log to\n* __region__:* the region your domain resides in\n* __itemName__: a string (\'uuid\', \'epoch\', \'timestamp\') or function that returns the item name to log\n\n*Metadata:* Logged as a native JSON object to the \'meta\' attribute of the item.\n\n### Mail Transport\n\nThe [winston-mail][19] is an email transport:\n\n``` js\n  var Mail = require(\'winston-mail\').Mail;\n  winston.add(Mail, options);\n```\n\nThe Mail transport uses [emailjs](https://github.com/eleith/emailjs) behind the scenes.  Options are the following:\n\n* __to:__ The address(es) you want to send to. *[required]*\n* __from:__ The address you want to send from. (default: `winston@[server-host-name]`)\n* __host:__ SMTP server hostname (default: localhost)\n* __port:__ SMTP port (default: 587 or 25)\n* __username__ User for server auth\n* __password__ Password for server auth\n* __ssl:__ Use SSL (boolean or object { key, ca, cert })\n* __tls:__ Boolean (if true, use starttls)\n* __level:__ Level of messages that this transport should log. \n* __silent:__ Boolean flag indicating whether to suppress output.\n\n*Metadata:* Stringified as JSON in email.\n\n### Amazon SNS (Simple Notification System) Transport\n\nThe [winston-sns][21] transport uses amazon SNS to send emails, texts, or a bunch of other notifications.\n\n``` js\n  require(\'winston-sns\').SNS;\n  winston.add(winston.transports.SNS, options);\n```\n\nOptions:\n\n* __aws_key:__ Your Amazon Web Services Key. *[required]*\n* __aws_secret:__ Your Amazon Web Services Secret. *[required]*\n* __subscriber:__ Subscriber number - found in your SNS AWS Console, after clicking on a topic. Same as AWS Account ID. *[required]*\n* __topic_arn:__ Also found in SNS AWS Console - listed under a topic as Topic ARN. *[required]*\n* __region:__ AWS Region to use. Can be one of: `us-east-1`,`us-west-1`,`eu-west-1`,`ap-southeast-1`,`ap-northeast-1`,`us-gov-west-1`,`sa-east-1`. (default: `us-east-1`)\n* __subject:__ Subject for notifications. (default: "Winston Error Report")\n* __message:__ Message of notifications. Uses placeholders for level (%l), error message (%e), and metadata (%m). (default: "Level \'%l\' Error:\\n%e\\n\\nMetadata:\\n%m")\n* __level:__ lowest level this transport will log. (default: `info`)\n\n### Graylog2 Transport\n\n[winston-graylog2][22] is a Graylog2 transport:\n\n``` js\n  var Graylog2 = require(\'winston-graylog2\').Graylog2;\n  winston.add(Graylog2, options);\n```\n\nThe Graylog2 transport connects to a Graylog2 server over UDP using the following options:\n\n* __level:__ Level of messages this transport should log. (default: info)\n* __silent:__ Boolean flag indicating whether to suppress output. (default: false)\n\n* __graylogHost:__ IP address or hostname of the graylog2 server. (default: localhost)\n* __graylogPort:__ Port to send messages to on the graylog2 server. (default: 12201)\n* __graylogHostname:__ The hostname associated with graylog2 messages. (default: require(\'os\').hostname())\n* __graylogFacility:__ The graylog2 facility to send log messages.. (default: nodejs)\n\n*Metadata:* Stringified as JSON in the full message GELF field.\n\n### Papertrail Transport\n\n[winston-papertrail][23] is a Papertrail transport:\n\n``` js\n  var Papertrail = require(\'winston-papertrail\').Papertrail;\n  winston.add(Papertrail, options);\n```\n\nThe Papertrail transport connects to a [PapertrailApp log destination](https://papertrailapp.com) over TCP (TLS) using the following options:\n\n* __level:__ Level of messages this transport should log. (default: info)\n* __host:__ FQDN or IP address of the Papertrail endpoint.\n* __port:__ Port for the Papertrail log destination.\n* __hostname:__ The hostname associated with messages. (default: require(\'os\').hostname())\n* __program:__ The facility to send log messages.. (default: default)\n* __logFormat:__ a log formatting function with the signature `function(level, message)`, which allows custom formatting of the level or message prior to delivery\n\n*Metadata:* Logged as a native JSON object to the \'meta\' attribute of the item.\n\n### Adding Custom Transports\nAdding a custom transport (say for one of the datastore on the Roadmap) is actually pretty easy. All you need to do is accept a couple of options, set a name, implement a log() method, and add it to the set of transports exposed by winston.\n\n``` js\n  var util = require(\'util\'),\n      winston = require(\'winston\');\n\n  var CustomLogger = winston.transports.CustomerLogger = function (options) {\n    //\n    // Name this logger\n    //\n    this.name = \'customLogger\';\n\n    //\n    // Set the level from your options\n    //\n    this.level = options.level || \'info\';\n\n    //\n    // Configure your storage backing as you see fit\n    //\n  };\n\n  //\n  // Inherit from `winston.Transport` so you can take advantage\n  // of the base functionality and `.handleExceptions()`.\n  //\n  util.inherits(CustomLogger, winston.Transport);\n\n  CustomLogger.prototype.log = function (level, msg, meta, callback) {\n    //\n    // Store this message and metadata, maybe use some custom logic\n    // then callback indicating success.\n    //\n    callback(null, true);\n  };\n```\n\n### Inspirations\n1. [npm][0]\n2. [log.js][4]\n3. [socket.io][5]\n4. [node-rlog][6]\n5. [BigBrother][7]\n6. [Loggly][8]\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing winston\n```\n  [sudo] npm install winston\n```\n\n## Run Tests\nAll of the winston tests are written in [vows][9], and designed to be run with npm. \n\n``` bash\n  $ npm test\n```\n\n#### Author: [Charlie Robbins](http://twitter.com/indexzero)\n#### Contributors: [Matthew Bergman](http://github.com/fotoverite), [Marak Squires](http://github.com/marak)\n\n[0]: https://github.com/isaacs/npm/blob/master/lib/utils/log.js\n[1]: http://nodejs.org/docs/v0.3.5/api/events.html#events.EventEmitter\n[2]: http://github.com/nodejitsu/require-analyzer\n[3]: http://nodejitsu.com\n[4]: https://github.com/visionmedia/log.js\n[5]: http://socket.io\n[6]: https://github.com/jbrisbin/node-rlog\n[7]: https://github.com/feisty/BigBrother\n[8]: http://loggly.com\n[9]: http://vowsjs.org\n[10]: http://nodejs.org/api/util.html#util_util_format_format',
2750 silly resolved     readmeFilename: 'README.md',
2750 silly resolved     bugs: { url: 'https://github.com/flatiron/winston/issues' },
2750 silly resolved     homepage: 'https://github.com/flatiron/winston',
2750 silly resolved     _id: 'winston@0.7.2',
2750 silly resolved     _shasum: '2570ae1aa1d8a9401e8d5a88362e1cf936550ceb',
2750 silly resolved     _from: 'winston@0.7.2',
2750 silly resolved     _resolved: 'http://registry.npm.taobao.org/winston/download/winston-0.7.2.tgz' } ]
2751 info install winston@0.7.2 into /usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules/broadway
2752 info installOne winston@0.7.2
2753 silly resolved [ { name: 'minimist',
2753 silly resolved     version: '0.0.8',
2753 silly resolved     description: 'parse argument options',
2753 silly resolved     main: 'index.js',
2753 silly resolved     devDependencies: { tape: '~1.0.4', tap: '~0.4.0' },
2753 silly resolved     scripts: { test: 'tap test/*.js' },
2753 silly resolved     testling: { files: 'test/*.js', browsers: [Object] },
2753 silly resolved     repository: { type: 'git', url: 'git://github.com/substack/minimist.git' },
2753 silly resolved     homepage: 'https://github.com/substack/minimist',
2753 silly resolved     keywords: [ 'argv', 'getopt', 'parser', 'optimist' ],
2753 silly resolved     author:
2753 silly resolved      { name: 'James Halliday',
2753 silly resolved        email: 'mail@substack.net',
2753 silly resolved        url: 'http://substack.net' },
2753 silly resolved     license: 'MIT',
2753 silly resolved     readme: '# minimist\n\nparse argument options\n\nThis module is the guts of optimist\'s argument parser without all the\nfanciful decoration.\n\n[![browser support](https://ci.testling.com/substack/minimist.png)](http://ci.testling.com/substack/minimist)\n\n[![build status](https://secure.travis-ci.org/substack/minimist.png)](http://travis-ci.org/substack/minimist)\n\n# example\n\n``` js\nvar argv = require(\'minimist\')(process.argv.slice(2));\nconsole.dir(argv);\n```\n\n```\n$ node example/parse.js -a beep -b boop\n{ _: [], a: \'beep\', b: \'boop\' }\n```\n\n```\n$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz\n{ _: [ \'foo\', \'bar\', \'baz\' ],\n  x: 3,\n  y: 4,\n  n: 5,\n  a: true,\n  b: true,\n  c: true,\n  beep: \'boop\' }\n```\n\n# methods\n\n``` js\nvar parseArgs = require(\'minimist\')\n```\n\n## var argv = parseArgs(args, opts={})\n\nReturn an argument object `argv` populated with the array arguments from `args`.\n\n`argv._` contains all the arguments that didn\'t have an option associated with\nthem.\n\nNumeric-looking arguments will be returned as numbers unless `opts.string` or\n`opts.boolean` is set for that argument name.\n\nAny arguments after `\'--\'` will not be parsed and will end up in `argv._`.\n\noptions can be:\n\n* `opts.string` - a string or array of strings argument names to always treat as\nstrings\n* `opts.boolean` - a string or array of strings to always treat as booleans\n* `opts.alias` - an object mapping string names to strings or arrays of string\nargument names to use as aliases\n* `opts.default` - an object mapping string argument names to default values\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install minimist\n```\n\n# license\n\nMIT\n',
2753 silly resolved     readmeFilename: 'readme.markdown',
2753 silly resolved     bugs: { url: 'https://github.com/substack/minimist/issues' },
2753 silly resolved     _id: 'minimist@0.0.8',
2753 silly resolved     _from: 'minimist@0.0.8' } ]
2754 info install minimist@0.0.8 into /usr/local/lib/node_modules/forever/node_modules/utile/node_modules/mkdirp
2755 info installOne minimist@0.0.8
2756 silly resolved [ { name: 'director',
2756 silly resolved     description: 'A client Side/Server Side Router',
2756 silly resolved     author: { name: 'Nodejitsu Inc.', email: 'info@nodejitsu.com' },
2756 silly resolved     version: '1.1.10',
2756 silly resolved     maintainers: [ [Object], [Object] ],
2756 silly resolved     repository: { type: 'git', url: 'http://github.com/flatiron/director.git' },
2756 silly resolved     keywords:
2756 silly resolved      [ 'URL',
2756 silly resolved        'router',
2756 silly resolved        'http',
2756 silly resolved        'cli',
2756 silly resolved        'flatiron',
2756 silly resolved        'client side',
2756 silly resolved        'ender' ],
2756 silly resolved     devDependencies:
2756 silly resolved      { codesurgeon: 'https://github.com/hij1nx/codesurgeon/tarball/master',
2756 silly resolved        colors: '0.5.x',
2756 silly resolved        'api-easy': '0.3.x',
2756 silly resolved        'uglify-js': '1.0.6',
2756 silly resolved        request: '2.9.x',
2756 silly resolved        qunitjs: '1.9.x',
2756 silly resolved        vows: '0.6.x' },
2756 silly resolved     ender: './build/ender.js',
2756 silly resolved     browserify: './build/director',
2756 silly resolved     main: './lib/director',
2756 silly resolved     engines: { node: '>= 0.4.0' },
2756 silly resolved     scripts: { test: 'vows test/server/*/*-test.js --spec' },
2756 silly resolved     readme: '<img src="https://github.com/flatiron/director/raw/master/img/director.png" />\n\n# Synopsis\nDirector is a router. Routing is the process of determining what code to run when a URL is requested.\n\n# Motivation\nA routing library that works in both the browser and node.js environments with as few differences as possible. Simplifies the development of Single Page Apps and Node.js applications. Dependency free (doesn\'t require jQuery or Express, etc).\n\n# Status\n[![Build Status](https://secure.travis-ci.org/flatiron/director.png?branch=master)](http://travis-ci.org/flatiron/director)\n\n# Features\n* [Client-Side Routing](#client-side)\n* [Server-Side HTTP Routing](#http-routing)\n* [Server-Side CLI Routing](#cli-routing)\n\n\n# Usage\n* [API Documentation](#api-documentation)\n* [Frequently Asked Questions](#faq)\n\n<a name="client-side"></a>\n## Client-side Routing\nIt simply watches the hash of the URL to determine what to do, for example:\n\n```\nhttp://foo.com/#/bar\n```\n\nClient-side routing (aka hash-routing) allows you to specify some information about the state of the application using the URL. So that when the user visits a specific URL, the application can be transformed accordingly.\n\n<img src="https://github.com/flatiron/director/raw/master/img/hashRoute.png" />\n\nHere is a simple example:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>A Gentle Introduction</title>\n    <script src="https://raw.github.com/flatiron/director/master/build/director.min.js"></script>\n    <script>\n\n      var author = function () { console.log("author"); },\n          books = function () { console.log("books"); },\n          viewBook = function(bookId) { console.log("viewBook: bookId is populated: " + bookId); };\n\n      var routes = {\n        \'/author\': author,\n        \'/books\': [books, function() { console.log("An inline route handler."); }],\n        \'/books/view/:bookId\': viewBook\n      };\n\n      var router = Router(routes);\n      router.init();\n\n    </script>\n  </head>\n  <body>\n    <ul>\n      <li><a href="#/author">#/author</a></li>\n      <li><a href="#/books">#/books</a></li>\n      <li><a href="#/books/view/1">#/books/view/1</a></li>\n    </ul>\n  </body>\n</html>\n```\n\nDirector works great with your favorite DOM library, such as jQuery.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8">\n    <title>A Gentle Introduction 2</title>\n    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>\n    <script src="https://raw.github.com/flatiron/director/master/build/director.min.js"></script>\n    <script>\n    $(\'document\').ready(function(){\n      //\n      // create some functions to be executed when\n      // the correct route is issued by the user.\n      //\n      var showAuthorInfo = function () { console.log("showAuthorInfo"); },\n          listBooks = function () { console.log("listBooks"); },\n          allroutes = function() {\n            var route = window.location.hash.slice(2),\n                sections = $(\'section\'),\n                section;\n            if ((section = sections.filter(\'[data-route=\' + route + \']\')).length) {\n              sections.hide(250);\n              section.show(250);\n            }\n          };\n\n      //\n      // define the routing table.\n      //\n      var routes = {\n        \'/author\': showAuthorInfo,\n        \'/books\': listBooks\n      };\n\n      //\n      // instantiate the router.\n      //\n      var router = Router(routes);\n\n      //\n      // a global configuration setting.\n      //\n      router.configure({\n        on: allroutes\n      });\n      router.init();\n    });\n    </script>\n  </head>\n  <body>\n    <section data-route="author">Author Name</section>\n    <section data-route="books">Book1, Book2, Book3</section>\n    <ul>\n      <li><a href="#/author">#/author</a></li>\n      <li><a href="#/books">#/books</a></li>\n    </ul>\n  </body>\n</html>\n```\n\nYou can find a browser-specific build of `director` [here][1] which has all of the server code stripped away.\n\n<a name="http-routing"></a>\n## Server-Side HTTP Routing\n\nDirector handles routing for HTTP requests similar to `journey` or `express`:\n\n```js\n  //\n  // require the native http module, as well as director.\n  //\n  var http = require(\'http\'),\n      director = require(\'director\');\n\n  //\n  // create some logic to be routed to.\n  //\n  function helloWorld() {\n    this.res.writeHead(200, { \'Content-Type\': \'text/plain\' })\n    this.res.end(\'hello world\');\n  }\n\n  //\n  // define a routing table.\n  //\n  var router = new director.http.Router({\n    \'/hello\': {\n      get: helloWorld\n    }\n  });\n\n  //\n  // setup a server and when there is a request, dispatch the\n  // route that was requested in the request object.\n  //\n  var server = http.createServer(function (req, res) {\n    router.dispatch(req, res, function (err) {\n      if (err) {\n        res.writeHead(404);\n        res.end();\n      }\n    });\n  });\n\n  //\n  // You can also do ad-hoc routing, similar to `journey` or `express`.\n  // This can be done with a string or a regexp.\n  //\n  router.get(\'/bonjour\', helloWorld);\n  router.get(/hola/, helloWorld);\n\n  //\n  // set the server to listen on port `8080`.\n  //\n  server.listen(8080);\n```\n\n### See Also:\n\n - Auto-generated Node.js API Clients for routers using [Director-Reflector](http://github.com/flatiron/director-reflector)\n - RESTful Resource routing using [restful](http://github.com/flatiron/restful)\n - HTML / Plain Text views of routers using [Director-Explorer](http://github.com/flatiron/director-explorer)\n\n<a name="cli-routing"></a>\n## CLI Routing\n\nDirector supports Command Line Interface routing. Routes for cli options are based on command line input (i.e. `process.argv`) instead of a URL.\n\n``` js\n  var director = require(\'director\');\n\n  var router = new director.cli.Router();\n\n  router.on(\'create\', function () {\n    console.log(\'create something\');\n  });\n\n  router.on(/destroy/, function () {\n    console.log(\'destroy something\');\n  });\n\n  // You will need to dispatch the cli arguments yourself\n  router.dispatch(\'on\', process.argv.slice(2).join(\' \'));\n```\n\nUsing the cli router, you can dispatch commands by passing them as a string. For example, if this example is in a file called `foo.js`:\n\n``` bash\n$ node foo.js create\ncreate something\n$ node foo.js destroy\ndestroy something\n```\n\n<a name="api-documentation"></a>\n# API Documentation\n\n* [Constructor](#constructor)\n* [Routing Table](#routing-table)\n* [Adhoc Routing](#adhoc-routing)\n* [Scoped Routing](#scoped-routing)\n* [Routing Events](#routing-events)\n* [Configuration](#configuration)\n* [URL Matching](#url-matching)\n* [URL Params](#url-params)\n* [Route Recursion](#route-recursion)\n* [Async Routing](#async-routing)\n* [Resources](#resources)\n* [History API](#history-api)\n* [Instance Methods](#instance-methods)\n* [Attach Properties to `this`](#attach-to-this)\n* [HTTP Streaming and Body Parsing](#http-streaming-body-parsing)\n\n<a name="constructor"></a>\n## Constructor\n\n``` js\n  var router = Router(routes);\n```\n\n<a name="routing-table"></a>\n## Routing Table\n\nAn object literal that contains nested route definitions. A potentially nested set of key/value pairs. The keys in the object literal represent each potential part of the URL. The values in the object literal contain references to the functions that should be associated with them. *bark* and *meow* are two functions that you have defined in your code.\n\n``` js\n  //\n  // Assign routes to an object literal.\n  //\n  var routes = {\n    //\n    // a route which assigns the function `bark`.\n    //\n    \'/dog\': bark,\n    //\n    // a route which assigns the functions `meow` and `scratch`.\n    //\n    \'/cat\': [meow, scratch]\n  };\n\n  //\n  // Instantiate the router.\n  //\n  var router = Router(routes);\n```\n\n<a name="adhoc-routing"></a>\n## Adhoc Routing\n\nWhen developing large client-side or server-side applications it is not always possible to define routes in one location. Usually individual decoupled components register their own routes with the application router. We refer to this as _Adhoc Routing._ Lets take a look at the API `director` exposes for adhoc routing:\n\n**Client-side Routing**\n\n``` js\n  var router = new Router().init();\n\n  router.on(\'/some/resource\', function () {\n    //\n    // Do something on `/#/some/resource`\n    //\n  });\n```\n\n**HTTP Routing**\n\n``` js\n  var router = new director.http.Router();\n\n  router.get(/\\/some\\/resource/, function () {\n    //\n    // Do something on an GET to `/some/resource`\n    //\n  });\n```\n\n<a name="scoped-routing"></a>\n## Scoped Routing\n\nIn large web appliations, both [Client-side](#client-side) and [Server-side](#http-routing), routes are often scoped within a few individual resources. Director exposes a simple way to do this for [Adhoc Routing](#adhoc-routing) scenarios:\n\n``` js\n  var router = new director.http.Router();\n\n  //\n  // Create routes inside the `/users` scope.\n  //\n  router.path(/\\/users\\/(\\w+)/, function () {\n    //\n    // The `this` context of the function passed to `.path()`\n    // is the Router itself.\n    //\n\n    this.post(function (id) {\n      //\n      // Create the user with the specified `id`.\n      //\n    });\n\n    this.get(function (id) {\n      //\n      // Retreive the user with the specified `id`.\n      //\n    });\n\n    this.get(/\\/friends/, function (id) {\n      //\n      // Get the friends for the user with the specified `id`.\n      //\n    });\n  });\n```\n\n<a name="routing-events"></a>\n## Routing Events\n\nIn `director`, a "routing event" is a named property in the [Routing Table](#routing-table) which can be assigned to a function or an Array of functions to be called when a route is matched in a call to `router.dispatch()`.\n\n* **on:** A function or Array of functions to execute when the route is matched.\n* **before:** A function or Array of functions to execute before calling the `on` method(s).\n\n**Client-side only**\n\n* **after:** A function or Array of functions to execute when leaving a particular route.\n* **once:** A function or Array of functions to execute only once for a particular route.\n\n<a name="configuration"></a>\n## Configuration\n\nGiven the flexible nature of `director` there are several options available for both the [Client-side](#client-side) and [Server-side](#http-routing). These options can be set using the `.configure()` method:\n\n``` js\n  var router = new director.Router(routes).configure(options);\n```\n\nThe `options` are:\n\n* **recurse:** Controls [route recursion](#route-recursion). Use `forward`, `backward`, or `false`. Default is `false` Client-side, and `backward` Server-side.\n* **strict:** If set to `false`, then trailing slashes (or other delimiters) are allowed in routes. Default is `true`.\n* **async:** Controls [async routing](#async-routing). Use `true` or `false`. Default is `false`.\n* **delimiter:** Character separator between route fragments. Default is `/`.\n* **notfound:** A function to call if no route is found on a call to `router.dispatch()`.\n* **on:** A function (or list of functions) to call on every call to `router.dispatch()` when a route is found.\n* **before:** A function (or list of functions) to call before every call to `router.dispatch()` when a route is found.\n\n**Client-side only**\n\n* **resource:** An object to which string-based routes will be bound. This can be especially useful for late-binding to route functions (such as async client-side requires).\n* **after:** A function (or list of functions) to call when a given route is no longer the active route.\n* **html5history:** If set to `true` and client supports `pushState()`, then uses HTML5 History API instead of hash fragments. See [History API](#history-api) for more information.\n* **run_handler_in_init:** If `html5history` is enabled, the route handler by default is executed upon `Router.init()` since with real URIs the router can not know if it should call a route handler or not. Setting this to `false` disables the route handler initial execution.\n\n<a name="url-matching"></a>\n## URL Matching\n\n``` js\n  var router = Router({\n    //\n    // given the route \'/dog/yella\'.\n    //\n    \'/dog\': {\n      \'/:color\': {\n        //\n        // this function will return the value \'yella\'.\n        //\n        on: function (color) { console.log(color) }\n      }\n    }\n  });\n```\n\nRoutes can sometimes become very complex, `simple/:tokens` don\'t always suffice. Director supports regular expressions inside the route names. The values captured from the regular expressions are passed to your listener function.\n\n``` js\n  var router = Router({\n    //\n    // given the route \'/hello/world\'.\n    //\n    \'/hello\': {\n      \'/(\\\\w+)\': {\n        //\n        // this function will return the value \'world\'.\n        //\n        on: function (who) { console.log(who) }\n      }\n    }\n  });\n```\n\n``` js\n  var router = Router({\n    //\n    // given the route \'/hello/world/johny/appleseed\'.\n    //\n    \'/hello\': {\n      \'/world/?([^\\/]*)\\/([^\\/]*)/?\': function (a, b) {\n        console.log(a, b);\n      }\n    }\n  });\n```\n\n<a name="url-params"></a>\n## URL Parameters\n\nWhen you are using the same route fragments it is more descriptive to define these fragments by name and then use them in your [Routing Table](#routing-table) or [Adhoc Routes](#adhoc-routing). Consider a simple example where a `userId` is used repeatedly.\n\n``` js\n  //\n  // Create a router. This could also be director.cli.Router() or\n  // director.http.Router().\n  //\n  var router = new director.Router();\n\n  //\n  // A route could be defined using the `userId` explicitly.\n  //\n  router.on(/([\\w-_]+)/, function (userId) { });\n\n  //\n  // Define a shorthand for this fragment called `userId`.\n  //\n  router.param(\'userId\', /([\\\\w\\\\-]+)/);\n\n  //\n  // Now multiple routes can be defined with the same\n  // regular expression.\n  //\n  router.on(\'/anything/:userId\', function (userId) { });\n  router.on(\'/something-else/:userId\', function (userId) { });\n```\n\n<a name="route-recursion"></a>\n## Route Recursion\n\nCan be assigned the value of `forward` or `backward`. The recurse option will determine the order in which to fire the listeners that are associated with your routes. If this option is NOT specified or set to null, then only the listeners associated with an exact match will be fired.\n\n### No recursion, with the URL /dog/angry\n\n``` js\n  var routes = {\n    \'/dog\': {\n      \'/angry\': {\n        //\n        // Only this method will be fired.\n        //\n        on: growl\n      },\n      on: bark\n    }\n  };\n\n  var router = Router(routes);\n```\n\n### Recursion set to `backward`, with the URL /dog/angry\n\n``` js\n  var routes = {\n    \'/dog\': {\n      \'/angry\': {\n        //\n        // This method will be fired first.\n        //\n        on: growl\n      },\n      //\n      // This method will be fired second.\n      //\n      on: bark\n    }\n  };\n\n  var router = Router(routes).configure({ recurse: \'backward\' });\n```\n\n### Recursion set to `forward`, with the URL /dog/angry\n\n``` js\n  var routes = {\n    \'/dog\': {\n      \'/angry\': {\n        //\n        // This method will be fired second.\n        //\n        on: growl\n      },\n      //\n      // This method will be fired first.\n      //\n      on: bark\n    }\n  };\n\n  var router = Router(routes).configure({ recurse: \'forward\' });\n```\n\n### Breaking out of recursion, with the URL /dog/angry\n\n``` js\n  var routes = {\n    \'/dog\': {\n      \'/angry\': {\n        //\n        // This method will be fired first.\n        //\n        on: function() { return false; }\n      },\n      //\n      // This method will not be fired.\n      //\n      on: bark\n    }\n  };\n\n  //\n  // This feature works in reverse with recursion set to true.\n  //\n  var router = Router(routes).configure({ recurse: \'backward\' });\n```\n\n<a name="async-routing"></a>\n## Async Routing\n\nBefore diving into how Director exposes async routing, you should understand [Route Recursion](#route-recursion). At it\'s core route recursion is about evaluating a series of functions gathered when traversing the [Routing Table](#routing-table).\n\nNormally this series of functions is evaluated synchronously. In async routing, these functions are evaluated asynchronously. Async routing can be extremely useful both on the client-side and the server-side:\n\n* **Client-side:** To ensure an animation or other async operations (such as HTTP requests for authentication) have completed before continuing evaluation of a route.\n* **Server-side:** To ensure arbitrary async operations (such as performing authentication) have completed before continuing the evaluation of a route.\n\nThe method signatures for route functions in synchronous and asynchronous evaluation are different: async route functions take an additional `next()` callback.\n\n### Synchronous route functions\n\n``` js\n  var router = new director.Router();\n\n  router.on(\'/:foo/:bar/:bazz\', function (foo, bar, bazz) {\n    //\n    // Do something asynchronous with `foo`, `bar`, and `bazz`.\n    //\n  });\n```\n\n### Asynchronous route functions\n\n``` js\n  var router = new director.http.Router().configure({ async: true });\n\n  router.on(\'/:foo/:bar/:bazz\', function (foo, bar, bazz, next) {\n    //\n    // Go do something async, and determine that routing should stop\n    //\n    next(false);\n  });\n```\n\n<a name="resources"></a>\n## Resources\n\n**Available on the Client-side only.** An object literal containing functions. If a host object is specified, your route definitions can provide string literals that represent the function names inside the host object. A host object can provide the means for better encapsulation and design.\n\n``` js\n\n  var router = Router({\n\n    \'/hello\': {\n      \'/usa\': \'americas\',\n      \'/china\': \'asia\'\n    }\n\n  }).configure({ resource: container }).init();\n\n  var container = {\n    americas: function() { return true; },\n    china: function() { return true; }\n  };\n\n```\n\n<a name="history-api"></a>\n## History API\n\n**Available on the Client-side only.** Director supports using HTML5 History API instead of hash fragments for navigation. To use the API, pass `{html5history: true}` to `configure()`. Use of the API is enabled only if the client supports `pushState()`.\n\nUsing the API gives you cleaner URIs but they come with a cost. Unlike with hash fragments your route URIs must exist. When the client enters a page, say http://foo.com/bar/baz, the web server must respond with something meaningful. Usually this means that your web server checks the URI points to something that, in a sense, exists, and then serves the client the JavaScript application.\n\nIf you\'re after a single-page application you can not use plain old `<a href="/bar/baz">` tags for navigation anymore. When such link is clicked, web browsers try to ask for the resource from server which is not of course desired for a single-page application. Instead you need to use e.g. click handlers and call the `setRoute()` method yourself.\n\n<a name="attach-to-this"></a>\n## Attach Properties To `this`\n\nGenerally, the `this` object bound to route handlers, will contain the request in `this.req` and the response in `this.res`. One may attach additional properties to `this` with the `router.attach` method:\n\n```js\n  var director = require(\'director\');\n\n  var router = new director.http.Router().configure(options);\n\n  //\n  // Attach properties to `this`\n  //\n  router.attach(function () {\n    this.data = [1,2,3];\n  });\n\n  //\n  // Access properties attached to `this` in your routes!\n  //\n  router.get(\'/hello\', function () {\n    this.res.writeHead(200, { \'content-type\': \'text/plain\' });\n\n    //\n    // Response will be `[1,2,3]`!\n    //\n    this.res.end(this.data);\n  });\n```\n\nThis API may be used to attach convenience methods to the `this` context of route handlers.\n\n<a name="http-streaming-body-parsing">\n## HTTP Streaming and Body Parsing\n\nWhen you are performing HTTP routing there are two common scenarios:\n\n* Buffer the request body and parse it according to the `Content-Type` header (usually `application/json` or `application/x-www-form-urlencoded`).\n* Stream the request body by manually calling `.pipe` or listening to the `data` and `end` events.\n\nBy default `director.http.Router()` will attempt to parse either the `.chunks` or `.body` properties set on the request parameter passed to `router.dispatch(request, response, callback)`. The router instance will also wait for the `end` event before firing any routes.\n\n**Default Behavior**\n\n``` js\n  var director = require(\'director\');\n\n  var router = new director.http.Router();\n\n  router.get(\'/\', function () {\n    //\n    // This will not work, because all of the data\n    // events and the end event have already fired.\n    //\n    this.req.on(\'data\', function (chunk) {\n      console.log(chunk)\n    });\n  });\n```\n\nIn [flatiron][2], `director` is used in conjunction with [union][3] which uses a `BufferedStream` proxy to the raw `http.Request` instance. [union][3] will set the `req.chunks` property for you and director will automatically parse the body. If you wish to perform this buffering yourself directly with `director` you can use a simple request handler in your http server:\n\n``` js\n  var http = require(\'http\'),\n      director = require(\'director\');\n\n  var router = new director.http.Router();\n\n  var server = http.createServer(function (req, res) {\n    req.chunks = [];\n    req.on(\'data\', function (chunk) {\n      req.chunks.push(chunk.toString());\n    });\n\n    router.dispatch(req, res, function (err) {\n      if (err) {\n        res.writeHead(404);\n        res.end();\n      }\n\n      console.log(\'Served \' + req.url);\n    });\n  });\n\n  router.post(\'/\', function () {\n    this.res.writeHead(200, { \'Content-Type\': \'application/json\' })\n    this.res.end(JSON.stringify(this.req.body));\n  });\n```\n\n**Streaming Support**\n\nIf you wish to get access to the request stream before the `end` event is fired, you can pass the `{ stream: true }` options to the route.\n\n``` js\n  var director = require(\'director\');\n\n  var router = new director.http.Router();\n\n  router.get(\'/\', { stream: true }, function () {\n    //\n    // This will work because the route handler is invoked\n    // immediately without waiting for the `end` event.\n    //\n    this.req.on(\'data\', function (chunk) {\n      console.log(chunk);\n    });\n  });\n```\n\n<a name="instance-methods"></a>\n## Instance methods\n\n### configure(options)\n* `options` {Object}: Options to configure this instance with.\n\nConfigures the Router instance with the specified `options`. See [Configuration](#configuration) for more documentation.\n\n### param(token, matcher)\n* token {string}: Named parameter token to set to the specified `matcher`\n* matcher {string|Regexp}: Matcher for the specified `token`.\n\nAdds a route fragment for the given string `token` to the specified regex `matcher` to this Router instance. See [URL Parameters](#url-params) for more documentation.\n\n### on(method, path, route)\n* `method` {string}: Method to insert within the Routing Table (e.g. `on`, `get`, etc.).\n* `path` {string}: Path within the Routing Table to set the `route` to.\n* `route` {function|Array}: Route handler to invoke for the `method` and `path`.\n\nAdds the `route` handler for the specified `method` and `path` within the [Routing Table](#routing-table).\n\n### path(path, routesFn)\n* `path` {string|Regexp}: Scope within the Routing Table to invoke the `routesFn` within.\n* `routesFn` {function}: Adhoc Routing function with calls to `this.on()`, `this.get()` etc.\n\nInvokes the `routesFn` within the scope of the specified `path` for this Router instance.\n\n### dispatch(method, path[, callback])\n* method {string}: Method to invoke handlers for within the Routing Table\n* path {string}: Path within the Routing Table to match\n* callback {function}: Invoked once all route handlers have been called.\n\nDispatches the route handlers matched within the [Routing Table](#routing-table) for this instance for the specified `method` and `path`.\n\n### mount(routes, path)\n* routes {object}: Partial routing table to insert into this instance.\n* path {string|Regexp}: Path within the Routing Table to insert the `routes` into.\n\nInserts the partial [Routing Table](#routing-table), `routes`, into the Routing Table for this Router instance at the specified `path`.\n\n## Instance methods (Client-side only)\n\n### init([redirect])\n* `redirect` {String}: This value will be used if \'/#/\' is not found in the URL. (e.g., init(\'/\') will resolve to \'/#/\', init(\'foo\') will resolve to \'/#foo\').\n\nInitialize the router, start listening for changes to the URL.\n\n### getRoute([index])\n* `index` {Number}: The hash value is divided by forward slashes, each section then has an index, if this is provided, only that section of the route will be returned.\n\nReturns the entire route or just a section of it.\n\n### setRoute(route)\n* `route` {String}: Supply a route value, such as `home/stats`.\n\nSet the current route.\n\n### setRoute(start, length)\n* `start` {Number} - The position at which to start removing items.\n* `length` {Number} - The number of items to remove from the route.\n\nRemove a segment from the current route.\n\n### setRoute(index, value)\n* `index` {Number} - The hash value is divided by forward slashes, each section then has an index.\n* `value` {String} - The new value to assign the the position indicated by the first parameter.\n\nSet a segment of the current route.\n\n<a name="faq"></a>\n# Frequently Asked Questions\n\n## What About SEO?\n\nIs using a Client-side router a problem for SEO? Yes. If advertising is a requirement, you are probably building a "Web Page" and not a "Web Application". Director on the client is meant for script-heavy Web Applications.\n\n# Licence\n\n(The MIT License)\n\nCopyright (c) 2010 Nodejitsu Inc. <http://www.twitter.com/nodejitsu>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \'Software\'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[0]: http://github.com/flatiron/director\n[1]: https://github.com/flatiron/director/blob/master/build/director.min.js\n[2]: http://github.com/flatiron/flatiron\n[3]: http://github.com/flatiron/union\n',
2756 silly resolved     readmeFilename: 'README.md',
2756 silly resolved     bugs: { url: 'https://github.com/flatiron/director/issues' },
2756 silly resolved     homepage: 'https://github.com/flatiron/director',
2756 silly resolved     _id: 'director@1.1.10',
2756 silly resolved     _shasum: 'e6c1d64f2f079216f19ea83b566035dde9901179',
2756 silly resolved     _from: 'director@1.1.10',
2756 silly resolved     _resolved: 'http://registry.npm.taobao.org/director/download/director-1.1.10.tgz' } ]
2757 info install director@1.1.10 into /usr/local/lib/node_modules/forever/node_modules/flatiron
2758 info installOne director@1.1.10
2759 silly resolved [ { name: 'async',
2759 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
2759 silly resolved     main: './lib/async',
2759 silly resolved     author: { name: 'Caolan McMahon' },
2759 silly resolved     version: '0.2.9',
2759 silly resolved     repository: { type: 'git', url: 'https://github.com/caolan/async.git' },
2759 silly resolved     bugs: { url: 'https://github.com/caolan/async/issues' },
2759 silly resolved     licenses: [ [Object] ],
2759 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
2759 silly resolved     jam: { main: 'lib/async.js', include: [Object] },
2759 silly resolved     scripts: { test: 'nodeunit test/test-async.js' },
2759 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser. Also supports [component](https://github.com/component/component).\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, each…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n```javascript\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n\nasync.parallel([\n    function(){ ... },\n    function(){ ... }\n], callback);\n\nasync.series([\n    function(){ ... },\n    function(){ ... }\n]);\n```\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n## Common Pitfalls\n\n### Binding a context to an iterator\n\nThis section is really about bind, not about async. If you are wondering how to\nmake async execute your iterators in a given context, or are confused as to why\na method of another library isn\'t working as an iterator, study this example:\n\n```js\n// Here is a simple object with an (unnecessarily roundabout) squaring method\nvar AsyncSquaringLibrary = {\n  squareExponent: 2,\n  square: function(number, callback){ \n    var result = Math.pow(number, this.squareExponent);\n    setTimeout(function(){\n      callback(null, result);\n    }, 200);\n  }\n};\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square, function(err, result){\n  // result is [NaN, NaN, NaN]\n  // This fails because the `this.squareExponent` expression in the square\n  // function is not evaluated in the context of AsyncSquaringLibrary, and is\n  // therefore undefined.\n});\n\nasync.map([1, 2, 3], AsyncSquaringLibrary.square.bind(AsyncSquaringLibrary), function(err, result){\n  // result is [1, 4, 9]\n  // With the help of bind we can attach a context to the iterator before\n  // passing it to async. Now the square function will be executed in its \n  // \'home\' AsyncSquaringLibrary context and the value of `this.squareExponent`\n  // will be as expected.\n});\n```\n\n## Download\n\nThe source is available for download from\n[GitHub](http://github.com/caolan/async).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 29.6kb Uncompressed\n\n## In the Browser\n\nSo far it\'s been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n```html\n<script type="text/javascript" src="async.js"></script>\n<script type="text/javascript">\n\n    async.map(data, asyncProcess, function(err, results){\n        alert(results);\n    });\n\n</script>\n```\n\n## Documentation\n\n### Collections\n\n* [each](#each)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [doWhilst](#doWhilst)\n* [until](#until)\n* [doUntil](#doUntil)\n* [forever](#forever)\n* [waterfall](#waterfall)\n* [compose](#compose)\n* [applyEach](#applyEach)\n* [queue](#queue)\n* [cargo](#cargo)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n* [times](#times)\n* [timesSeries](#timesSeries)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n<a name="each" />\n### each(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the each function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// assuming openFiles is an array of file names and saveFile is a function\n// to save the modified contents of that file:\n\nasync.each(openFiles, saveFile, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="forEachSeries" />\n<a name="eachSeries" />\n### eachSeries(arr, iterator, callback)\n\nThe same as each only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n<a name="eachLimit" />\n### eachLimit(arr, limit, iterator, callback)\n\nThe same as each only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err) which must be called once it has \n  completed. If no error has occured, the callback should be run without \n  arguments or with an explicit null argument.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n```js\n// Assume documents is an array of JSON objects and requestApi is a\n// function that interacts with a rate-limited REST api.\n\nasync.eachLimit(documents, 20, requestApi, function(err){\n    // if any of the saves produced an error, err would equal that error\n});\n```\n\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="mapLimit" />\n### mapLimit(arr, limit, iterator, callback)\n\nThe same as map only no more than "limit" iterators will be simultaneously \nrunning at any time.\n\nNote that the items are not processed in batches, so there is no guarantee that\n the first "limit" iterator functions will complete before any others are \nstarted.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - The maximum number of iterators to run at any time.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, transformed) which must be called once \n  it has completed with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n```js\nasync.map([\'file1\',\'file2\',\'file3\'], 1, fs.stat, function(err, results){\n    // results is now an array of stats for each file\n});\n```\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n```js\nasync.filter([\'file1\',\'file2\',\'file3\'], fs.exists, function(results){\n    // results now equals an array of the existing files\n});\n```\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as reject, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then it\'s probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback(err, reduction) which accepts an optional error as its first \n  argument, and the state of the reduction as the second. If an error is \n  passed to the callback, the reduction is stopped and the main callback is \n  immediately called with the error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n```js\nasync.reduce([1,2,3], 0, function(memo, item, callback){\n    // pointless async:\n    process.nextTick(function(){\n        callback(null, memo + item)\n    });\n}, function(err, result){\n    // result is now equal to the last value of memo, which is 6\n});\n```\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n```js\nasync.detect([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // result now equals the first file in the list that exists\n});\n```\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, sortValue) which must be called once it\n  has completed with an error (which can be null) and a value to use as the sort\n  criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n```js\nasync.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n    fs.stat(file, function(err, stats){\n        callback(err, stats.mtime);\n    });\n}, function(err, results){\n    // results is now the original array of files sorted by\n    // modified date\n});\n```\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n```js\nasync.some([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then at least one of the files exists\n});\n```\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like fs.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback(truthValue) which must be called with a \n  boolean argument once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n```js\nasync.every([\'file1\',\'file2\',\'file3\'], fs.exists, function(result){\n    // if result is true then every file exists\n});\n```\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback(err, results) which must be called once it \n  has completed with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n```js\nasync.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n    // files is now a list of filenames that exist in the 3 directories\n});\n```\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.series([\n    function(callback){\n        // do some stuff ...\n        callback(null, \'one\');\n    },\n    function(callback){\n        // do some more stuff ...\n        callback(null, \'two\');\n    }\n],\n// optional callback\nfunction(err, results){\n    // results is now equal to [\'one\', \'two\']\n});\n\n\n// an example using an object instead of an array\nasync.series({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equal to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n__Example__\n\n```js\nasync.parallel([\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'one\');\n        }, 200);\n    },\n    function(callback){\n        setTimeout(function(){\n            callback(null, \'two\');\n        }, 100);\n    }\n],\n// optional callback\nfunction(err, results){\n    // the results array will equal [\'one\',\'two\'] even though\n    // the second function had a shorter timeout.\n});\n\n\n// an example using an object instead of an array\nasync.parallel({\n    one: function(callback){\n        setTimeout(function(){\n            callback(null, 1);\n        }, 200);\n    },\n    two: function(callback){\n        setTimeout(function(){\n            callback(null, 2);\n        }, 100);\n    }\n},\nfunction(err, results) {\n    // results is now equals to: {one: 1, two: 2}\n});\n```\n\n---------------------------------------\n\n<a name="parallel" />\n### parallelLimit(tasks, limit, [callback])\n\nThe same as parallel only the tasks are executed in parallel with a maximum of "limit" \ntasks executing at any time.\n\nNote that the tasks are not executed in batches, so there is no guarantee that \nthe first "limit" tasks will complete before any others are started.\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed \n  a callback(err, result) it must call on completion with an error (which can\n  be null) and an optional result value.\n* limit - The maximum number of tasks to run at any time.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets a results array (or object) containing all \n  the result arguments passed to the task callbacks.\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback(err) which must be called once it has completed with an \n  optional error argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n```js\nvar count = 0;\n\nasync.whilst(\n    function () { return count < 5; },\n    function (callback) {\n        count++;\n        setTimeout(callback, 1000);\n    },\n    function (err) {\n        // 5 seconds have passed\n    }\n);\n```\n\n---------------------------------------\n\n<a name="doWhilst" />\n### doWhilst(fn, test, callback)\n\nThe post check version of whilst. To reflect the difference in the order of operations `test` and `fn` arguments are switched. `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n---------------------------------------\n\n<a name="doUntil" />\n### doUntil(fn, test, callback)\n\nLike doWhilst except the test is inverted. Note the argument ordering differs from `until`.\n\n---------------------------------------\n\n<a name="forever" />\n### forever(fn, callback)\n\nCalls the asynchronous function \'fn\' repeatedly, in series, indefinitely.\nIf an error is passed to fn\'s callback then \'callback\' is called with the\nerror, otherwise it will never be called.\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a \n  callback(err, result1, result2, ...) it must call on completion. The first\n  argument is an error (which can be null) and any further arguments will be \n  passed as arguments in order to the next task.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n```js\nasync.waterfall([\n    function(callback){\n        callback(null, \'one\', \'two\');\n    },\n    function(arg1, arg2, callback){\n        callback(null, \'three\');\n    },\n    function(arg1, callback){\n        // arg1 now equals \'three\'\n        callback(null, \'done\');\n    }\n], function (err, result) {\n   // result now equals \'done\'    \n});\n```\n\n---------------------------------------\n<a name="compose" />\n### compose(fn1, fn2...)\n\nCreates a function which is a composition of the passed asynchronous\nfunctions. Each function consumes the return value of the function that\nfollows. Composing functions f(), g() and h() would produce the result of\nf(g(h())), only this version uses callbacks to obtain the return values.\n\nEach function is executed with the `this` binding of the composed function.\n\n__Arguments__\n\n* functions... - the asynchronous functions to compose\n\n\n__Example__\n\n```js\nfunction add1(n, callback) {\n    setTimeout(function () {\n        callback(null, n + 1);\n    }, 10);\n}\n\nfunction mul3(n, callback) {\n    setTimeout(function () {\n        callback(null, n * 3);\n    }, 10);\n}\n\nvar add1mul3 = async.compose(mul3, add1);\n\nadd1mul3(4, function (err, result) {\n   // result now equals 15\n});\n```\n\n---------------------------------------\n<a name="applyEach" />\n### applyEach(fns, args..., callback)\n\nApplies the provided arguments to each function in the array, calling the\ncallback after all functions have completed. If you only provide the first\nargument then it will return a function which lets you pass in the\narguments as if it were a single function call.\n\n__Arguments__\n\n* fns - the asynchronous functions to all call with the same arguments\n* args... - any number of separate arguments to pass to the function\n* callback - the final argument should be the callback, called when all\n  functions have completed processing\n\n\n__Example__\n\n```js\nasync.applyEach([enableSearch, updateSchema], \'bucket\', callback);\n\n// partial application example:\nasync.each(\n    buckets,\n    async.applyEach([enableSearch, updateSchema]),\n    callback\n);\n```\n\n---------------------------------------\n\n<a name="applyEachSeries" />\n### applyEachSeries(arr, iterator, callback)\n\nThe same as applyEach only the functions are applied in series.\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task, which must call its callback(err) argument when finished, with an \n  optional error as an argument.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* unshift(task, [callback]) - add a new task to the front of the queue.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a queue object with concurrency 2\n\nvar q = async.queue(function (task, callback) {\n    console.log(\'hello \' + task.name);\n    callback();\n}, 2);\n\n\n// assign a callback\nq.drain = function() {\n    console.log(\'all items have been processed\');\n}\n\n// add some items to the queue\n\nq.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\nq.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the queue (batch-wise)\n\nq.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n    console.log(\'finished processing bar\');\n});\n\n// add some items to the front of the queue\n\nq.unshift({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\n```\n\n---------------------------------------\n\n<a name="cargo" />\n### cargo(worker, [payload])\n\nCreates a cargo object with the specified payload. Tasks added to the\ncargo will be processed altogether (up to the payload limit). If the\nworker is in progress, the task is queued until it is available. Once\nthe worker has completed some tasks, each callback of those tasks is called.\n\n__Arguments__\n\n* worker(tasks, callback) - An asynchronous function for processing an array of\n  queued tasks, which must call its callback(err) argument when finished, with \n  an optional error as an argument.\n* payload - An optional integer for determining how many tasks should be\n  processed per round; if omitted, the default is unlimited.\n\n__Cargo objects__\n\nThe cargo object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* payload - an integer for determining how many tasks should be\n  process per round. This property can be changed after a cargo is created to\n  alter the payload on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n```js\n// create a cargo object with payload 2\n\nvar cargo = async.cargo(function (tasks, callback) {\n    for(var i=0; i<tasks.length; i++){\n      console.log(\'hello \' + tasks[i].name);\n    }\n    callback();\n}, 2);\n\n\n// add some items\n\ncargo.push({name: \'foo\'}, function (err) {\n    console.log(\'finished processing foo\');\n});\ncargo.push({name: \'bar\'}, function (err) {\n    console.log(\'finished processing bar\');\n});\ncargo.push({name: \'baz\'}, function (err) {\n    console.log(\'finished processing baz\');\n});\n```\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\nNote, all functions are called with a results object as a second argument, \nso it is unsafe to pass functions in the tasks object which cannot handle the\nextra argument. For example, this snippet of code:\n\n```js\nasync.auto({\n  readData: async.apply(fs.readFile, \'data.txt\', \'utf-8\');\n}, callback);\n```\n\nwill have the effect of calling readFile with the results object as the last\nargument, which will fail:\n\n```js\nfs.readFile(\'data.txt\', \'utf-8\', cb, {});\n```\n\nInstead, wrap the call to readFile in a function which does not forward the \nresults object:\n\n```js\nasync.auto({\n  readData: function(cb, results){\n    fs.readFile(\'data.txt\', \'utf-8\', cb);\n  }\n}, callback);\n```\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The \n  function receives two arguments: (1) a callback(err, result) which must be \n  called when finished, passing an error (which can be null) and the result of \n  the function\'s execution, and (2) a results object, containing the results of\n  the previously executed functions.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. Results will always be passed\n\tbut if an error occurred, no other tasks will be performed, and the results\n\tobject will only contain partial results.\n  \n\n__Example__\n\n```js\nasync.auto({\n    get_data: function(callback){\n        // async code to get some data\n    },\n    make_folder: function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    },\n    write_file: [\'get_data\', \'make_folder\', function(callback){\n        // once there is some data and the directory exists,\n        // write the data to a file in the directory\n        callback(null, filename);\n    }],\n    email_link: [\'write_file\', function(callback, results){\n        // once the file is written let\'s email a link to it...\n        // results.write_file contains the filename returned by write_file.\n    }]\n});\n```\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n```js\nasync.parallel([\n    function(callback){\n        // async code to get some data\n    },\n    function(callback){\n        // async code to create a directory to store a file in\n        // this is run at the same time as getting the data\n    }\n],\nfunction(err, results){\n    async.series([\n        function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n        },\n        function(callback){\n            // once the file is written let\'s email a link to it...\n        }\n    ]);\n});\n```\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. It\'s also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run.\n\n__Example__\n\n```js\nvar iterator = async.iterator([\n    function(){ sys.p(\'one\'); },\n    function(){ sys.p(\'two\'); },\n    function(){ sys.p(\'three\'); }\n]);\n\nnode> var iterator2 = iterator();\n\'one\'\nnode> var iterator3 = iterator2();\n\'two\'\nnode> iterator3();\n\'three\'\nnode> var nextfn = iterator2.next();\nnode> nextfn();\n\'three\'\n```\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n```js\n// using apply\n\nasync.parallel([\n    async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n    async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n]);\n\n\n// the same process without using apply\n\nasync.parallel([\n    function(callback){\n        fs.writeFile(\'testfile1\', \'test1\', callback);\n    },\n    function(callback){\n        fs.writeFile(\'testfile2\', \'test2\', callback);\n    }\n]);\n```\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n```js\nnode> var fn = async.apply(sys.puts, \'one\');\nnode> fn(\'two\', \'three\');\none\ntwo\nthree\n```\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setImmediate(callback)\nif available, otherwise setTimeout(callback, 0), which means other higher priority\nevents may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n```js\nvar call_order = [];\nasync.nextTick(function(){\n    call_order.push(\'two\');\n    // call_order now equals [\'one\',\'two\']\n});\ncall_order.push(\'one\')\n```\n\n<a name="times" />\n### times(n, callback)\n\nCalls the callback n times and accumulates results in the same manner\nyou would use with async.map.\n\n__Arguments__\n\n* n - The number of times to run the function.\n* callback - The function to call n times.\n\n__Example__\n\n```js\n// Pretend this is some complicated async factory\nvar createUser = function(id, callback) {\n  callback(null, {\n    id: \'user\' + id\n  })\n}\n// generate 5 users\nasync.times(5, function(n, next){\n    createUser(n, function(err, user) {\n      next(err, user)\n    })\n}, function(err, users) {\n  // we should now have 5 users\n});\n```\n\n<a name="timesSeries" />\n### timesSeries(n, callback)\n\nThe same as times only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\nThe cache of results is exposed as the `memo` property of the function returned\nby `memoize`.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n```js\nvar slow_fn = function (name, callback) {\n    // do something\n    callback(null, result);\n};\nvar fn = async.memoize(slow_fn);\n\n// fn can now be used as if it were slow_fn\nfn(\'some name\', function () {\n    // callback\n});\n```\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, \'hello \' + name);\n    }, 1000);\n};\n```\n```js\nnode> async.log(hello, \'world\');\n\'hello world\'\n```\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n```js\nvar hello = function(name, callback){\n    setTimeout(function(){\n        callback(null, {hello: name});\n    }, 1000);\n};\n```\n```js\nnode> async.dir(hello, \'world\');\n{hello: \'world\'}\n```\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
2759 silly resolved     readmeFilename: 'README.md',
2759 silly resolved     homepage: 'https://github.com/caolan/async',
2759 silly resolved     _id: 'async@0.2.9',
2759 silly resolved     _shasum: 'df63060fbf3d33286a76aaf6d55a2986d9ff8619',
2759 silly resolved     _from: 'async@0.2.9',
2759 silly resolved     _resolved: 'http://registry.npm.taobao.org/async/download/async-0.2.9.tgz' } ]
2760 info install async@0.2.9 into /usr/local/lib/node_modules/forever/node_modules/nconf
2761 info installOne async@0.2.9
2762 silly resolved [ { name: 'yargs',
2762 silly resolved     version: '1.2.6',
2762 silly resolved     description: 'Light-weight option parsing with an argv hash. No optstrings attached.',
2762 silly resolved     main: './index.js',
2762 silly resolved     dependencies: { minimist: '^0.1.0' },
2762 silly resolved     devDependencies: { hashish: '*', mocha: '*', chai: '*' },
2762 silly resolved     scripts: { test: 'mocha -R nyan' },
2762 silly resolved     repository: { type: 'git', url: 'http://github.com/chevex/yargs.git' },
2762 silly resolved     keywords:
2762 silly resolved      [ 'argument',
2762 silly resolved        'args',
2762 silly resolved        'option',
2762 silly resolved        'parser',
2762 silly resolved        'parsing',
2762 silly resolved        'cli',
2762 silly resolved        'command' ],
2762 silly resolved     author:
2762 silly resolved      { name: 'Alex Ford',
2762 silly resolved        email: 'Alex.Ford@CodeTunnel.com',
2762 silly resolved        url: 'http://CodeTunnel.com' },
2762 silly resolved     license: 'MIT/X11',
2762 silly resolved     engine: { node: '>=0.4' },
2762 silly resolved     gitHead: 'ed1216f75be676bf5cbd7f26daf7ea4a2cb4a208',
2762 silly resolved     bugs: { url: 'https://github.com/chevex/yargs/issues' },
2762 silly resolved     homepage: 'https://github.com/chevex/yargs',
2762 silly resolved     _id: 'yargs@1.2.6',
2762 silly resolved     _shasum: '9c7b4a82fd5d595b2bf17ab6dcc43135432fe34b',
2762 silly resolved     _from: 'yargs@1.2.6',
2762 silly resolved     _npmVersion: '1.4.14',
2762 silly resolved     _npmUser: { name: 'chevex', email: 'alex.ford@codetunnel.com' },
2762 silly resolved     maintainers: [ [Object] ],
2762 silly resolved     dist:
2762 silly resolved      { shasum: '9c7b4a82fd5d595b2bf17ab6dcc43135432fe34b',
2762 silly resolved        size: 21166,
2762 silly resolved        noattachment: false,
2762 silly resolved        tarball: 'http://registry.npm.taobao.org/yargs/download/yargs-1.2.6.tgz' },
2762 silly resolved     directories: {},
2762 silly resolved     publish_time: 1403538337487,
2762 silly resolved     _cnpm_publish_time: 1403538337487,
2762 silly resolved     _resolved: 'http://registry.npm.taobao.org/yargs/download/yargs-1.2.6.tgz',
2762 silly resolved     readme: 'ERROR: No README data found!' } ]
2763 info install yargs@1.2.6 into /usr/local/lib/node_modules/node-inspector
2764 info installOne yargs@1.2.6
2765 silly resolved [ { name: 'ncp',
2765 silly resolved     version: '0.4.2',
2765 silly resolved     author: { name: 'AvianFlu', email: 'charlie@charlieistheman.com' },
2765 silly resolved     description: 'Asynchronous recursive file copy utility.',
2765 silly resolved     bin: { ncp: './bin/ncp' },
2765 silly resolved     devDependencies: { vows: '0.6.x', rimraf: '1.0.x', 'read-dir-files': '0.0.x' },
2765 silly resolved     main: './lib/ncp.js',
2765 silly resolved     repository: { type: 'git', url: 'https://github.com/AvianFlu/ncp.git' },
2765 silly resolved     keywords: [ 'cli', 'copy' ],
2765 silly resolved     license: 'MIT',
2765 silly resolved     engine: { node: '>=0.4' },
2765 silly resolved     scripts: { test: 'vows --isolate --spec' },
2765 silly resolved     readme: '# ncp - Asynchronous recursive file & directory copying\n\n[![Build Status](https://secure.travis-ci.org/AvianFlu/ncp.png)](http://travis-ci.org/AvianFlu/ncp)\n\nThink `cp -r`, but pure node, and asynchronous.  `ncp` can be used both as a CLI tool and programmatically.\n\n## Command Line usage\n\nUsage is simple: `ncp [source] [dest] [--limit=concurrency limit]\n[--filter=filter] --stopOnErr`\n\nThe \'filter\' is a Regular Expression - matched files will be copied.\n\nThe \'concurrency limit\' is an integer that represents how many pending file system requests `ncp` has at a time.\n\n\'stopOnErr\' is a boolean flag that will tell `ncp` to stop immediately if any\nerrors arise, rather than attempting to continue while logging errors.\n\nIf there are no errors, `ncp` will output `done.` when complete.  If there are errors, the error messages will be logged to `stdout` and to `./ncp-debug.log`, and the copy operation will attempt to continue.\n\n## Programmatic usage\n\nProgrammatic usage of `ncp` is just as simple.  The only argument to the completion callback is a possible error.  \n\n```javascript\nvar ncp = require(\'ncp\').ncp;\n\nncp.limit = 16;\n\nncp(source, destination, function (err) {\n if (err) {\n   return console.error(err);\n }\n console.log(\'done!\');\n});\n```\n\nYou can also call ncp like `ncp(source, destination, options, callback)`. \n`options` should be a dictionary. Currently, such options are available:\n\n  * `options.filter` - a `RegExp` instance, against which each file name is\n  tested to determine whether to copy it or not, or a function taking single\n  parameter: copied file name, returning `true` or `false`, determining\n  whether to copy file or not.\n\n  * `options.transform` - a function: `function (read, write) { read.pipe(write) }`\n  used to apply streaming transforms while copying.\n\n  * `options.clobber` - boolean=true. if set to false, `ncp` will not overwrite \n  destination files that already exist.\n\nPlease open an issue if any bugs arise.  As always, I accept (working) pull requests, and refunds are available at `/dev/null`.\n',
2765 silly resolved     readmeFilename: 'README.md',
2765 silly resolved     bugs: { url: 'https://github.com/AvianFlu/ncp/issues' },
2765 silly resolved     homepage: 'https://github.com/AvianFlu/ncp',
2765 silly resolved     _id: 'ncp@0.4.2',
2765 silly resolved     _from: 'ncp@0.4.2' } ]
2766 info install ncp@0.4.2 into /usr/local/lib/node_modules/forever/node_modules/utile
2767 info installOne ncp@0.4.2
2768 silly resolved [ { name: 'debug',
2768 silly resolved     version: '0.8.1',
2768 silly resolved     repository: { type: 'git', url: 'git://github.com/visionmedia/debug.git' },
2768 silly resolved     description: 'small debugging utility',
2768 silly resolved     keywords: [ 'debug', 'log', 'debugger' ],
2768 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
2768 silly resolved     dependencies: {},
2768 silly resolved     devDependencies: { mocha: '*' },
2768 silly resolved     main: 'lib/debug.js',
2768 silly resolved     browser: './debug.js',
2768 silly resolved     engines: { node: '*' },
2768 silly resolved     files: [ 'lib/debug.js', 'debug.js' ],
2768 silly resolved     component: { scripts: [Object] },
2768 silly resolved     readme: '# debug\n\n  tiny node.js debugging utility modelled after node core\'s debugging technique.\n\n## Installation\n\n```\n$ npm install debug\n```\n\n## Usage\n\n With `debug` you simply invoke the exported function to generate your debug function, passing it a name which will determine if a noop function is returned, or a decorated `console.error`, so all of the `console` format string goodies you\'re used to work fine. A unique color is selected per-function for visibility.\n\nExample _app.js_:\n\n```js\nvar debug = require(\'debug\')(\'http\')\n  , http = require(\'http\')\n  , name = \'My App\';\n\n// fake app\n\ndebug(\'booting %s\', name);\n\nhttp.createServer(function(req, res){\n  debug(req.method + \' \' + req.url);\n  res.end(\'hello\\n\');\n}).listen(3000, function(){\n  debug(\'listening\');\n});\n\n// fake worker of some kind\n\nrequire(\'./worker\');\n```\n\nExample _worker.js_:\n\n```js\nvar debug = require(\'debug\')(\'worker\');\n\nsetInterval(function(){\n  debug(\'doing some work\');\n}, 1000);\n```\n\n The __DEBUG__ environment variable is then used to enable these based on space or comma-delimited names. Here are some examples:\n\n  ![debug http and worker](http://f.cl.ly/items/18471z1H402O24072r1J/Screenshot.png)\n\n  ![debug worker](http://f.cl.ly/items/1X413v1a3M0d3C2c1E0i/Screenshot.png)\n\n## Millisecond diff\n\n  When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the "+NNNms" will show you how much time was spent between calls.\n\n  ![](http://f.cl.ly/items/2i3h1d3t121M2Z1A3Q0N/Screenshot.png)\n\n  When stdout is not a TTY, `Date#toUTCString()` is used, making it more useful for logging the debug information as shown below:\n\n  ![](http://f.cl.ly/items/112H3i0e0o0P0a2Q2r11/Screenshot.png)\n\n## Conventions\n\n If you\'re using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".\n\n## Wildcards\n\n  The `*` character may be used as a wildcard. Suppose for example your library has debuggers named "connect:bodyParser", "connect:compress", "connect:session", instead of listing all three with `DEBUG=connect:bodyParser,connect.compress,connect:session`, you may simply do `DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.\n\n  You can also exclude specific debuggers by prefixing them with a "-" character.  For example, `DEBUG=* -connect:*` would include all debuggers except those starting with "connect:".\n\n## Browser support\n\n Debug works in the browser as well, currently persisted by `localStorage`. For example if you have `worker:a` and `worker:b` as shown below, and wish to debug both type `debug.enable(\'worker:*\')` in the console and refresh the page, this will remain until you disable with `debug.disable()`.\n\n```js\na = debug(\'worker:a\');\nb = debug(\'worker:b\');\n\nsetInterval(function(){\n  a(\'doing some work\');\n}, 1000);\n\nsetInterval(function(){\n  a(\'doing some work\');\n}, 1200);\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
2768 silly resolved     readmeFilename: 'Readme.md',
2768 silly resolved     bugs: { url: 'https://github.com/visionmedia/debug/issues' },
2768 silly resolved     homepage: 'https://github.com/visionmedia/debug',
2768 silly resolved     _id: 'debug@0.8.1',
2768 silly resolved     _shasum: '20ff4d26f5e422cb68a1bacbbb61039ad8c1c130',
2768 silly resolved     _from: 'debug@0.8.1',
2768 silly resolved     _resolved: 'http://registry.npm.taobao.org/debug/download/debug-0.8.1.tgz',
2768 silly resolved     scripts: {} } ]
2769 info install debug@0.8.1 into /usr/local/lib/node_modules/node-inspector
2770 info installOne debug@0.8.1
2771 silly resolved [ { name: 'eventemitter2',
2771 silly resolved     version: '0.4.12',
2771 silly resolved     description: 'A Node.js event emitter implementation with namespaces, wildcards, TTL and browser support.',
2771 silly resolved     keywords: [ 'event', 'events', 'emitter', 'eventemitter' ],
2771 silly resolved     author: { name: 'hij1nx', email: 'paolo@async.ly' },
2771 silly resolved     contributors: [ [Object], [Object], [Object], [Object], [Object] ],
2771 silly resolved     license: 'MIT',
2771 silly resolved     repository:
2771 silly resolved      { type: 'git',
2771 silly resolved        url: 'git://github.com/hij1nx/EventEmitter2.git' },
2771 silly resolved     devDependencies: { nodeunit: '*', benchmark: '>= 0.2.2' },
2771 silly resolved     main: './lib/eventemitter2.js',
2771 silly resolved     scripts:
2771 silly resolved      { test: 'nodeunit test/simple/* && nodeunit test/wildcardEvents/*',
2771 silly resolved        benchmark: 'node test/perf/benchmark.js' },
2771 silly resolved     readme: '# EventEmitter2\n\nEventEmitter2 is a an implementation of the EventEmitter found in Node.js\n\n## Features\n\n - Namespaces/Wildcards.\n - Times To Listen (TTL), extends the `once` concept with `many`.\n - Browser environment compatibility.\n - Demonstrates good performance in benchmarks\n\n```\nEventEmitterHeatUp x 3,728,965 ops/sec \\302\\2610.68% (60 runs sampled)\nEventEmitter x 2,822,904 ops/sec \\302\\2610.74% (63 runs sampled)\nEventEmitter2 x 7,251,227 ops/sec \\302\\2610.55% (58 runs sampled)\nEventEmitter2 (wild) x 3,220,268 ops/sec \\302\\2610.44% (65 runs sampled)\nFastest is EventEmitter2\n```\n\n## Differences (Non breaking, compatible with existing EventEmitter)\n\n - The constructor takes a configuration object.\n \n```javascript\n    var EventEmitter2 = require(\'eventemitter2\').EventEmitter2;\n    var server = new EventEmitter2({\n      wildcard: true, // should the event emitter use wildcards.\n      delimiter: \'::\', // the delimiter used to segment namespaces, defaults to `.`.\n      newListener: false, // if you want to emit the newListener event set to true.\n      maxListeners: 20, // the max number of listeners that can be assigned to an event, defaults to 10.\n    });\n```\n\n - Getting the actual event that fired.\n\n```javascript\n    server.on(\'foo.*\', function(value1, value2) {\n      console.log(this.event, value1, value2);\n    });\n```\n\n - Fire an event N times and then remove it, an extension of the `once` concept.\n\n```javascript\n    server.many(\'foo\', 4, function() {\n      console.log(\'hello\');\n    });\n```\n\n - Pass in a namespaced event as an array rather than a delimited string.\n\n```javascript\n    server.many([\'foo\', \'bar\', \'bazz\'], function() {\n      console.log(\'hello\');\n    });\n```\n\n\n## API\n\nWhen an `EventEmitter` instance experiences an error, the typical action is\nto emit an `error` event. Error events are treated as a special case.\nIf there is no listener for it, then the default action is to print a stack\ntrace and exit the program.\n\nAll EventEmitters emit the event `newListener` when new listeners are\nadded.\n\n\n**Namespaces** with **Wildcards**\nTo use namespaces/wildcards, pass the `wildcard` option into the EventEmitter constructor.\nWhen namespaces/wildcards are enabled, events can either be strings (`foo.bar`) separated\nby a delimiter or arrays (`[\'foo\', \'bar\']`). The delimiter is also configurable as a \nconstructor option.\n\nAn event name passed to any event emitter method can contain a wild card (the `*` character).\nIf the event name is a string, a wildcard may appear as `foo.*`. If the event name is an array, \nthe wildcard may appear as `[\'foo\', \'*\']`.\n\nIf either of the above described events were passed to the `on` method, subsequent emits such \nas the following would be observed...\n\n```javascript\n   emitter.emit(\'foo.bazz\');\n   emitter.emit([\'foo\', \'bar\']);\n```\n\n\n#### emitter.addListener(event, listener)\n#### emitter.on(event, listener)\n\nAdds a listener to the end of the listeners array for the specified event.\n\n```javascript\n    server.on(\'data\', function(value1, value2, value3 /* accepts any number of expected values... */) {\n      console.log(\'The event was raised!\');\n    });\n```\n\n```javascript\n    server.on(\'data\', function(value) {\n      console.log(\'The event was raised!\');\n    });\n```\n\n#### emitter.onAny(listener)\n\nAdds a listener that will be fired when any event is emitted.\n\n```javascript\n    server.onAny(function(value) {\n      console.log(\'All events trigger this.\');\n    });\n```\n\n#### emitter.offAny(listener)\n\nRemoves the listener that will be fired when any event is emitted.\n\n```javascript\n    server.offAny(function(value) {\n      console.log(\'The event was raised!\');\n    });\n```\n\n#### emitter.once(event, listener)\n\nAdds a **one time** listener for the event. The listener is invoked only the first time the event is fired, after which it is removed.\n\n```javascript\n    server.once(\'get\', function (value) {\n      console.log(\'Ah, we have our first value!\');\n    });\n```\n\n#### emitter.many(event, timesToListen, listener)\n\nAdds a listener that will execute **n times** for the event before being removed. The listener is invoked only the first time the event is fired, after which it is removed.\n\n```javascript\n    server.many(\'get\', 4, function (value) {\n      console.log(\'This event will be listened to exactly four times.\');\n    });\n```\n\n\n#### emitter.removeListener(event, listener)\n#### emitter.off(event, listener)\n\nRemove a listener from the listener array for the specified event. **Caution**: changes array indices in the listener array behind the listener.\n\n```javascript\n    var callback = function(value) {\n      console.log(\'someone connected!\');\n    };\n    server.on(\'get\', callback);\n    // ...\n    server.removeListener(\'get\', callback);\n```\n\n\n#### emitter.removeAllListeners([event])\n\nRemoves all listeners, or those of the specified event.\n\n\n#### emitter.setMaxListeners(n)\n\nBy default EventEmitters will print a warning if more than 10 listeners are added to it. This is a useful default which helps finding memory leaks. Obviously not all Emitters should be limited to 10. This function allows that to be increased. Set to zero for unlimited.\n\n\n#### emitter.listeners(event)\n\nReturns an array of listeners for the specified event. This array can be manipulated, e.g. to remove listeners.\n\n```javascript\n    server.on(\'get\', function(value) {\n      console.log(\'someone connected!\');\n    });\n    console.log(console.log(server.listeners(\'get\')); // [ [Function] ]\n```\n\n#### emitter.listenersAny()\n\nReturns an array of listeners that are listening for any event that is specified. This array can be manipulated, e.g. to remove listeners.\n\n```javascript\n    server.onAny(function(value) {\n      console.log(\'someone connected!\');\n    });\n    console.log(console.log(server.listenersAny()[0]); // [ [Function] ] // someone connected!\n```\n\n#### emitter.emit(event, [arg1], [arg2], [...])\n\nExecute each of the listeners that may be listening for the specified event name in order with the list of arguments.\n\n## Test coverage\n\nThere is a test suite that tries to cover each use case, it can be found <a href="https://github.com/hij1nx/EventEmitter2/tree/master/test">here</a>.\n\n## Licence\n\n(The MIT License)\n\nCopyright (c) 2011 hij1nx <http://www.twitter.com/hij1nx>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \'Software\'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
2771 silly resolved     readmeFilename: 'README.md',
2771 silly resolved     bugs: { url: 'https://github.com/hij1nx/EventEmitter2/issues' },
2771 silly resolved     homepage: 'https://github.com/hij1nx/EventEmitter2',
2771 silly resolved     _id: 'eventemitter2@0.4.12',
2771 silly resolved     _shasum: '6cf14249fdc8799be7416e871e73fd2bb89e35e0',
2771 silly resolved     _from: 'eventemitter2@0.4.12',
2771 silly resolved     _resolved: 'http://registry.npm.taobao.org/eventemitter2/download/eventemitter2-0.4.12.tgz' } ]
2772 info install eventemitter2@0.4.12 into /usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules/broadway
2773 info installOne eventemitter2@0.4.12
2774 silly resolved [ { name: 'resolve',
2774 silly resolved     description: 'resolve like require.resolve() on behalf of files asynchronously and synchronously',
2774 silly resolved     version: '0.3.1',
2774 silly resolved     repository:
2774 silly resolved      { type: 'git',
2774 silly resolved        url: 'git://github.com/substack/node-resolve.git' },
2774 silly resolved     main: 'index.js',
2774 silly resolved     keywords: [ 'resolve', 'require', 'node', 'module' ],
2774 silly resolved     scripts: { test: 'tap test/*.js' },
2774 silly resolved     devDependencies: { tap: '~0.4.0' },
2774 silly resolved     license: 'MIT',
2774 silly resolved     author:
2774 silly resolved      { name: 'James Halliday',
2774 silly resolved        email: 'mail@substack.net',
2774 silly resolved        url: 'http://substack.net' },
2774 silly resolved     readme: '# resolve\n\nimplements the [node `require.resolve()`\nalgorithm](http://nodejs.org/docs/v0.4.8/api/all.html#all_Together...)\nsuch that you can `require.resolve()` on behalf of a file asynchronously and\nsynchronously\n\n[![build status](https://secure.travis-ci.org/substack/node-resolve.png)](http://travis-ci.org/substack/node-resolve)\n\n# example\n\nasynchronously resolve:\n\n``` js\nvar resolve = require(\'resolve\');\nresolve(\'tap\', { basedir: __dirname }, function (err, res) {\n    if (err) console.error(err)\n    else console.log(res)\n});\n```\n\n```\n$ node example/async.js\n/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\n```\n\nsynchronously resolve:\n\n``` js\nvar resolve = require(\'resolve\');\nvar res = resolve.sync(\'tap\', { basedir: __dirname });\nconsole.log(res);\n```\n\n```\n$ node example/sync.js\n/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\n```\n\n# methods\n\n``` js\nvar resolve = require(\'resolve\')\n```\n\n## resolve(pkg, opts={}, cb)\n\nAsynchronously resolve the module path string `pkg` into `cb(err, res)`.\n\noptions are:\n\n* opts.basedir - directory to begin resolving from\n\n* opts.extensions - array of file extensions to search in order\n\n* opts.readFile - how to read files asynchronously\n\n* opts.isFile - function to asynchronously test whether a file exists\n\n* opts.packageFilter - transform the parsed package.json contents before looking\nat the "main" field\n\n* opts.paths - require.paths array to use if nothing is found on the normal\nnode_modules recursive walk (probably don\'t use this)\n\ndefault `opts` values:\n\n``` javascript\n{\n    paths: [],\n    basedir: __dirname,\n    extensions: [ \'.js\' ],\n    readFile: fs.readFile,\n    isFile: function (file, cb) {\n        fs.stat(file, function (err, stat) {\n            if (err && err.code === \'ENOENT\') cb(null, false)\n            else if (err) cb(err)\n            else cb(null, stat.isFile())\n        });\n    }\n}\n```\n\n## resolve.sync(pkg, opts)\n\nSynchronously resolve the module path string `pkg`, returning the result and\nthrowing an error when `pkg` can\'t be resolved.\n\noptions are:\n\n* opts.basedir - directory to begin resolving from\n\n* opts.extensions - array of file extensions to search in order\n\n* opts.readFile - how to read files synchronously\n\n* opts.isFile - function to synchronously test whether a file exists\n\n* opts.packageFilter - transform the parsed package.json contents before looking\nat the "main" field\n\n* opts.paths - require.paths array to use if nothing is found on the normal\nnode_modules recursive walk (probably don\'t use this)\n\ndefault `opts` values:\n\n``` javascript\n{\n    paths: [],\n    basedir: __dirname,\n    extensions: [ \'.js\' ],\n    readFileSync: fs.readFileSync,\n    isFile: function (file) {\n        try { return fs.statSync(file).isFile() }\n        catch (e) { return false }\n    }\n}\n````\n\n## resolve.isCore(pkg)\n\nReturn whether a package is in core.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install resolve\n```\n\n# license\n\nMIT\n',
2774 silly resolved     readmeFilename: 'readme.markdown',
2774 silly resolved     bugs: { url: 'https://github.com/substack/node-resolve/issues' },
2774 silly resolved     homepage: 'https://github.com/substack/node-resolve',
2774 silly resolved     _id: 'resolve@0.3.1',
2774 silly resolved     _from: 'resolve@0.3.1' } ]
2775 info install resolve@0.3.1 into /usr/local/lib/node_modules/grunt-cli
2776 info installOne resolve@0.3.1
2777 silly resolved [ { name: 'rc',
2777 silly resolved     version: '0.3.5',
2777 silly resolved     description: 'hardwired configuration loader',
2777 silly resolved     main: 'index.js',
2777 silly resolved     browserify: 'browser.js',
2777 silly resolved     scripts: { test: 'set -e; node test/test.js; node test/ini.js' },
2777 silly resolved     repository: { type: 'git', url: 'https://github.com/dominictarr/rc.git' },
2777 silly resolved     keywords: [ 'config', 'rc', 'unix', 'defaults' ],
2777 silly resolved     bin: { rc: './index.js' },
2777 silly resolved     author:
2777 silly resolved      { name: 'Dominic Tarr',
2777 silly resolved        email: 'dominic.tarr@gmail.com',
2777 silly resolved        url: 'dominictarr.com' },
2777 silly resolved     licenses: [ 'BSD', 'MIT', 'Apache2' ],
2777 silly resolved     dependencies: { minimist: '~0.0.7', 'deep-extend': '~0.2.5', ini: '~1.1.0' },
2777 silly resolved     readme: '# rc\n\nThe non-configurable configuration loader for lazy people.\n\n## Usage\n\nThe only option is to pass rc the name of your app, and your default configuration.\n\n```javascript\nvar conf = require(\'rc\')(appname, {\n  //defaults go here.\n  port: 2468,\n\n  //defaults which are objects will be merged, not replaced\n  views: {\n    engine: \'jade\'\n  }\n});\n```\n\n`rc` will return your configuration options merged with the defaults you specify.\nIf you pass in a predefined defaults object, it will be mutated:\n\n```javascript\nvar conf = {};\nrequire(\'rc\')(appname, conf);\n```\n\n\n## Standards\n\nGiven your application name (`appname`), rc will look in all the obvious places for configuration.\n\n  * command line arguments (parsed by minimist)\n  * environment variables prefixed with `${appname}_`\n  * if you passed an option `--config file` then from that file\n  * a local `.${appname}rc` or the first found looking in `./ ../ ../../ ../../../` etc.\n  * `$HOME/.${appname}rc`\n  * `$HOME/.${appname}/config`\n  * `$HOME/.config/${appname}`\n  * `$HOME/.config/${appname}/config`\n  * `/etc/${appname}rc`\n  * `/etc/${appname}/config`\n  * the defaults object you passed in.\n\nAll configuration sources that were found will be flattened into one object,\nso that sources **earlier** in this list override later ones.\n\n\n## Configuration File Formats\n\nConfiguration files (e.g. `.appnamerc`) may be in either [json](http://json.org/example) or [ini](http://en.wikipedia.org/wiki/INI_file) format.  rc ignores file extensions of configuration files.  The example configurations below are equivalent:\n\n\n#### Formatted as `ini`\n\n```\n; You can include comments in `ini` format if you want.\n\ndependsOn=0.10.0\n\n\n; `rc` has built-in support for ini sections, see?\n\n[commands]\n  www     = ./commands/www\n  console = ./commands/repl\n\n\n; You can even do nested sections\n\n[generators.options]\n  engine  = ejs\n\n[generators.modules]\n  new     = generate-new\n  engine  = generate-backend\n\n```\n\n#### Formatted as `json`\n\n```json\n{\n  "dependsOn": "0.10.0",\n  "commands": {\n    "www": "./commands/www",\n    "console": "./commands/repl"\n  },\n  "generators": {\n    "options": {\n      "engine": "ejs"\n    },\n    "modules": {\n      "new": "generate-new",\n      "backend": "generate-backend"\n    }\n  }\n}\n```\n\n\n> Since ini, and env variables do not have a standard for types, your application needs be prepared for strings.\n\n\n\n## Advanced Usage\n\n#### Pass in your own `argv`\n\nYou may pass in your own `argv` as the third argument to `rc`.  This is in case you want to [use your own command-line opts parser](https://github.com/dominictarr/rc/pull/12).\n\n```javascript\nrequire(\'rc\')(appname, defaults, customArgvParser);\n```\n\n\n## Note on Performance\n\n`rc` is running `fs.statSync`-- so make sure you don\'t use it in a hot code path (e.g. a request handler) \n\n\n## License\n\nBSD / MIT / Apache2\n',
2777 silly resolved     readmeFilename: 'README.md',
2777 silly resolved     bugs: { url: 'https://github.com/dominictarr/rc/issues' },
2777 silly resolved     homepage: 'https://github.com/dominictarr/rc',
2777 silly resolved     _id: 'rc@0.3.5',
2777 silly resolved     _shasum: 'fce2220593be57aa1296685a7e37ed003dfcc728',
2777 silly resolved     _from: 'rc@0.3.5',
2777 silly resolved     _resolved: 'http://registry.npm.taobao.org/rc/download/rc-0.3.5.tgz' } ]
2778 info install rc@0.3.5 into /usr/local/lib/node_modules/node-inspector
2779 info installOne rc@0.3.5
2780 verbose lib/node_modules/tty.js/node_modules/pty.js unbuild
2781 silly resolved [ { author:
2781 silly resolved      { name: 'Isaac Z. Schlueter',
2781 silly resolved        email: 'i@izs.me',
2781 silly resolved        url: 'http://blog.izs.me' },
2781 silly resolved     name: 'minimatch',
2781 silly resolved     description: 'a glob matcher in javascript',
2781 silly resolved     version: '0.2.14',
2781 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/minimatch.git' },
2781 silly resolved     main: 'minimatch.js',
2781 silly resolved     scripts: { test: 'tap test/*.js' },
2781 silly resolved     engines: { node: '*' },
2781 silly resolved     dependencies: { 'lru-cache': '2', sigmund: '~1.0.0' },
2781 silly resolved     devDependencies: { tap: '' },
2781 silly resolved     license:
2781 silly resolved      { type: 'MIT',
2781 silly resolved        url: 'http://github.com/isaacs/minimatch/raw/master/LICENSE' },
2781 silly resolved     readme: '# minimatch\n\nA minimal matching utility.\n\n[![Build Status](https://secure.travis-ci.org/isaacs/minimatch.png)](http://travis-ci.org/isaacs/minimatch)\n\n\nThis is the matching library used internally by npm.\n\nEventually, it will replace the C binding in node-glob.\n\nIt works by converting glob expressions into JavaScript `RegExp`\nobjects.\n\n## Usage\n\n```javascript\nvar minimatch = require("minimatch")\n\nminimatch("bar.foo", "*.foo") // true!\nminimatch("bar.foo", "*.bar") // false!\nminimatch("bar.foo", "*.+(bar|foo)", { debug: true }) // true, and noisy!\n```\n\n## Features\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n\n## Minimatch Class\n\nCreate a minimatch object by instanting the `minimatch.Minimatch` class.\n\n```javascript\nvar Minimatch = require("minimatch").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n### Properties\n\n* `pattern` The original pattern the minimatch object represents.\n* `options` The options supplied to the constructor.\n* `set` A 2-dimensional array of regexp or string expressions.\n  Each row in the\n  array corresponds to a brace-expanded pattern.  Each item in the row\n  corresponds to a single path-part.  For example, the pattern\n  `{a,b/c}/d` would expand to a set of patterns like:\n\n        [ [ a, d ]\n        , [ b, c, d ] ]\n\n    If a portion of the pattern doesn\'t have any "magic" in it\n    (that is, it\'s something like `"foo"` rather than `fo*o?`), then it\n    will be left as a string rather than converted to a regular\n    expression.\n\n* `regexp` Created by the `makeRe` method.  A single regular expression\n  expressing the entire pattern.  This is useful in cases where you wish\n  to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled.\n* `negate` True if the pattern is negated.\n* `comment` True if the pattern is a comment.\n* `empty` True if the pattern is `""`.\n\n### Methods\n\n* `makeRe` Generate the `regexp` member if necessary, and return it.\n  Will return `false` if the pattern is invalid.\n* `match(fname)` Return true if the filename matches the pattern, or\n  false otherwise.\n* `matchOne(fileArray, patternArray, partial)` Take a `/`-split\n  filename, and match it against a single row in the `regExpSet`.  This\n  method is mainly for internal use, but is exposed so that it can be\n  used by a glob-walker that needs to avoid excessive filesystem calls.\n\nAll other methods are internal, and will be called as necessary.\n\n## Functions\n\nThe top-level exported function has a `cache` property, which is an LRU\ncache set to store 100 items.  So, calling these methods repeatedly\nwith the same pattern and options will use the same Minimatch object,\nsaving the cost of parsing it multiple times.\n\n### minimatch(path, pattern, options)\n\nMain export.  Tests a path against the pattern using the options.\n\n```javascript\nvar isJS = minimatch(file, "*.js", { matchBase: true })\n```\n\n### minimatch.filter(pattern, options)\n\nReturns a function that tests its\nsupplied argument, suitable for use with `Array.filter`.  Example:\n\n```javascript\nvar javascripts = fileList.filter(minimatch.filter("*.js", {matchBase: true}))\n```\n\n### minimatch.match(list, pattern, options)\n\nMatch against the list of\nfiles, in the style of fnmatch or glob.  If nothing is matched, and\noptions.nonull is set, then return a list containing the pattern itself.\n\n```javascript\nvar javascripts = minimatch.match(fileList, "*.js", {matchBase: true}))\n```\n\n### minimatch.makeRe(pattern, options)\n\nMake a regular expression object from the pattern.\n\n## Options\n\nAll options are `false` by default.\n\n### debug\n\nDump a ton of stuff to stderr.\n\n### nobrace\n\nDo not expand `{a,b}` and `{1..3}` brace sets.\n\n### noglobstar\n\nDisable `**` matching against multiple folder names.\n\n### dot\n\nAllow patterns to match filenames starting with a period, even if\nthe pattern does not explicitly have a period in that spot.\n\nNote that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot`\nis set.\n\n### noext\n\nDisable "extglob" style patterns like `+(a|b)`.\n\n### nocase\n\nPerform a case-insensitive match.\n\n### nonull\n\nWhen a match is not found by `minimatch.match`, return a list containing\nthe pattern itself.  When set, an empty list is returned if there are\nno matches.\n\n### matchBase\n\nIf set, then patterns without slashes will be matched\nagainst the basename of the path if it contains slashes.  For example,\n`a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n### nocomment\n\nSuppress the behavior of treating `#` at the start of a pattern as a\ncomment.\n\n### nonegate\n\nSuppress the behavior of treating a leading `!` character as negation.\n\n### flipNegate\n\nReturns from negate expressions the same as if they were not negated.\n(Ie, true on a hit, false on a miss.)\n\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between minimatch and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen minimatch.match returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`minimatch.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n',
2781 silly resolved     readmeFilename: 'README.md',
2781 silly resolved     bugs: { url: 'https://github.com/isaacs/minimatch/issues' },
2781 silly resolved     homepage: 'https://github.com/isaacs/minimatch',
2781 silly resolved     _id: 'minimatch@0.2.14',
2781 silly resolved     _from: 'minimatch@0.2.14' } ]
2782 info install minimatch@0.2.14 into /usr/local/lib/node_modules/grunt-init/node_modules/grunt
2783 info installOne minimatch@0.2.14
2784 silly resolved [ { author:
2784 silly resolved      { name: 'Isaac Z. Schlueter',
2784 silly resolved        email: 'i@izs.me',
2784 silly resolved        url: 'http://blog.izs.me' },
2784 silly resolved     name: 'minimatch',
2784 silly resolved     description: 'a glob matcher in javascript',
2784 silly resolved     version: '0.2.14',
2784 silly resolved     repository: { type: 'git', url: 'git://github.com/isaacs/minimatch.git' },
2784 silly resolved     main: 'minimatch.js',
2784 silly resolved     scripts: { test: 'tap test/*.js' },
2784 silly resolved     engines: { node: '*' },
2784 silly resolved     dependencies: { 'lru-cache': '2', sigmund: '~1.0.0' },
2784 silly resolved     devDependencies: { tap: '' },
2784 silly resolved     license:
2784 silly resolved      { type: 'MIT',
2784 silly resolved        url: 'http://github.com/isaacs/minimatch/raw/master/LICENSE' },
2784 silly resolved     readme: '# minimatch\n\nA minimal matching utility.\n\n[![Build Status](https://secure.travis-ci.org/isaacs/minimatch.png)](http://travis-ci.org/isaacs/minimatch)\n\n\nThis is the matching library used internally by npm.\n\nEventually, it will replace the C binding in node-glob.\n\nIt works by converting glob expressions into JavaScript `RegExp`\nobjects.\n\n## Usage\n\n```javascript\nvar minimatch = require("minimatch")\n\nminimatch("bar.foo", "*.foo") // true!\nminimatch("bar.foo", "*.bar") // false!\nminimatch("bar.foo", "*.+(bar|foo)", { debug: true }) // true, and noisy!\n```\n\n## Features\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* "Globstar" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n\n## Minimatch Class\n\nCreate a minimatch object by instanting the `minimatch.Minimatch` class.\n\n```javascript\nvar Minimatch = require("minimatch").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n### Properties\n\n* `pattern` The original pattern the minimatch object represents.\n* `options` The options supplied to the constructor.\n* `set` A 2-dimensional array of regexp or string expressions.\n  Each row in the\n  array corresponds to a brace-expanded pattern.  Each item in the row\n  corresponds to a single path-part.  For example, the pattern\n  `{a,b/c}/d` would expand to a set of patterns like:\n\n        [ [ a, d ]\n        , [ b, c, d ] ]\n\n    If a portion of the pattern doesn\'t have any "magic" in it\n    (that is, it\'s something like `"foo"` rather than `fo*o?`), then it\n    will be left as a string rather than converted to a regular\n    expression.\n\n* `regexp` Created by the `makeRe` method.  A single regular expression\n  expressing the entire pattern.  This is useful in cases where you wish\n  to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled.\n* `negate` True if the pattern is negated.\n* `comment` True if the pattern is a comment.\n* `empty` True if the pattern is `""`.\n\n### Methods\n\n* `makeRe` Generate the `regexp` member if necessary, and return it.\n  Will return `false` if the pattern is invalid.\n* `match(fname)` Return true if the filename matches the pattern, or\n  false otherwise.\n* `matchOne(fileArray, patternArray, partial)` Take a `/`-split\n  filename, and match it against a single row in the `regExpSet`.  This\n  method is mainly for internal use, but is exposed so that it can be\n  used by a glob-walker that needs to avoid excessive filesystem calls.\n\nAll other methods are internal, and will be called as necessary.\n\n## Functions\n\nThe top-level exported function has a `cache` property, which is an LRU\ncache set to store 100 items.  So, calling these methods repeatedly\nwith the same pattern and options will use the same Minimatch object,\nsaving the cost of parsing it multiple times.\n\n### minimatch(path, pattern, options)\n\nMain export.  Tests a path against the pattern using the options.\n\n```javascript\nvar isJS = minimatch(file, "*.js", { matchBase: true })\n```\n\n### minimatch.filter(pattern, options)\n\nReturns a function that tests its\nsupplied argument, suitable for use with `Array.filter`.  Example:\n\n```javascript\nvar javascripts = fileList.filter(minimatch.filter("*.js", {matchBase: true}))\n```\n\n### minimatch.match(list, pattern, options)\n\nMatch against the list of\nfiles, in the style of fnmatch or glob.  If nothing is matched, and\noptions.nonull is set, then return a list containing the pattern itself.\n\n```javascript\nvar javascripts = minimatch.match(fileList, "*.js", {matchBase: true}))\n```\n\n### minimatch.makeRe(pattern, options)\n\nMake a regular expression object from the pattern.\n\n## Options\n\nAll options are `false` by default.\n\n### debug\n\nDump a ton of stuff to stderr.\n\n### nobrace\n\nDo not expand `{a,b}` and `{1..3}` brace sets.\n\n### noglobstar\n\nDisable `**` matching against multiple folder names.\n\n### dot\n\nAllow patterns to match filenames starting with a period, even if\nthe pattern does not explicitly have a period in that spot.\n\nNote that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot`\nis set.\n\n### noext\n\nDisable "extglob" style patterns like `+(a|b)`.\n\n### nocase\n\nPerform a case-insensitive match.\n\n### nonull\n\nWhen a match is not found by `minimatch.match`, return a list containing\nthe pattern itself.  When set, an empty list is returned if there are\nno matches.\n\n### matchBase\n\nIf set, then patterns without slashes will be matched\nagainst the basename of the path if it contains slashes.  For example,\n`a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n### nocomment\n\nSuppress the behavior of treating `#` at the start of a pattern as a\ncomment.\n\n### nonegate\n\nSuppress the behavior of treating a leading `!` character as negation.\n\n### flipNegate\n\nReturns from negate expressions the same as if they were not negated.\n(Ie, true on a hit, false on a miss.)\n\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between minimatch and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen minimatch.match returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`minimatch.match([], "\\\\*a\\\\?")` will return `"\\\\*a\\\\?"` rather than\n`"*a?"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds.\n',
2784 silly resolved     readmeFilename: 'README.md',
2784 silly resolved     bugs: { url: 'https://github.com/isaacs/minimatch/issues' },
2784 silly resolved     homepage: 'https://github.com/isaacs/minimatch',
2784 silly resolved     _id: 'minimatch@0.2.14',
2784 silly resolved     _from: 'minimatch@0.2.14' } ]
2785 info install minimatch@0.2.14 into /usr/local/lib/node_modules/grunt
2786 info installOne minimatch@0.2.14
2787 silly resolved [ { name: 'express',
2787 silly resolved     description: 'Sinatra inspired web development framework',
2787 silly resolved     version: '4.0.0',
2787 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
2787 silly resolved     contributors: [ [Object], [Object], [Object], [Object], [Object], [Object] ],
2787 silly resolved     dependencies:
2787 silly resolved      { parseurl: '1.0.1',
2787 silly resolved        accepts: '1.0.0',
2787 silly resolved        'type-is': '1.0.0',
2787 silly resolved        'range-parser': '1.0.0',
2787 silly resolved        cookie: '0.1.0',
2787 silly resolved        'buffer-crc32': '0.2.1',
2787 silly resolved        fresh: '0.2.2',
2787 silly resolved        methods: '0.1.0',
2787 silly resolved        send: '0.2.0',
2787 silly resolved        'cookie-signature': '1.0.3',
2787 silly resolved        'merge-descriptors': '0.0.2',
2787 silly resolved        'utils-merge': '1.0.0',
2787 silly resolved        'escape-html': '1.0.1',
2787 silly resolved        qs: '0.6.6',
2787 silly resolved        'serve-static': '1.0.1',
2787 silly resolved        'path-to-regexp': '0.1.2',
2787 silly resolved        debug: '>= 0.7.3 < 1' },
2787 silly resolved     devDependencies:
2787 silly resolved      { ejs: '~0.8.4',
2787 silly resolved        mocha: '~1.15.1',
2787 silly resolved        jade: '~0.30.0',
2787 silly resolved        hjs: '~0.0.6',
2787 silly resolved        stylus: '~0.40.0',
2787 silly resolved        should: '~2.1.1',
2787 silly resolved        'connect-redis': '~1.4.5',
2787 silly resolved        marked: '0.2.10',
2787 silly resolved        supertest: '~0.8.1',
2787 silly resolved        'body-parser': '1.0.0',
2787 silly resolved        'cookie-parser': '1.0.1',
2787 silly resolved        'static-favicon': '1.0.0',
2787 silly resolved        'express-session': '1.0.1',
2787 silly resolved        morgan: '1.0.0',
2787 silly resolved        vhost: '1.0.0' },
2787 silly resolved     keywords:
2787 silly resolved      [ 'express',
2787 silly resolved        'framework',
2787 silly resolved        'sinatra',
2787 silly resolved        'web',
2787 silly resolved        'rest',
2787 silly resolved        'restful',
2787 silly resolved        'router',
2787 silly resolved        'app',
2787 silly resolved        'api' ],
2787 silly resolved     repository: { type: 'git', url: 'git://github.com/visionmedia/express' },
2787 silly resolved     scripts: { prepublish: 'npm prune', test: 'make test' },
2787 silly resolved     engines: { node: '>= 0.8.0' },
2787 silly resolved     license: 'MIT',
2787 silly resolved     readme: '[![express logo](http://f.cl.ly/items/0V2S1n0K1i3y1c122g04/Screen%20Shot%202012-04-11%20at%209.59.42%20AM.png)](http://expressjs.com/)\n\n  Fast, unopinionated, minimalist web framework for [node](http://nodejs.org).\n\n  [![Build Status](https://secure.travis-ci.org/visionmedia/express.svg)](https://travis-ci.org/visionmedia/express) [![Gittip](https://img.shields.io/gittip/visionmedia.svg)](https://www.gittip.com/visionmedia/)\n\n```js\nvar express = require(\'express\');\nvar app = express();\n\napp.get(\'/\', function(req, res){\n  res.send(\'Hello World\');\n});\n\napp.listen(3000);\n```\n\n  Note that Express v4 release candidates have been released. \n  Please try it out, but not in production, and report any issues you may find here or to the appropriate repositories.\n  Be sure to read [Migrating from 3.x to 4.x](https://github.com/visionmedia/express/wiki/Migrating-from-3.x-to-4.x) as well as [New features in 4.x](https://github.com/visionmedia/express/wiki/New-features-in-4.x).\n\n## Installation\n\n    $ npm install express\n\n## Quick Start\n\n The quickest way to get started with express is to utilize the executable [`express(1)`](http://github.com/expressjs/generator) to generate an application as shown below:\n \n Install the executable. The executable\'s major version will match Express\'s:\n \n    $ npm install -g express-generator@3\n\n Create the app:\n\n    $ express /tmp/foo && cd /tmp/foo\n\n Install dependencies:\n\n    $ npm install\n\n Start the server:\n\n    $ npm start\n\n## Features\n\n  * Robust routing\n  * HTTP helpers (redirection, caching, etc)\n  * View system supporting 14+ template engines\n  * Content negotiation\n  * Focus on high performance\n  * Environment based configuration\n  * Executable for generating applications quickly\n  * High test coverage\n\n## Philosophy\n\n  The Express philosophy is to provide small, robust tooling for HTTP servers, making\n  it a great solution for single page applications, web sites, hybrids, or public\n  HTTP APIs.\n\n  Express does not force you to use any specific ORM or template engine. With support for over\n  14 template engines via [Consolidate.js](http://github.com/visionmedia/consolidate.js),\n  you can quickly craft your perfect framework.\n\n## More Information\n\n  * [Website and Documentation](http://expressjs.com/) stored at [visionmedia/expressjs.com](https://github.com/visionmedia/expressjs.com)\n  * Join #express on freenode\n  * [Google Group](http://groups.google.com/group/express-js) for discussion\n  * Follow [tjholowaychuk](http://twitter.com/tjholowaychuk) and [defunctzombie](https://twitter.com/defunctzombie) on twitter for updates\n  * Visit the [Wiki](http://github.com/visionmedia/express/wiki)\n  * [Русскоязычная документация](http://jsman.ru/express/)\n  * Run express examples [online](https://runnable.com/express)\n\n## Viewing Examples\n\nClone the Express repo, then install the dev dependencies to install all the example / test suite dependencies:\n\n    $ git clone git://github.com/visionmedia/express.git --depth 1\n    $ cd express\n    $ npm install\n\nThen run whichever tests you want:\n\n    $ node examples/content-negotiation\n\nYou can also view live examples here:\n\n<a href="https://runnable.com/express" target="_blank"><img src="https://runnable.com/external/styles/assets/runnablebtn.png" style="width:67px;height:25px;"></a>\n\n## Running Tests\n\nTo run the test suite, first invoke the following command within the repo, installing the development dependencies:\n\n    $ npm install\n\nThen run the tests:\n\n    $ make test\n\n## Contributors\n\n  https://github.com/visionmedia/express/graphs/contributors\n\n## License\n\nMIT\n',
2787 silly resolved     readmeFilename: 'Readme.md',
2787 silly resolved     bugs: { url: 'https://github.com/visionmedia/express/issues' },
2787 silly resolved     homepage: 'https://github.com/visionmedia/express',
2787 silly resolved     _id: 'express@4.0.0',
2787 silly resolved     _shasum: '274dc82933c9f574cc38a0ce5ea8172be9c6b094',
2787 silly resolved     _from: 'express@4.0.0',
2787 silly resolved     _resolved: 'http://registry.npm.taobao.org/express/download/express-4.0.0.tgz' } ]
2788 info install express@4.0.0 into /usr/local/lib/node_modules/node-inspector
2789 info installOne express@4.0.0
2790 silly resolved [ { name: 'request',
2790 silly resolved     description: 'Simplified HTTP request client.',
2790 silly resolved     tags: [ 'http', 'simple', 'util', 'utility' ],
2790 silly resolved     version: '2.16.6',
2790 silly resolved     author: { name: 'Mikeal Rogers', email: 'mikeal.rogers@gmail.com' },
2790 silly resolved     repository: { type: 'git', url: 'http://github.com/mikeal/request.git' },
2790 silly resolved     bugs: { url: 'http://github.com/mikeal/request/issues' },
2790 silly resolved     engines: [ 'node >= 0.8.0' ],
2790 silly resolved     main: 'index.js',
2790 silly resolved     dependencies:
2790 silly resolved      { 'form-data': '~0.0.3',
2790 silly resolved        mime: '~1.2.7',
2790 silly resolved        hawk: '~0.10.2',
2790 silly resolved        'node-uuid': '~1.4.0',
2790 silly resolved        'cookie-jar': '~0.2.0',
2790 silly resolved        'aws-sign': '~0.2.0',
2790 silly resolved        'oauth-sign': '~0.2.0',
2790 silly resolved        'forever-agent': '~0.2.0',
2790 silly resolved        'tunnel-agent': '~0.2.0',
2790 silly resolved        'json-stringify-safe': '~3.0.0',
2790 silly resolved        qs: '~0.5.4' },
2790 silly resolved     scripts: { test: 'node tests/run.js' },
2790 silly resolved     readme: '# Request -- Simplified HTTP request method\n\n## Install\n\n<pre>\n  npm install request\n</pre>\n\nOr from source:\n\n<pre>\n  git clone git://github.com/mikeal/request.git \n  cd request\n  npm link\n</pre>\n\n## Super simple to use\n\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```javascript\nvar request = require(\'request\');\nrequest(\'http://www.google.com\', function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log(body) // Print the google web page.\n  }\n})\n```\n\n## Streaming\n\nYou can stream any response to a file stream.\n\n```javascript\nrequest(\'http://google.com/doodle.png\').pipe(fs.createWriteStream(\'doodle.png\'))\n```\n\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types, in this case `application/json`, and use the proper content-type in the PUT request if one is not already provided in the headers.\n\n```javascript\nfs.createReadStream(\'file.json\').pipe(request.put(\'http://mysite.com/obj.json\'))\n```\n\nRequest can also pipe to itself. When doing so the content-type and content-length will be preserved in the PUT headers.\n\n```javascript\nrequest.get(\'http://google.com/img.png\').pipe(request.put(\'http://mysite.com/img.png\'))\n```\n\nNow let\'s get fancy.\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    if (req.method === \'PUT\') {\n      req.pipe(request.put(\'http://mysite.com/doodle.png\'))\n    } else if (req.method === \'GET\' || req.method === \'HEAD\') {\n      request.get(\'http://mysite.com/doodle.png\').pipe(resp)\n    } \n  }\n})\n```\n\nYou can also pipe() from a http.ServerRequest instance and to a http.ServerResponse instance. The HTTP method and headers will be sent as well as the entity-body data. Which means that, if you don\'t really care about security, you can do:\n\n```javascript\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    var x = request(\'http://mysite.com/doodle.png\')\n    req.pipe(x)\n    x.pipe(resp)\n  }\n})\n```\n\nAnd since pipe() returns the destination stream in node 0.5.x you can do one line proxying :)\n\n```javascript\nreq.pipe(request(\'http://mysite.com/doodle.png\')).pipe(resp)\n```\n\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\n\n```javascript\nvar r = request.defaults({\'proxy\':\'http://localproxy.com\'})\n\nhttp.createServer(function (req, resp) {\n  if (req.url === \'/doodle.png\') {\n    r.get(\'http://google.com/doodle.png\').pipe(resp)\n  }\n})\n```\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\n\n## Forms\n\n`request` supports `application/x-www-form-urlencoded` and `multipart/form-data` form uploads. For `multipart/related` refer to the `multipart` API.\n\nUrl encoded forms are simple\n\n```javascript\nrequest.post(\'http://service.com/upload\', {form:{key:\'value\'}})\n// or\nrequest.post(\'http://service.com/upload\').form({key:\'value\'})\n```\n\nFor `multipart/form-data` we use the [form-data](https://github.com/felixge/node-form-data) library by [@felixge](https://github.com/felixge). You don\'t need to worry about piping the form object or setting the headers, `request` will handle that for you.\n\n```javascript\nvar r = request.post(\'http://service.com/upload\')\nvar form = r.form()\nform.append(\'my_field\', \'my_value\')\nform.append(\'my_buffer\', new Buffer([1, 2, 3]))\nform.append(\'my_file\', fs.createReadStream(path.join(__dirname, \'doodle.png\'))\nform.append(\'remote_file\', request(\'http://google.com/doodle.png\'))\n```\n\n## HTTP Authentication\n\n```javascript\nrequest.auth(\'username\', \'password\', false).get(\'http://some.server.com/\');\n// or\nrequest.get(\'http://some.server.com/\', {\n  \'auth\': {\n    \'user\': \'username\',\n    \'pass\': \'password\',\n    \'sendImmediately\': false\n  }\n});\n```\n\nIf passed as an option, `auth` should be a hash containing values `user` || `username`, `password` || `pass`, and `sendImmediately` (optional).  The method form takes parameters `auth(username, password, sendImmediately)`.\n\n`sendImmediately` defaults to true, which will cause a basic authentication header to be sent.  If `sendImmediately` is `false`, then `request` will retry with a proper authentication header after receiving a 401 response from the server (which must contain a `WWW-Authenticate` header indicating the required authentication method).\n\nDigest authentication is supported, but it only works with `sendImmediately` set to `false` (otherwise `request` will send basic authentication on the initial request, which will probably cause the request to fail).\n\n## OAuth Signing\n\n```javascript\n// Twitter OAuth\nvar qs = require(\'querystring\')\n  , oauth =\n    { callback: \'http://mysite.com/callback/\'\n    , consumer_key: CONSUMER_KEY\n    , consumer_secret: CONSUMER_SECRET\n    }\n  , url = \'https://api.twitter.com/oauth/request_token\'\n  ;\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\n  // Ideally, you would take the body in the response\n  // and construct a URL that a user clicks on (like a sign in button).\n  // The verifier is only available in the response after a user has \n  // verified with twitter that they are authorizing your app.\n  var access_token = qs.parse(body)\n    , oauth = \n      { consumer_key: CONSUMER_KEY\n      , consumer_secret: CONSUMER_SECRET\n      , token: access_token.oauth_token\n      , verifier: access_token.oauth_verifier\n      }\n    , url = \'https://api.twitter.com/oauth/access_token\'\n    ;\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\n    var perm_token = qs.parse(body)\n      , oauth = \n        { consumer_key: CONSUMER_KEY\n        , consumer_secret: CONSUMER_SECRET\n        , token: perm_token.oauth_token\n        , token_secret: perm_token.oauth_token_secret\n        }\n      , url = \'https://api.twitter.com/1/users/show.json?\'\n      , params = \n        { screen_name: perm_token.screen_name\n        , user_id: perm_token.user_id\n        }\n      ;\n    url += qs.stringify(params)\n    request.get({url:url, oauth:oauth, json:true}, function (e, r, user) {\n      console.log(user)\n    })\n  })\n})\n```\n\n\n\n### request(options, callback)\n\nThe first argument can be either a url or an options object. The only required option is uri, all others are optional.\n\n* `uri` || `url` - fully qualified uri or a parsed url object from url.parse()\n* `qs` - object containing querystring values to be appended to the uri\n* `method` - http method, defaults to GET\n* `headers` - http headers, defaults to {}\n* `body` - entity body for PATCH, POST and PUT requests. Must be buffer or string.\n* `form` - when passed an object this will set `body` but to a querystring representation of value and adds `Content-type: application/x-www-form-urlencoded; charset=utf-8` header. When passed no option a FormData instance is returned that will be piped to request.\n* `auth` - A hash containing values `user` || `username`, `password` || `pass`, and `sendImmediately` (optional).  See documentation above.\n* `json` - sets `body` but to JSON representation of value and adds `Content-type: application/json` header.  Additionally, parses the response body as json.\n* `multipart` - (experimental) array of objects which contains their own headers and `body` attribute. Sends `multipart/related` request. See example below.\n* `followRedirect` - follow HTTP 3xx responses as redirects. defaults to true.\n* `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects. defaults to false.\n* `maxRedirects` - the maximum number of redirects to follow, defaults to 10.\n* `encoding` - Encoding to be used on `setEncoding` of response data. If set to `null`, the body is returned as a Buffer.\n* `pool` - A hash object containing the agents for these requests. If omitted this request will use the global pool which is set to node\'s default maxSockets.\n* `pool.maxSockets` - Integer containing the maximum amount of sockets in the pool.\n* `timeout` - Integer containing the number of milliseconds to wait for a request to respond before aborting the request\t\n* `proxy` - An HTTP proxy to be used. Support proxy Auth with Basic Auth the same way it\'s supported with the `url` parameter by embedding the auth info in the uri.\n* `oauth` - Options for OAuth HMAC-SHA1 signing, see documentation above.\n* `hawk` - Options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example).\n* `strictSSL` - Set to `true` to require that SSL certificates be valid. Note: to use your own certificate authority, you need to specify an agent that was created with that ca as an option.\n* `jar` - Set to `false` if you don\'t want cookies to be remembered for future use or define your custom cookie jar (see examples section)\n* `aws` - object containing aws signing information, should have the properties `key` and `secret` as well as `bucket` unless you\'re specifying your bucket as part of the path, or you are making a request that doesn\'t use a bucket (i.e. GET Services)\n\n\nThe callback argument gets 3 arguments. The first is an error when applicable (usually from the http.Client option not the http.ClientRequest object). The second in an http.ClientResponse object. The third is the response body String or Buffer.\n\n## Convenience methods\n\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\n\n### request.defaults(options)  \n  \nThis method returns a wrapper around the normal request API that defaults to whatever options you pass in to it.\n\n### request.put\n\nSame as request() but defaults to `method: "PUT"`.\n\n```javascript\nrequest.put(url)\n```\n\n### request.patch\n\nSame as request() but defaults to `method: "PATCH"`.\n\n```javascript\nrequest.patch(url)\n```\n\n### request.post\n\nSame as request() but defaults to `method: "POST"`.\n\n```javascript\nrequest.post(url)\n```\n\n### request.head\n\nSame as request() but defaults to `method: "HEAD"`.\n\n```javascript\nrequest.head(url)\n```\n\n### request.del\n\nSame as request() but defaults to `method: "DELETE"`.\n\n```javascript\nrequest.del(url)\n```\n\n### request.get\n\nAlias to normal request method for uniformity.\n\n```javascript\nrequest.get(url)\n```\n### request.cookie\n\nFunction that creates a new cookie.\n\n```javascript\nrequest.cookie(\'cookie_string_here\')\n```\n### request.jar\n\nFunction that creates a new cookie jar.\n\n```javascript\nrequest.jar()\n```\n\n\n## Examples:\n\n```javascript\n  var request = require(\'request\')\n    , rand = Math.floor(Math.random()*100000000).toString()\n    ;\n  request(\n    { method: \'PUT\'\n    , uri: \'http://mikeal.iriscouch.com/testjs/\' + rand\n    , multipart: \n      [ { \'content-type\': \'application/json\'\n        ,  body: JSON.stringify({foo: \'bar\', _attachments: {\'message.txt\': {follows: true, length: 18, \'content_type\': \'text/plain\' }}})\n        }\n      , { body: \'I am an attachment\' }\n      ] \n    }\n  , function (error, response, body) {\n      if(response.statusCode == 201){\n        console.log(\'document saved as: http://mikeal.iriscouch.com/testjs/\'+ rand)\n      } else {\n        console.log(\'error: \'+ response.statusCode)\n        console.log(body)\n      }\n    }\n  )\n```\nCookies are enabled by default (so they can be used in subsequent requests). To disable cookies set jar to false (either in defaults or in the options sent).\n\n```javascript\nvar request = request.defaults({jar: false})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\n\nIf you to use a custom cookie jar (instead of letting request use its own global cookie jar) you do so by setting the jar default or by specifying it as an option:\n\n```javascript\nvar j = request.jar()\nvar request = request.defaults({jar:j})\nrequest(\'http://www.google.com\', function () {\n  request(\'http://images.google.com\')\n})\n```\nOR\n\n```javascript\nvar j = request.jar()\nvar cookie = request.cookie(\'your_cookie_here\')\nj.add(cookie)\nrequest({url: \'http://www.google.com\', jar: j}, function () {\n  request(\'http://images.google.com\')\n})\n```\n',
2790 silly resolved     readmeFilename: 'README.md',
2790 silly resolved     homepage: 'https://github.com/mikeal/request',
2790 silly resolved     _id: 'request@2.16.6',
2790 silly resolved     _from: 'request@2.16.6' } ]
2791 info install request@2.16.6 into /usr/local/lib/node_modules/forever/node_modules/winston
2792 info installOne request@2.16.6
2793 silly resolved [ { name: 'commander',
2793 silly resolved     version: '0.6.1',
2793 silly resolved     description: 'the complete solution for node.js command-line programs',
2793 silly resolved     keywords: [ 'command', 'option', 'parser', 'prompt', 'stdin' ],
2793 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
2793 silly resolved     repository:
2793 silly resolved      { type: 'git',
2793 silly resolved        url: 'https://github.com/visionmedia/commander.js.git' },
2793 silly resolved     dependencies: {},
2793 silly resolved     devDependencies: { should: '>= 0.0.1' },
2793 silly resolved     scripts: { test: 'make test' },
2793 silly resolved     main: 'index',
2793 silly resolved     engines: { node: '>= 0.4.x' },
2793 silly resolved     readme: '# Commander.js\n\n  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby\'s [commander](https://github.com/visionmedia/commander).\n\n [![Build Status](https://secure.travis-ci.org/visionmedia/commander.js.png)](http://travis-ci.org/visionmedia/commander.js)\n\n## Installation\n\n    $ npm install commander\n\n## Option parsing\n\n Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require(\'commander\');\n\nprogram\n  .version(\'0.0.1\')\n  .option(\'-p, --peppers\', \'Add peppers\')\n  .option(\'-P, --pineapple\', \'Add pineapple\')\n  .option(\'-b, --bbq\', \'Add bbq sauce\')\n  .option(\'-c, --cheese [type]\', \'Add the specified type of cheese [marble]\', \'marble\')\n  .parse(process.argv);\n\nconsole.log(\'you ordered a pizza with:\');\nif (program.peppers) console.log(\'  - peppers\');\nif (program.pineapple) console.log(\'  - pineappe\');\nif (program.bbq) console.log(\'  - bbq\');\nconsole.log(\'  - %s cheese\', program.cheese);\n```\n\n Short flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as "--template-engine" are camel-cased, becoming `program.templateEngine` etc.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```  \n $ ./examples/pizza --help\n\n   Usage: pizza [options]\n\n   Options:\n\n     -V, --version        output the version number\n     -p, --peppers        Add peppers\n     -P, --pineapple      Add pineappe\n     -b, --bbq            Add bbq sauce\n     -c, --cheese <type>  Add the specified type of cheese [marble]\n     -h, --help           output usage information\n\n```\n\n## Coercion\n\n```js\nfunction range(val) {\n  return val.split(\'..\').map(Number);\n}\n\nfunction list(val) {\n  return val.split(\',\');\n}\n\nprogram\n  .version(\'0.0.1\')\n  .usage(\'[options] <file ...>\')\n  .option(\'-i, --integer <n>\', \'An integer argument\', parseInt)\n  .option(\'-f, --float <n>\', \'A float argument\', parseFloat)\n  .option(\'-r, --range <a>..<b>\', \'A range\', range)\n  .option(\'-l, --list <items>\', \'A list\', list)\n  .option(\'-o, --optional [value]\', \'An optional value\')\n  .parse(process.argv);\n\nconsole.log(\' int: %j\', program.integer);\nconsole.log(\' float: %j\', program.float);\nconsole.log(\' optional: %j\', program.optional);\nprogram.range = program.range || [];\nconsole.log(\' range: %j..%j\', program.range[0], program.range[1]);\nconsole.log(\' list: %j\', program.list);\nconsole.log(\' args: %j\', program.args);\n```\n\n## Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for "--help". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviours, for example\n in the following executable "stuff" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require(\'../\');\n\nfunction list(val) {\n  return val.split(\',\').map(Number);\n}\n\nprogram\n  .version(\'0.0.1\')\n  .option(\'-f, --foo\', \'enable some foo\')\n  .option(\'-b, --bar\', \'enable some bar\')\n  .option(\'-B, --baz\', \'enable some baz\');\n\n// must be before .parse() since\n// node\'s emit() is immediate\n\nprogram.on(\'--help\', function(){\n  console.log(\'  Examples:\');\n  console.log(\'\');\n  console.log(\'    $ custom-help --help\');\n  console.log(\'    $ custom-help -h\');\n  console.log(\'\');\n});\n\nprogram.parse(process.argv);\n\nconsole.log(\'stuff\');\n```\n\nyielding the following help output:\n\n```\n\nUsage: custom-help [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n\n  $ custom-help --help\n  $ custom-help -h\n\n```\n\n## .prompt(msg, fn)\n\n Single-line prompt:\n\n```js\nprogram.prompt(\'name: \', function(name){\n  console.log(\'hi %s\', name);\n});\n```\n\n Multi-line prompt:\n\n```js\nprogram.prompt(\'description:\', function(name){\n  console.log(\'hi %s\', name);\n});\n```\n\n Coercion:\n\n```js\nprogram.prompt(\'Age: \', Number, function(age){\n  console.log(\'age: %j\', age);\n});\n```\n\n```js\nprogram.prompt(\'Birthdate: \', Date, function(date){\n  console.log(\'date: %s\', date);\n});\n```\n\n## .password(msg[, mask], fn)\n\nPrompt for password without echoing:\n\n```js\nprogram.password(\'Password: \', function(pass){\n  console.log(\'got "%s"\', pass);\n  process.stdin.destroy();\n});\n```\n\nPrompt for password with mask char "*":\n\n```js\nprogram.password(\'Password: \', \'*\', function(pass){\n  console.log(\'got "%s"\', pass);\n  process.stdin.destroy();\n});\n```\n\n## .confirm(msg, fn)\n\n Confirm with the given `msg`:\n\n```js\nprogram.confirm(\'continue? \', function(ok){\n  console.log(\' got %j\', ok);\n});\n```\n\n## .choose(list, fn)\n\n Let the user choose from a `list`:\n\n```js\nvar list = [\'tobi\', \'loki\', \'jane\', \'manny\', \'luna\'];\n\nconsole.log(\'Choose the coolest pet:\');\nprogram.choose(list, function(i){\n  console.log(\'you chose %d "%s"\', i, list[i]);\n});\n```\n\n## Links\n\n - [API documentation](http://visionmedia.github.com/commander.js/)\n - [ascii tables](https://github.com/LearnBoost/cli-table)\n - [progress bars](https://github.com/visionmedia/node-progress)\n - [more progress bars](https://github.com/substack/node-multimeter)\n - [examples](https://github.com/visionmedia/commander.js/tree/master/examples)\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
2793 silly resolved     readmeFilename: 'Readme.md',
2793 silly resolved     bugs: { url: 'https://github.com/visionmedia/commander.js/issues' },
2793 silly resolved     homepage: 'https://github.com/visionmedia/commander.js',
2793 silly resolved     _id: 'commander@0.6.1',
2793 silly resolved     _from: 'commander@0.6.1' } ]
2794 info install commander@0.6.1 into /usr/local/lib/node_modules/node-inspector/node_modules/ws
2795 info installOne commander@0.6.1
2796 verbose lib/node_modules/tty.js/node_modules/socket.io unbuild
2797 info preuninstall socket.io@0.9.13
2798 verbose lib/node_modules/tty.js/node_modules/express unbuild
2799 info preuninstall express@3.1.0
2800 verbose lib/node_modules/coffee/node_modules/express unbuild
2801 info preuninstall express@3.2.6
2802 verbose lib/node_modules/generator-meanstack/node_modules/yeoman-generator unbuild
2803 info preuninstall yeoman-generator@0.15.0
2804 silly resolved [ { name: 'nan',
2804 silly resolved     version: '0.3.2',
2804 silly resolved     description: 'Native Abstractions for Node.js: C++ header for Node 0.8->0.12 compatibility',
2804 silly resolved     main: '.index.js',
2804 silly resolved     repository: { type: 'git', url: 'git://github.com/rvagg/nan.git' },
2804 silly resolved     contributors: [ [Object], [Object], [Object] ],
2804 silly resolved     license: 'MIT',
2804 silly resolved     readme: 'Native Abstractions for Node.js\n===============================\n\n**A header file filled with macro and utility goodness for making addon development for Node.js easier across versions 0.8, 0.10 and 0.11, and eventually 0.12.**\n\n***Current version: 0.3.2*** *(See [nan.h](https://github.com/rvagg/nan/blob/master/nan.h) for changelog)*\n\n[![NPM](https://nodei.co/npm/nan.png?downloads=true&stars=true)](https://nodei.co/npm/nan/) [![NPM](https://nodei.co/npm-dl/nan.png?months=6)](https://nodei.co/npm/nan/)\n\nThanks to the crazy changes in V8 (and some in Node core), keeping native addons compiling happily across versions, particularly 0.10 to 0.11/0.12, is a minor nightmare. The goal of this project is to store all logic necessary to develop native Node.js addons without having to inspect `NODE_MODULE_VERSION` and get yourself into a macro-tangle.\n\nThis project also contains some helper utilities that make addon development a bit more pleasant.\n\n * **[Usage](#usage)**\n * **[Example](#example)**\n * **[API](#api)**\n\n<a name="usage"></a>\n## Usage\n\nSimply add **NAN** as a dependency in the *package.json* of your Node addon:\n\n```js\n"dependencies": {\n    ...\n    "nan" : "~0.3.1"\n    ...\n}\n```\n\nPull in the path to **NAN** in your *binding.gyp* so that you can use `#include "nan.h"` in your *.cpp*:\n\n```js\n"include_dirs" : [\n    ...\n    "<!(node -p -e \\"require(\'path\').dirname(require.resolve(\'nan\'))\\")"\n    ...\n]\n```\n\nThis works like a `-I<path-to-NAN>` when compiling your addon.\n\n<a name="example"></a>\n## Example\n\nSee **[LevelDOWN](https://github.com/rvagg/node-leveldown/pull/48)** for a full example of **NAN** in use.\n\nFor a simpler example, see the **[async pi estimation example](https://github.com/rvagg/nan/tree/master/examples/async_pi_estimate)** in the examples directory for full code and an explanation of what this Monte Carlo Pi estimation example does. Below are just some parts of the full example that illustrate the use of **NAN**.\n\nCompare to the current 0.10 version of this example, found in the [node-addon-examples](https://github.com/rvagg/node-addon-examples/tree/master/9_async_work) repository and also a 0.11 version of the same found [here](https://github.com/kkoopa/node-addon-examples/tree/5c01f58fc993377a567812597e54a83af69686d7/9_async_work).\n\nNote that there is no embedded version sniffing going on here and also the async work is made much simpler, see below for details on the `NanAsyncWorker` class.\n\n```c++\n// addon.cc\n#include <node.h>\n#include "nan.h"\n// ...\n\nusing namespace v8;\n\nvoid InitAll(Handle<Object> exports) {\n  exports->Set(NanSymbol("calculateSync"),\n    FunctionTemplate::New(CalculateSync)->GetFunction());\n\n  exports->Set(NanSymbol("calculateAsync"),\n    FunctionTemplate::New(CalculateAsync)->GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)\n```\n\n```c++\n// sync.h\n#include <node.h>\n#include "nan.h"\n\nNAN_METHOD(CalculateSync);\n```\n\n```c++\n// sync.cc\n#include <node.h>\n#include "nan.h"\n#include "sync.h"\n// ...\n\nusing namespace v8;\n\n// Simple synchronous access to the `Estimate()` function\nNAN_METHOD(CalculateSync) {\n  NanScope();\n\n  // expect a number as the first argument\n  int points = args[0]->Uint32Value();\n  double est = Estimate(points);\n\n  NanReturnValue(Number::New(est));\n}\n```\n\n```c++\n// async.cc\n#include <node.h>\n#include "nan.h"\n#include "async.h"\n\n// ...\n\nusing namespace v8;\n\nclass PiWorker : public NanAsyncWorker {\n public:\n  PiWorker(NanCallback *callback, int points)\n    : NanAsyncWorker(callback), points(points) {}\n  ~PiWorker() {}\n\n  // Executed inside the worker-thread.\n  // It is not safe to access V8, or V8 data structures\n  // here, so everything we need for input and output\n  // should go on `this`.\n  void Execute () {\n    estimate = Estimate(points);\n  }\n\n  // Executed when the async work is complete\n  // this function will be run inside the main event loop\n  // so it is safe to use V8 again\n  void HandleOKCallback () {\n    NanScope();\n\n    Local<Value> argv[] = {\n        Local<Value>::New(Null())\n      , Number::New(estimate)\n    };\n\n    callback->Call(2, argv);\n  };\n\n private:\n  int points;\n  double estimate;\n};\n\n// Asynchronous access to the `Estimate()` function\nNAN_METHOD(CalculateAsync) {\n  NanScope();\n\n  int points = args[0]->Uint32Value();\n  NanCallback *callback = new NanCallback(args[1].As<Function>());\n\n  NanAsyncQueueWorker(new PiWorker(callback, points));\n  NanReturnUndefined();\n}\n```\n\n<a name="api"></a>\n## API\n\n * <a href="#api_nan_method"><b><code>NAN_METHOD</code></b></a>\n * <a href="#api_nan_getter"><b><code>NAN_GETTER</code></b></a>\n * <a href="#api_nan_setter"><b><code>NAN_SETTER</code></b></a>\n * <a href="#api_nan_property_getter"><b><code>NAN_PROPERTY_GETTER</code></b></a>\n * <a href="#api_nan_property_setter"><b><code>NAN_PROPERTY_SETTER</code></b></a>\n * <a href="#api_nan_property_enumerator"><b><code>NAN_PROPERTY_ENUMERATOR</code></b></a>\n * <a href="#api_nan_property_deleter"><b><code>NAN_PROPERTY_DELETER</code></b></a>\n * <a href="#api_nan_property_query"><b><code>NAN_PROPERTY_QUERY</code></b></a>\n * <a href="#api_nan_weak_callback"><b><code>NAN_WEAK_CALLBACK</code></b></a>\n * <a href="#api_nan_return_value"><b><code>NanReturnValue</code></b></a>\n * <a href="#api_nan_return_undefined"><b><code>NanReturnUndefined</code></b></a>\n * <a href="#api_nan_return_null"><b><code>NanReturnNull</code></b></a>\n * <a href="#api_nan_return_empty_string"><b><code>NanReturnEmptyString</code></b></a>\n * <a href="#api_nan_scope"><b><code>NanScope</code></b></a>\n * <a href="#api_nan_locker"><b><code>NanLocker</code></b></a>\n * <a href="#api_nan_unlocker"><b><code>NanUnlocker</code></b></a>\n * <a href="#api_nan_get_internal_field_pointer"><b><code>NanGetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_set_internal_field_pointer"><b><code>NanSetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_object_wrap_handle"><b><code>NanObjectWrapHandle</code></b></a>\n * <a href="#api_nan_make_weak"><b><code>NanMakeWeak</code></b></a>\n * <a href="#api_nan_symbol"><b><code>NanSymbol</code></b></a>\n * <a href="#api_nan_get_pointer_safe"><b><code>NanGetPointerSafe</code></b></a>\n * <a href="#api_nan_set_pointer_safe"><b><code>NanSetPointerSafe</code></b></a>\n * <a href="#api_nan_from_v8_string"><b><code>NanFromV8String</code></b></a>\n * <a href="#api_nan_boolean_option_value"><b><code>NanBooleanOptionValue</code></b></a>\n * <a href="#api_nan_uint32_option_value"><b><code>NanUInt32OptionValue</code></b></a>\n * <a href="#api_nan_throw_error"><b><code>NanThrowError</code></b>, <b><code>NanThrowTypeError</code></b>, <b><code>NanThrowRangeError</code></b>, <b><code>NanThrowError(Handle<Value>)</code></b>, <b><code>NanThrowError(Handle<Value>, int)</code></b></a>\n * <a href="#api_nan_new_buffer_handle"><b><code>NanNewBufferHandle(char *, size_t, FreeCallback, void *)</code></b>, <b><code>NanNewBufferHandle(char *, uint32_t)</code></b>, <b><code>NanNewBufferHandle(uint32_t)</code></b></a>\n * <a href="#api_nan_buffer_use"><b><code>NanBufferUse(char *, uint32_t)</code></b></a>\n * <a href="#api_nan_new_context_handle"><b><code>NanNewContextHandle</code></b></a>\n * <a href="#api_nan_has_instance"><b><code>NanHasInstance</code></b></a>\n * <a href="#api_nan_persistent_to_local"><b><code>NanPersistentToLocal</code></b></a>\n * <a href="#api_nan_dispose"><b><code>NanDispose</code></b></a>\n * <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a>\n * <a href="#api_nan_init_persistent"><b><code>NanInitPersistent</code></b></a>\n * <a href="#api_nan_callback"><b><code>NanCallback</code></b></a>\n * <a href="#api_nan_async_worker"><b><code>NanAsyncWorker</code></b></a>\n * <a href="#api_nan_async_queue_worker"><b><code>NanAsyncQueueWorker</code></b></a>\n\n<a name="api_nan_method"></a>\n### NAN_METHOD(methodname)\n\nUse `NAN_METHOD` to define your V8 accessible methods:\n\n```c++\n// .h:\nclass Foo : public node::ObjectWrap {\n  ...\n\n  static NAN_METHOD(Bar);\n  static NAN_METHOD(Baz);\n}\n\n\n// .cc:\nNAN_METHOD(Foo::Bar) {\n  ...\n}\n\nNAN_METHOD(Foo::Baz) {\n  ...\n}\n```\n\nThe reason for this macro is because of the method signature change in 0.11:\n\n```c++\n// 0.10 and below:\nHandle<Value> name(const Arguments& args)\n\n// 0.11 and above\nvoid name(const FunctionCallbackInfo<Value>& args)\n```\n\nThe introduction of `FunctionCallbackInfo` brings additional complications:\n\n<a name="api_nan_getter"></a>\n### NAN_GETTER(methodname)\n\nUse `NAN_GETTER` to declare your V8 accessible getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act like the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_GETTER`.\n\n<a name="api_nan_setter"></a>\n### NAN_SETTER(methodname)\n\nUse `NAN_SETTER` to declare your V8 accessible setters. Same as `NAN_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_SETTER`.\n\n<a name="api_nan_property_getter"></a>\n### NAN_PROPERTY_GETTER(cbname)\nUse `NAN_PROPERTY_GETTER` to declare your V8 accessible property getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_GETTER`.\n\n<a name="api_nan_property_setter"></a>\n### NAN_PROPERTY_SETTER(cbname)\nUse `NAN_PROPERTY_SETTER` to declare your V8 accessible property setters. Same as `NAN_PROPERTY_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_SETTER`.\n\n<a name="api_nan_property_enumerator"></a>\n### NAN_PROPERTY_ENUMERATOR(cbname)\nUse `NAN_PROPERTY_ENUMERATOR` to declare your V8 accessible property enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_PROPERTY_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_ENUMERATOR`.\n\n<a name="api_nan_property_deleter"></a>\n### NAN_PROPERTY_DELETER(cbname)\nUse `NAN_PROPERTY_DELETER` to declare your V8 accessible property deleters. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_DELETER`.\n\n<a name="api_nan_property_query"></a>\n### NAN_PROPERTY_QUERY(cbname)\nUse `NAN_PROPERTY_QUERY` to declare your V8 accessible property queries. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_QUERY`.\n\n<a name="api_nan_weak_callback"></a>\n### NAN_WEAK_CALLBACK(type, cbname)\n\nUse `NAN_WEAK_CALLBACK` to declare your V8 WeakReference callbacks. There is an object argument accessible through `NAN_WEAK_CALLBACK_OBJECT`. The `type` argument gives the type of the `data` argument, accessible through `NAN_WEAK_CALLBACK_DATA(type)`.\n\n```c++\nstatic NAN_WEAK_CALLBACK(BufferReference*, WeakCheck) {\n  if (NAN_WEAK_CALLBACK_DATA(BufferReference*)->noLongerNeeded_) {\n    delete NAN_WEAK_CALLBACK_DATA(BufferReference*);\n  } else {\n    // Still in use, revive, prevent GC\n    NanMakeWeak(NAN_WEAK_CALLBACK_OBJECT, NAN_WEAK_CALLBACK_DATA(BufferReference*), &WeakCheck);\n  }\n}\n\n```\n<a name="api_nan_return_value"></a>\n### NanReturnValue(Handle&lt;Value&gt;)\n\nUse `NanReturnValue` when you want to return a value from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  ...\n\n  NanReturnValue(String::New("FooBar!"));\n}\n```\n\nNo `return` statement required.\n\n<a name="api_nan_return_undefined"></a>\n### NanReturnUndefined()\n\nUse `NanReturnUndefined` when you don\'t want to return anything from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnUndefined();\n}\n```\n\n<a name="api_nan_return_null"></a>\n### NanReturnNull()\n\nUse `NanReturnNull` when you want to return `Null` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnNull();\n}\n```\n\n<a name="api_nan_return_empty_string"></a>\n### NanReturnEmptyString()\n\nUse `NanReturnEmptyString` when you want to return an empty `String` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnEmptyString();\n}\n```\n\n<a name="api_nan_scope"></a>\n### NanScope()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanScope()` necessary, use it in place of `HandleScope scope`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanScope();\n\n  NanReturnValue(String::New("FooBar!"));\n}\n```\n\n<a name="api_nan_locker"></a>\n### NanLocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanLocker()` necessary, use it in place of `Locker locker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_unlocker"></a>\n### NanUnlocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanUnlocker()` necessary, use it in place of `Unlocker unlocker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_get_internal_field_pointer"></a>\n### void * NanGetInternalFieldPointer(Handle&lt;Object&gt;, int)\n\nGets a pointer to the internal field with at `index` from a V8 `Object` handle.\n\n```c++\nLocal<Object> obj;\n...\nNanGetInternalFieldPointer(obj, 0);\n```\n<a name="api_nan_set_internal_field_pointer"></a>\n### void NanSetInternalFieldPointer(Handle&lt;Object&gt;, int, void *)\n\nSets the value of the internal field at `index` on a V8 `Object` handle.\n\n```c++\nstatic Persistent<Function> dataWrapperCtor;\n...\nLocal<Object> wrapper = NanPersistentToLocal(dataWrapperCtor)->NewInstance();\nNanSetInternalFieldPointer(wrapper, 0, this);\n```\n\n<a name="api_nan_object_wrap_handle"></a>\n### Local&lt;Object&gt; NanObjectWrapHandle(Object)\n\nWhen you want to fetch the V8 object handle from a native object you\'ve wrapped with Node\'s `ObjectWrap`, you should use `NanObjectWrapHandle`:\n\n```c++\nNanObjectWrapHandle(iterator)->Get(String::NewSymbol("end"))\n```\n\n<a name="api_nan_make_weak"></a>\n### NanMakeWeak(Persistent&lt;T&gt;, parameter, callback)\n\nMake a persistent reference weak.\n\n<a name="api_nan_symbol"></a>\n### String NanSymbol(char *)\n\nThis isn\'t strictly about compatibility, it\'s just an easier way to create string symbol objects (i.e. `String::NewSymbol(x)`), for getting and setting object properties, or names of objects.\n\n```c++\nbool foo = false;\nif (obj->Has(NanSymbol("foo")))\n  foo = optionsObj->Get(NanSymbol("foo"))->BooleanValue()\n```\n\n<a name="api_nan_get_pointer_safe"></a>\n### Type NanGetPointerSafe(Type *[, Type])\n\nA helper for getting values from optional pointers. If the pointer is `NULL`, the function returns the optional default value, which defaults to `0`.  Otherwise, the function returns the value the pointer points to.\n\n```c++\nchar *plugh(uint32_t *optional) {\n  char res[] = "xyzzy";\n  uint32_t param = NanGetPointerSafe<uint32_t>(optional, 0x1337);\n  switch (param) {\n    ...\n  }\n  NanSetPointerSafe<uint32_t>(optional, 0xDEADBEEF);\n}  \n```\n\n<a name="api_nan_set_pointer_safe"></a>\n### bool NanSetPointerSafe(Type *, Type)\n\nA helper for setting optional argument pointers. If the pointer is `NULL`, the function simply return `false`.  Otherwise, the value is assigned to the variable the pointer points to.\n\n```c++\nconst char *plugh(size_t *outputsize) {\n  char res[] = "xyzzy";\n  if !(NanSetPointerSafe<size_t>(outputsize, strlen(res) + 1)) {\n    ...\n  }\n\n  ...\n}\n```\n\n<a name="api_nan_from_v8_string"></a>\n### char* NanFromV8String(Handle&lt;Value&gt;[, enum Nan::Encoding, size_t *, char *, size_t, int])\n\nWhen you want to convert a V8 `String` to a `char*` use `NanFromV8String`. It is possible to define an encoding that defaults to `Nan::UTF8` as well as a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows optionally setting `String::WriteOptions`, which default to `String::HINT_MANY_WRITES_EXPECTED | String::NO_NULL_TERMINATION`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:\n\n```c++\nsize_t count;\nchar* name = NanFromV8String(args[0]);\nchar* decoded = NanFromV8String(args[1], Nan::BASE64, &count, NULL, 0, String::HINT_MANY_WRITES_EXPECTED);\nchar param_copy[count];\nmemcpy(param_copy, decoded, count);\ndelete[] decoded;\n```\n\n<a name="api_nan_boolean_option_value"></a>\n### bool NanBooleanOptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;[, bool])\n\nWhen you have an "options" object that you need to fetch properties from, boolean options can be fetched with this pair. They check first if the object exists (`IsEmpty`), then if the object has the given property (`Has`) then they get and convert/coerce the property to a `bool`.\n\nThe optional last parameter is the *default* value, which is `false` if left off:\n\n```c++\n// `foo` is false unless the user supplies a truthy value for it\nbool foo = NanBooleanOptionValue(optionsObj, NanSymbol("foo"));\n// `bar` is true unless the user supplies a falsy value for it\nbool bar = NanBooleanOptionValueDefTrue(optionsObj, NanSymbol("bar"), true);\n```\n\n<a name="api_nan_uint32_option_value"></a>\n### uint32_t NanUInt32OptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;, uint32_t)\n\nSimilar to `NanBooleanOptionValue`, use `NanUInt32OptionValue` to fetch an integer option from your options object. Can be any kind of JavaScript `Number` and it will be coerced to an unsigned 32-bit integer.\n\nRequires all 3 arguments as a default is not optional:\n\n```c++\nuint32_t count = NanUInt32OptionValue(optionsObj, NanSymbol("count"), 1024);\n```\n\n<a name="api_nan_throw_error"></a>\n### NanThrowError(message), NanThrowTypeError(message), NanThrowRangeError(message), NanThrowError(Local&lt;Value&gt;), NanThrowError(Local&lt;Value&gt;, int)\n\nFor throwing `Error`, `TypeError` and `RangeError` objects. You should `return` this call:\n\n```c++\nreturn NanThrowError("you must supply a callback argument");\n```\n\nCan also handle any custom object you may want to throw. If used with the error code argument, it will add the supplied error code to the error object as a property called `code`.\n\n<a name="api_nan_new_buffer_handle"></a>\n### Local&lt;Object&gt; NanNewBufferHandle(char *, uint32_t), Local&lt;Object&gt; NanNewBufferHandle(uint32_t)\n\nThe `Buffer` API has changed a little in Node 0.11, this helper provides consistent access to `Buffer` creation:\n\n```c++\nNanNewBufferHandle((char*)value.data(), value.size());\n```\n\nCan also be used to initialize a `Buffer` with just a `size` argument.\n\nCan also be supplied with a `NAN_WEAK_CALLBACK` and a hint for the garbage collector, when dealing with weak references.\n\n<a name="api_nan_buffer_use"></a>\n### Local&lt;Object&gt; NanBufferUse(char*, uint32_t)\n\n`Buffer::New(char*, uint32_t)` prior to 0.11 would make a copy of the data.\nWhile it was possible to get around this, it required a shim by passing a\ncallback. So the new API `Buffer::Use(char*, uint32_t)` was introduced to remove\nneeding to use this shim.\n\n`NanBufferUse` uses the `char*` passed as the backing data, and will free the\nmemory automatically when the weak callback is called. Keep this in mind, as\ncareless use can lead to "double free or corruption" and other cryptic failures.\n\n<a name="api_nan_has_instance"></a>\n### bool NanHasInstance(Persistent&lt;FunctionTemplate&gt;&, Handle&lt;Value&gt;)\n\nCan be used to check the type of an object to determine it is of a particular class you have already defined and have a `Persistent<FunctionTemplate>` handle for.\n\n<a name="api_nan_persistent_to_local"></a>\n### Local&lt;Type&gt; NanPersistentToLocal(Persistent&lt;Type&gt;&)\n\nAside from `FunctionCallbackInfo`, the biggest and most painful change to V8 in Node 0.11 is the many restrictions now placed on `Persistent` handles. They are difficult to assign and difficult to fetch the original value out of.\n\nUse `NanPersistentToLocal` to convert a `Persistent` handle back to a `Local` handle.\n\n```c++\nLocal<Object> handle = NanPersistentToLocal(persistentHandle);\n```\n\n<a href="#api_nan_new_context_handle">\n### Local&lt;Context&gt; NanNewContextHandle([ExtensionConfiguration*, Handle&lt;ObjectTemplate&gt;, Handle&lt;Value&gt;])\nCreates a new `Local<Context>` handle.\n\n```c++\nLocal<FunctionTemplate> ftmpl = FunctionTemplate::New();\nLocal<ObjectTemplate> otmpl = ftmpl->InstanceTemplate();\nLocal<Context> ctx =  NanNewContextHandle(NULL, otmpl);\n```\n\n<a name="api_nan_dispose"></a>\n### void NanDispose(Persistent&lt;T&gt; &)\n\nUse `NanDispose` to dispose a `Persistent` handle.\n\n```c++\nNanDispose(persistentHandle);\n```\n\n<a name="api_nan_assign_persistent"></a>\n### NanAssignPersistent(type, handle, object)\n\nUse `NanAssignPersistent` to assign a non-`Persistent` handle to a `Persistent` one. You can no longer just declare a `Persistent` handle and assign directly to it later, you have to `Reset` it in Node 0.11, so this makes it easier.\n\nIn general it is now better to place anything you want to protect from V8\'s garbage collector as properties of a generic `Object` and then assign that to a `Persistent`. This works in older versions of Node also if you use `NanAssignPersistent`:\n\n```c++\nPersistent<Object> persistentHandle;\n\n...\n\nLocal<Object> obj = Object::New();\nobj->Set(NanSymbol("key"), keyHandle); // where keyHandle might be a Local<String>\nNanAssignPersistent(Object, persistentHandle, obj)\n```\n\n<a name="api_nan_init_persistent"></a>\n### NanInitPersistent(type, name, object)\n\nUser `NanInitPersistent` to declare and initialize a new `Persistent` with the supplied object. The assignment operator for `Persistent` is no longer public in Node 0.11, so this macro makes it easier to declare and initializing a new `Persistent`. See <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a> for more information.\n\n```c++\nLocal<Object> obj = Object::New();\nobj->Set(NanSymbol("key"), keyHandle); // where keyHandle might be a Local<String>\nNanInitPersistent(Object, persistentHandle, obj);\n```\n\n<a name="api_nan_callback"></a>\n### NanCallback\n\nBecause of the difficulties imposed by the changes to `Persistent` handles in V8 in Node 0.11, creating `Persistent` versions of your `Local<Function>` handles is annoyingly tricky. `NanCallback` makes it easier by taking your `Local` handle, making it persistent until the `NanCallback` is deleted and even providing a handy `Call()` method to fetch and execute the callback `Function`.\n\n```c++\nLocal<Function> callbackHandle = callback = args[0].As<Function>();\nNanCallback *callback = new NanCallback(callbackHandle);\n// pass `callback` around and it\'s safe from GC until you:\ndelete callback;\n```\n\nYou can execute the callback like so:\n\n```c++\n// no arguments:\ncallback->Call(0, NULL);\n\n// an error argument:\nLocal<Value> argv[] = {\n  Exception::Error(String::New("fail!"))\n};\ncallback->Call(1, argv);\n\n// a success argument:\nLocal<Value> argv[] = {\n  Local<Value>::New(Null()),\n  String::New("w00t!")\n};\ncallback->Call(2, argv);\n```\n\n`NanCallback` also has a `Local<Function> GetCallback()` method that you can use to fetch a local handle to the underlying callback function if you need it.\n\n<a name="api_nan_async_worker"></a>\n### NanAsyncWorker\n\n`NanAsyncWorker` is an abstract class that you can subclass to have much of the annoying async queuing and handling taken care of for you. It can even store arbitrary V8 objects for you and have them persist while the async work is in progress.\n\nSee a rough outline of the implementation:\n\n```c++\nclass NanAsyncWorker {\npublic:\n  NanAsyncWorker (NanCallback *callback);\n\n  // Clean up persistent handles and delete the *callback\n  virtual ~NanAsyncWorker ();\n\n  // Check the `char *errmsg` property and call HandleOKCallback()\n  // or HandleErrorCallback depending on whether it has been set or not\n  virtual void WorkComplete ();\n\n  // You must implement this to do some async work. If there is an\n  // error then allocate `errmsg` to to a message and the callback will\n  // be passed that string in an Error object\n  virtual void Execute ();\n\nprotected:\n  // Set this if there is an error, otherwise it\'s NULL\n  const char *errmsg;\n\n  // Save a V8 object in a Persistent handle to protect it from GC\n  void SavePersistent(const char *key, Local<Object> &obj);\n\n  // Fetch a stored V8 object (don\'t call from within `Execute()`)\n  Local<Object> GetFromPersistent(const char *key);\n\n  // Default implementation calls the callback function with no arguments.\n  // Override this to return meaningful data\n  virtual void HandleOKCallback ();\n\n  // Default implementation calls the callback function with an Error object\n  // wrapping the `errmsg` string\n  virtual void HandleErrorCallback ();\n};\n```\n\n<a name="api_nan_async_queue_worker"></a>\n### NanAsyncQueueWorker(NanAsyncWorker *)\n\n`NanAsyncQueueWorker` will run a `NanAsyncWorker` asynchronously via libuv. Both the *execute* and *after_work* steps are taken care of for you&mdash;most of the logic for this is embedded in `NanAsyncWorker`.\n\n### Contributors\n\nNAN is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align="left">Rod Vagg</th><td><a href="https://github.com/rvagg">GitHub/rvagg</a></td><td><a href="http://twitter.com/rvagg">Twitter/@rvagg</a></td></tr>\n<tr><th align="left">Benjamin Byholm</th><td><a href="https://github.com/kkoopa/">GitHub/kkoopa</a></td></tr>\n<tr><th align="left">Trevor Norris</th><td><a href="https://github.com/trevnorris">GitHub/trevnorris</a></td><td><a href="http://twitter.com/trevnorris">Twitter/@trevnorris</a></td></tr>\n</tbody></table>\n\nLicence &amp; copyright\n-----------------------\n\nCopyright (c) 2013 Rod Vagg & NAN contributors (listed above).\n\nNative Abstractions for Node.js is licensed under an MIT +no-false-attribs license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n',
2804 silly resolved     readmeFilename: 'README.md',
2804 silly resolved     bugs: { url: 'https://github.com/rvagg/nan/issues' },
2804 silly resolved     homepage: 'https://github.com/rvagg/nan',
2804 silly resolved     _id: 'nan@0.3.2',
2804 silly resolved     _from: 'nan@0.3.2',
2804 silly resolved     scripts: {} } ]
2805 info install nan@0.3.2 into /usr/local/lib/node_modules/node-inspector/node_modules/ws
2806 info installOne nan@0.3.2
2807 verbose lib/node_modules/tty.js/node_modules/term.js unbuild
2808 info preuninstall term.js@0.0.3
2809 verbose lib/node_modules/express-generator/node_modules/commander unbuild
2810 info preuninstall commander@1.3.2
2811 verbose lib/node_modules/grunt-init/node_modules/semver unbuild
2812 info preuninstall semver@1.0.14
2813 verbose lib/node_modules/grunt/node_modules/dateformat unbuild
2814 info preuninstall dateformat@1.0.2-1.2.3
2815 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/dateformat unbuild
2816 info preuninstall dateformat@1.0.2-1.2.3
2817 verbose lib/node_modules/coffee/node_modules/chai unbuild
2818 info preuninstall chai@1.7.2
2819 verbose lib/node_modules/grunt-init/node_modules/prompt unbuild
2820 info preuninstall prompt@0.1.12
2821 verbose lib/node_modules/express-generator/node_modules/mkdirp unbuild
2822 info preuninstall mkdirp@0.3.5
2823 verbose lib/node_modules/coffee-script/node_modules/mkdirp unbuild
2824 info preuninstall mkdirp@0.3.5
2825 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/async unbuild
2826 info preuninstall async@0.1.22
2827 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/async unbuild
2828 info preuninstall async@0.1.22
2829 verbose lib/node_modules/grunt/node_modules/async unbuild
2830 info preuninstall async@0.1.22
2831 verbose lib/node_modules/grunt-init/node_modules/async unbuild
2832 info preuninstall async@0.2.10
2833 verbose lib/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/async unbuild
2834 info preuninstall async@0.1.22
2835 verbose lib/node_modules/forever/node_modules/utile/node_modules/async unbuild
2836 info preuninstall async@0.2.10
2837 verbose lib/node_modules/forever/node_modules/winston/node_modules/async unbuild
2838 info preuninstall async@0.2.10
2839 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/underscore.string unbuild
2840 info preuninstall underscore.string@2.2.1
2841 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/underscore.string unbuild
2842 info preuninstall underscore.string@2.2.1
2843 verbose lib/node_modules/grunt/node_modules/underscore.string unbuild
2844 info preuninstall underscore.string@2.2.1
2845 verbose lib/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/underscore.string unbuild
2846 info preuninstall underscore.string@2.2.1
2847 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/coffee-script unbuild
2848 info preuninstall coffee-script@1.3.3
2849 verbose lib/node_modules/grunt/node_modules/coffee-script unbuild
2850 info preuninstall coffee-script@1.3.3
2851 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/lodash unbuild
2852 info preuninstall lodash@0.9.2
2853 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/lodash unbuild
2854 info preuninstall lodash@0.9.2
2855 verbose lib/node_modules/grunt/node_modules/lodash unbuild
2856 info preuninstall lodash@0.9.2
2857 verbose lib/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/lodash unbuild
2858 info preuninstall lodash@0.9.2
2859 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/findup-sync/node_modules/glob unbuild
2860 info preuninstall glob@3.2.11
2861 verbose lib/node_modules/grunt-cli/node_modules/findup-sync/node_modules/glob unbuild
2862 info preuninstall glob@3.2.11
2863 verbose lib/node_modules/grunt/node_modules/findup-sync/node_modules/glob unbuild
2864 info preuninstall glob@3.2.11
2865 verbose lib/node_modules/node-inspector/node_modules/glob unbuild
2866 info preuninstall glob@3.2.11
2867 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/nopt unbuild
2868 info preuninstall nopt@1.0.10
2869 verbose lib/node_modules/grunt-cli/node_modules/nopt unbuild
2870 info preuninstall nopt@1.0.10
2871 verbose lib/node_modules/grunt/node_modules/nopt unbuild
2872 info preuninstall nopt@1.0.10
2873 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/glob unbuild
2874 info preuninstall glob@3.1.21
2875 verbose lib/node_modules/grunt/node_modules/glob unbuild
2876 info preuninstall glob@3.1.21
2877 verbose lib/node_modules/forever/node_modules/flatiron/node_modules/prompt unbuild
2878 info preuninstall prompt@0.2.11
2879 verbose lib/node_modules/coffee/node_modules/sinon-chai unbuild
2880 info preuninstall sinon-chai@2.4.0
2881 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/js-yaml unbuild
2882 info preuninstall js-yaml@2.0.5
2883 verbose lib/node_modules/grunt/node_modules/js-yaml unbuild
2884 info preuninstall js-yaml@2.0.5
2885 verbose lib/node_modules/forever/node_modules/watch unbuild
2886 info preuninstall watch@0.8.0
2887 verbose lib/node_modules/forever/node_modules/forever-monitor unbuild
2888 info preuninstall forever-monitor@1.2.3
2889 verbose lib/node_modules/forever/node_modules/cliff/node_modules/winston unbuild
2890 info preuninstall winston@0.6.2
2891 verbose lib/node_modules/coffee/node_modules/mocha unbuild
2892 info preuninstall mocha@1.11.0
2893 verbose lib/node_modules/forever/node_modules/optimist/node_modules/minimist unbuild
2894 info preuninstall minimist@0.0.10
2895 verbose lib/node_modules/node-inspector/node_modules/async unbuild
2896 info preuninstall async@0.8.0
2897 verbose lib/node_modules/forever/node_modules/nconf/node_modules/optimist unbuild
2898 info preuninstall optimist@0.6.0
2899 verbose lib/node_modules/forever/node_modules/flatiron/node_modules/optimist unbuild
2900 info preuninstall optimist@0.6.0
2901 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/iconv-lite unbuild
2902 info preuninstall iconv-lite@0.2.11
2903 verbose lib/node_modules/grunt/node_modules/iconv-lite unbuild
2904 info preuninstall iconv-lite@0.2.11
2905 verbose lib/node_modules/forever/node_modules/flatiron/node_modules/broadway/node_modules/winston unbuild
2906 info preuninstall winston@0.7.2
2907 verbose lib/node_modules/forever/node_modules/utile/node_modules/mkdirp/node_modules/minimist unbuild
2908 info preuninstall minimist@0.0.8
2909 verbose lib/node_modules/forever/node_modules/flatiron/node_modules/director unbuild
2910 info preuninstall director@1.1.10
2911 verbose lib/node_modules/forever/node_modules/nconf/node_modules/async unbuild
2912 info preuninstall async@0.2.9
2913 verbose lib/node_modules/node-inspector/node_modules/yargs unbuild
2914 info preuninstall yargs@1.2.6
2915 verbose lib/node_modules/forever/node_modules/utile/node_modules/ncp unbuild
2916 info preuninstall ncp@0.4.2
2917 verbose lib/node_modules/node-inspector/node_modules/debug unbuild
2918 info preuninstall debug@0.8.1
2919 verbose lib/node_modules/forever/node_modules/flatiron/node_modules/broadway/node_modules/eventemitter2 unbuild
2920 info preuninstall eventemitter2@0.4.12
2921 verbose lib/node_modules/grunt-cli/node_modules/resolve unbuild
2922 info preuninstall resolve@0.3.1
2923 verbose lib/node_modules/node-inspector/node_modules/rc unbuild
2924 info preuninstall rc@0.3.5
2925 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/minimatch unbuild
2926 info preuninstall minimatch@0.2.14
2927 verbose lib/node_modules/grunt/node_modules/minimatch unbuild
2928 info preuninstall minimatch@0.2.14
2929 verbose lib/node_modules/node-inspector/node_modules/express unbuild
2930 info preuninstall express@4.0.0
2931 verbose lib/node_modules/forever/node_modules/winston/node_modules/request unbuild
2932 info preuninstall request@2.16.6
2933 verbose lib/node_modules/node-inspector/node_modules/ws/node_modules/commander unbuild
2934 info preuninstall commander@0.6.1
2935 info uninstall socket.io@0.9.13
2936 info uninstall express@3.1.0
2937 info uninstall express@3.2.6
2938 info uninstall yeoman-generator@0.15.0
2939 verbose lib/node_modules/node-inspector/node_modules/ws/node_modules/nan unbuild
2940 info preuninstall nan@0.3.2
2941 verbose tar unpack /Users/yanxin/.npm/pty.js/0.2.3/package.tgz
2942 silly lockFile 0483f70c-dules-tty-js-node-modules-pty-js tar:///usr/local/lib/node_modules/tty.js/node_modules/pty.js
2943 verbose lock tar:///usr/local/lib/node_modules/tty.js/node_modules/pty.js /Users/yanxin/.npm/0483f70c-dules-tty-js-node-modules-pty-js.lock
2944 silly lockFile fe1de5d9-xin-npm-pty-js-0-2-3-package-tgz tar:///Users/yanxin/.npm/pty.js/0.2.3/package.tgz
2945 verbose lock tar:///Users/yanxin/.npm/pty.js/0.2.3/package.tgz /Users/yanxin/.npm/fe1de5d9-xin-npm-pty-js-0-2-3-package-tgz.lock
2946 info uninstall term.js@0.0.3
2947 info uninstall commander@1.3.2
2948 info uninstall semver@1.0.14
2949 info uninstall dateformat@1.0.2-1.2.3
2950 info uninstall dateformat@1.0.2-1.2.3
2951 info uninstall chai@1.7.2
2952 info uninstall prompt@0.1.12
2953 info uninstall mkdirp@0.3.5
2954 info uninstall mkdirp@0.3.5
2955 info uninstall async@0.1.22
2956 info uninstall async@0.1.22
2957 info uninstall async@0.1.22
2958 info uninstall async@0.2.10
2959 info uninstall async@0.1.22
2960 info uninstall async@0.2.10
2961 info uninstall async@0.2.10
2962 info uninstall underscore.string@2.2.1
2963 info uninstall underscore.string@2.2.1
2964 info uninstall underscore.string@2.2.1
2965 info uninstall underscore.string@2.2.1
2966 info uninstall coffee-script@1.3.3
2967 info uninstall coffee-script@1.3.3
2968 info uninstall lodash@0.9.2
2969 info uninstall lodash@0.9.2
2970 info uninstall lodash@0.9.2
2971 info uninstall lodash@0.9.2
2972 info uninstall glob@3.2.11
2973 info uninstall glob@3.2.11
2974 info uninstall glob@3.2.11
2975 info uninstall glob@3.2.11
2976 info uninstall nopt@1.0.10
2977 info uninstall nopt@1.0.10
2978 info uninstall nopt@1.0.10
2979 info uninstall glob@3.1.21
2980 info uninstall glob@3.1.21
2981 info uninstall prompt@0.2.11
2982 info uninstall sinon-chai@2.4.0
2983 info uninstall js-yaml@2.0.5
2984 info uninstall js-yaml@2.0.5
2985 info uninstall watch@0.8.0
2986 info uninstall forever-monitor@1.2.3
2987 info uninstall winston@0.6.2
2988 info uninstall mocha@1.11.0
2989 info uninstall minimist@0.0.10
2990 info uninstall async@0.8.0
2991 info uninstall optimist@0.6.0
2992 info uninstall optimist@0.6.0
2993 info uninstall iconv-lite@0.2.11
2994 info uninstall iconv-lite@0.2.11
2995 info uninstall winston@0.7.2
2996 info uninstall minimist@0.0.8
2997 info uninstall director@1.1.10
2998 info uninstall async@0.2.9
2999 info uninstall yargs@1.2.6
3000 info uninstall ncp@0.4.2
3001 info uninstall debug@0.8.1
3002 info uninstall eventemitter2@0.4.12
3003 info uninstall resolve@0.3.1
3004 info uninstall rc@0.3.5
3005 info uninstall minimatch@0.2.14
3006 info uninstall minimatch@0.2.14
3007 info uninstall express@4.0.0
3008 info uninstall request@2.16.6
3009 info uninstall commander@0.6.1
3010 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/tty.js/node_modules unbuild socket.io@0.9.13
3011 info postuninstall socket.io@0.9.13
3012 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/tty.js/node_modules unbuild express@3.1.0
3013 verbose /usr/local/lib/node_modules/tty.js/node_modules/.bin,[object Object] binRoot
3014 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/coffee/node_modules unbuild express@3.2.6
3015 verbose /usr/local/lib/node_modules/coffee/node_modules/.bin,[object Object] binRoot
3016 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/generator-meanstack/node_modules unbuild yeoman-generator@0.15.0
3017 info postuninstall yeoman-generator@0.15.0
3018 info uninstall nan@0.3.2
3019 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/tty.js/node_modules unbuild term.js@0.0.3
3020 info postuninstall term.js@0.0.3
3021 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/express-generator/node_modules unbuild commander@1.3.2
3022 info postuninstall commander@1.3.2
3023 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules unbuild semver@1.0.14
3024 verbose /usr/local/lib/node_modules/grunt-init/node_modules/.bin,[object Object] binRoot
3025 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules unbuild dateformat@1.0.2-1.2.3
3026 info postuninstall dateformat@1.0.2-1.2.3
3027 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules unbuild dateformat@1.0.2-1.2.3
3028 info postuninstall dateformat@1.0.2-1.2.3
3029 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/coffee/node_modules unbuild chai@1.7.2
3030 info postuninstall chai@1.7.2
3031 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules unbuild prompt@0.1.12
3032 info postuninstall prompt@0.1.12
3033 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/express-generator/node_modules unbuild mkdirp@0.3.5
3034 info postuninstall mkdirp@0.3.5
3035 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/coffee-script/node_modules unbuild mkdirp@0.3.5
3036 info postuninstall mkdirp@0.3.5
3037 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules unbuild async@0.1.22
3038 info postuninstall async@0.1.22
3039 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util/node_modules unbuild async@0.1.22
3040 info postuninstall async@0.1.22
3041 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules unbuild async@0.1.22
3042 info postuninstall async@0.1.22
3043 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules unbuild async@0.2.10
3044 info postuninstall async@0.2.10
3045 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util/node_modules unbuild async@0.1.22
3046 info postuninstall async@0.1.22
3047 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/utile/node_modules unbuild async@0.2.10
3048 info postuninstall async@0.2.10
3049 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/winston/node_modules unbuild async@0.2.10
3050 info postuninstall async@0.2.10
3051 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules unbuild underscore.string@2.2.1
3052 info postuninstall underscore.string@2.2.1
3053 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util/node_modules unbuild underscore.string@2.2.1
3054 info postuninstall underscore.string@2.2.1
3055 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules unbuild underscore.string@2.2.1
3056 info postuninstall underscore.string@2.2.1
3057 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util/node_modules unbuild underscore.string@2.2.1
3058 info postuninstall underscore.string@2.2.1
3059 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules unbuild coffee-script@1.3.3
3060 verbose /usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/.bin,[object Object] binRoot
3061 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules unbuild coffee-script@1.3.3
3062 verbose /usr/local/lib/node_modules/grunt/node_modules/.bin,[object Object] binRoot
3063 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules unbuild lodash@0.9.2
3064 info postuninstall lodash@0.9.2
3065 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util/node_modules unbuild lodash@0.9.2
3066 info postuninstall lodash@0.9.2
3067 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules unbuild lodash@0.9.2
3068 info postuninstall lodash@0.9.2
3069 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules/grunt-legacy-util/node_modules unbuild lodash@0.9.2
3070 info postuninstall lodash@0.9.2
3071 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/findup-sync/node_modules unbuild glob@3.2.11
3072 info postuninstall glob@3.2.11
3073 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-cli/node_modules/findup-sync/node_modules unbuild glob@3.2.11
3074 info postuninstall glob@3.2.11
3075 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules/findup-sync/node_modules unbuild glob@3.2.11
3076 info postuninstall glob@3.2.11
3077 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/node-inspector/node_modules unbuild glob@3.2.11
3078 info postuninstall glob@3.2.11
3079 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules unbuild nopt@1.0.10
3080 verbose /usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/.bin,[object Object] binRoot
3081 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-cli/node_modules unbuild nopt@1.0.10
3082 verbose /usr/local/lib/node_modules/grunt-cli/node_modules/.bin,[object Object] binRoot
3083 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules unbuild nopt@1.0.10
3084 verbose /usr/local/lib/node_modules/grunt/node_modules/.bin,[object Object] binRoot
3085 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules unbuild glob@3.1.21
3086 info postuninstall glob@3.1.21
3087 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules unbuild glob@3.1.21
3088 info postuninstall glob@3.1.21
3089 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules unbuild prompt@0.2.11
3090 info postuninstall prompt@0.2.11
3091 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/coffee/node_modules unbuild sinon-chai@2.4.0
3092 info postuninstall sinon-chai@2.4.0
3093 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules unbuild js-yaml@2.0.5
3094 verbose /usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules/.bin,[object Object] binRoot
3095 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules unbuild js-yaml@2.0.5
3096 verbose /usr/local/lib/node_modules/grunt/node_modules/.bin,[object Object] binRoot
3097 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules unbuild watch@0.8.0
3098 info postuninstall watch@0.8.0
3099 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules unbuild forever-monitor@1.2.3
3100 info postuninstall forever-monitor@1.2.3
3101 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/cliff/node_modules unbuild winston@0.6.2
3102 info postuninstall winston@0.6.2
3103 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/coffee/node_modules unbuild mocha@1.11.0
3104 verbose /usr/local/lib/node_modules/coffee/node_modules/.bin,[object Object] binRoot
3105 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/optimist/node_modules unbuild minimist@0.0.10
3106 info postuninstall minimist@0.0.10
3107 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/node-inspector/node_modules unbuild async@0.8.0
3108 info postuninstall async@0.8.0
3109 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/nconf/node_modules unbuild optimist@0.6.0
3110 info postuninstall optimist@0.6.0
3111 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules unbuild optimist@0.6.0
3112 info postuninstall optimist@0.6.0
3113 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules unbuild iconv-lite@0.2.11
3114 info postuninstall iconv-lite@0.2.11
3115 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules unbuild iconv-lite@0.2.11
3116 info postuninstall iconv-lite@0.2.11
3117 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules/broadway/node_modules unbuild winston@0.7.2
3118 info postuninstall winston@0.7.2
3119 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/utile/node_modules/mkdirp/node_modules unbuild minimist@0.0.8
3120 info postuninstall minimist@0.0.8
3121 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules unbuild director@1.1.10
3122 info postuninstall director@1.1.10
3123 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/nconf/node_modules unbuild async@0.2.9
3124 info postuninstall async@0.2.9
3125 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/node-inspector/node_modules unbuild yargs@1.2.6
3126 info postuninstall yargs@1.2.6
3127 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/utile/node_modules unbuild ncp@0.4.2
3128 verbose /usr/local/lib/node_modules/forever/node_modules/utile/node_modules/.bin,[object Object] binRoot
3129 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/node-inspector/node_modules unbuild debug@0.8.1
3130 info postuninstall debug@0.8.1
3131 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/flatiron/node_modules/broadway/node_modules unbuild eventemitter2@0.4.12
3132 info postuninstall eventemitter2@0.4.12
3133 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-cli/node_modules unbuild resolve@0.3.1
3134 info postuninstall resolve@0.3.1
3135 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/node-inspector/node_modules unbuild rc@0.3.5
3136 verbose /usr/local/lib/node_modules/node-inspector/node_modules/.bin,[object Object] binRoot
3137 silly gunzTarPerm modes [ '755', '644' ]
3138 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt-init/node_modules/grunt/node_modules unbuild minimatch@0.2.14
3139 info postuninstall minimatch@0.2.14
3140 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/grunt/node_modules unbuild minimatch@0.2.14
3141 info postuninstall minimatch@0.2.14
3142 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/node-inspector/node_modules unbuild express@4.0.0
3143 info postuninstall express@4.0.0
3144 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/forever/node_modules/winston/node_modules unbuild request@2.16.6
3145 info postuninstall request@2.16.6
3146 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/node-inspector/node_modules/ws/node_modules unbuild commander@0.6.1
3147 info postuninstall commander@0.6.1
3148 verbose false,/usr/local/lib/node_modules,/usr/local/lib/node_modules/node-inspector/node_modules/ws/node_modules unbuild nan@0.3.2
3149 info postuninstall nan@0.3.2
3150 verbose lib/node_modules/tty.js/node_modules/socket.io unbuild
3151 verbose lib/node_modules/generator-meanstack/node_modules/yeoman-generator unbuild
3152 verbose lib/node_modules/tty.js/node_modules/term.js unbuild
3153 verbose lib/node_modules/express-generator/node_modules/commander unbuild
3154 verbose lib/node_modules/tty.js/node_modules/express unbuild
3155 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/dateformat unbuild
3156 verbose lib/node_modules/coffee/node_modules/express unbuild
3157 verbose lib/node_modules/grunt-init/node_modules/semver unbuild
3158 verbose lib/node_modules/grunt/node_modules/dateformat unbuild
3159 verbose lib/node_modules/coffee/node_modules/chai unbuild
3160 verbose lib/node_modules/grunt-init/node_modules/prompt unbuild
3161 verbose lib/node_modules/express-generator/node_modules/mkdirp unbuild
3162 verbose lib/node_modules/coffee-script/node_modules/mkdirp unbuild
3163 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/async unbuild
3164 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/async unbuild
3165 verbose lib/node_modules/grunt/node_modules/async unbuild
3166 verbose lib/node_modules/grunt-init/node_modules/async unbuild
3167 verbose lib/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/async unbuild
3168 verbose lib/node_modules/forever/node_modules/utile/node_modules/async unbuild
3169 verbose lib/node_modules/forever/node_modules/winston/node_modules/async unbuild
3170 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/underscore.string unbuild
3171 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/underscore.string unbuild
3172 verbose lib/node_modules/grunt/node_modules/underscore.string unbuild
3173 verbose lib/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/underscore.string unbuild
3174 verbose lib/node_modules/grunt/node_modules/coffee-script unbuild
3175 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/coffee-script unbuild
3176 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/lodash unbuild
3177 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/lodash unbuild
3178 verbose lib/node_modules/grunt/node_modules/lodash unbuild
3179 verbose lib/node_modules/grunt/node_modules/grunt-legacy-util/node_modules/lodash unbuild
3180 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/findup-sync/node_modules/glob unbuild
3181 verbose lib/node_modules/grunt-cli/node_modules/findup-sync/node_modules/glob unbuild
3182 verbose lib/node_modules/grunt/node_modules/findup-sync/node_modules/glob unbuild
3183 verbose lib/node_modules/node-inspector/node_modules/glob unbuild
3184 verbose lib/node_modules/grunt/node_modules/nopt unbuild
3185 verbose lib/node_modules/grunt-cli/node_modules/nopt unbuild
3186 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/nopt unbuild
3187 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/glob unbuild
3188 verbose lib/node_modules/grunt/node_modules/glob unbuild
3189 verbose lib/node_modules/forever/node_modules/flatiron/node_modules/prompt unbuild
3190 verbose lib/node_modules/coffee/node_modules/sinon-chai unbuild
3191 verbose lib/node_modules/grunt/node_modules/js-yaml unbuild
3192 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/js-yaml unbuild
3193 verbose lib/node_modules/forever/node_modules/watch unbuild
3194 verbose lib/node_modules/forever/node_modules/forever-monitor unbuild
3195 verbose lib/node_modules/forever/node_modules/cliff/node_modules/winston unbuild
3196 verbose lib/node_modules/coffee/node_modules/mocha unbuild
3197 verbose lib/node_modules/forever/node_modules/optimist/node_modules/minimist unbuild
3198 verbose lib/node_modules/node-inspector/node_modules/async unbuild
3199 verbose lib/node_modules/forever/node_modules/nconf/node_modules/optimist unbuild
3200 verbose lib/node_modules/forever/node_modules/flatiron/node_modules/optimist unbuild
3201 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/iconv-lite unbuild
3202 verbose lib/node_modules/grunt/node_modules/iconv-lite unbuild
3203 verbose lib/node_modules/forever/node_modules/flatiron/node_modules/broadway/node_modules/winston unbuild
3204 verbose lib/node_modules/forever/node_modules/utile/node_modules/mkdirp/node_modules/minimist unbuild
3205 verbose lib/node_modules/forever/node_modules/flatiron/node_modules/director unbuild
3206 verbose lib/node_modules/forever/node_modules/nconf/node_modules/async unbuild
3207 verbose lib/node_modules/node-inspector/node_modules/yargs unbuild
3208 verbose lib/node_modules/node-inspector/node_modules/debug unbuild
3209 verbose lib/node_modules/forever/node_modules/utile/node_modules/ncp unbuild
3210 verbose lib/node_modules/forever/node_modules/flatiron/node_modules/broadway/node_modules/eventemitter2 unbuild
3211 verbose lib/node_modules/grunt-cli/node_modules/resolve unbuild
3212 verbose lib/node_modules/node-inspector/node_modules/rc unbuild
3213 verbose lib/node_modules/grunt-init/node_modules/grunt/node_modules/minimatch unbuild
3214 verbose lib/node_modules/grunt/node_modules/minimatch unbuild
3215 verbose lib/node_modules/node-inspector/node_modules/express unbuild
3216 verbose lib/node_modules/forever/node_modules/winston/node_modules/request unbuild
3217 verbose lib/node_modules/node-inspector/node_modules/ws/node_modules/commander unbuild
3218 verbose lib/node_modules/node-inspector/node_modules/ws/node_modules/nan unbuild
3219 info preuninstall socket.io@0.9.13
3220 info preuninstall yeoman-generator@0.15.0
3221 info preuninstall term.js@0.0.3
3222 info preuninstall commander@1.3.2
3223 info preuninstall express@3.1.0
3224 info preuninstall dateformat@1.0.2-1.2.3
3225 info preuninstall express@3.2.6
3226 info preuninstall semver@1.0.14
3227 info preuninstall dateformat@1.0.2-1.2.3
3228 info preuninstall chai@1.7.2
3229 info preuninstall prompt@0.1.12
3230 info preuninstall mkdirp@0.3.5
3231 error Error: EACCES, mkdir '/usr/local/lib/node_modules/tty.js/node_modules/pty.js'
3231 error  { [Error: EACCES, mkdir '/usr/local/lib/node_modules/tty.js/node_modules/pty.js']
3231 error   errno: 3,
3231 error   code: 'EACCES',
3231 error   path: '/usr/local/lib/node_modules/tty.js/node_modules/pty.js',
3231 error   fstream_type: 'Directory',
3231 error   fstream_path: '/usr/local/lib/node_modules/tty.js/node_modules/pty.js',
3231 error   fstream_class: 'DirWriter',
3231 error   fstream_stack:
3231 error    [ '/usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23',
3231 error      '/usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53',
3231 error      'Object.oncomplete (fs.js:107:15)' ] }
3232 error Please try running this command again as root/Administrator.
3233 error System Darwin 13.3.0
3234 error command "node" "/usr/local/bin/npm" "update" "-g"
3235 error cwd /Users/yanxin/.emacs.d
3236 error node -v v0.10.30
3237 error npm -v 1.4.21
3238 error path /usr/local/lib/node_modules/tty.js/node_modules/pty.js
3239 error fstream_path /usr/local/lib/node_modules/tty.js/node_modules/pty.js
3240 error fstream_type Directory
3241 error fstream_class DirWriter
3242 error code EACCES
3243 error errno 3
3244 error stack Error: EACCES, mkdir '/usr/local/lib/node_modules/tty.js/node_modules/pty.js'
3245 error fstream_stack /usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23
3245 error fstream_stack /usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53
3245 error fstream_stack Object.oncomplete (fs.js:107:15)
3246 verbose exit [ 3, true ]
